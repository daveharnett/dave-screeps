module.exports = {"version":3,"file":"main.js","sources":["../src/ai/SpawnGroup.ts","../src/notifier.ts","../src/Profiler.ts","../src/ai/Traveler.ts","../src/ai/WorldMap.ts","../src/ai/Diplomat.ts","../src/ai/Empire.ts","../src/helpers/helper.ts","../src/ai/RoomHelper.ts","../src/TimeoutTracker.ts","../src/ai/operations/Operation.ts","../src/config/constants.ts","../src/ai/missions/Agent.ts","../src/ai/missions/Mission.ts","../src/ai/missions/EmergencyMission.ts","../src/ai/missions/RefillMission.ts","../src/ai/missions/LinkMiningMission.ts","../src/ai/missions/MiningMission.ts","../src/ai/missions/BuilderMission.ts","../src/ai/missions/GeologyMission.ts","../src/ai/missions/UpgradeMission.ts","../src/ai/SeedAnalysis.ts","../src/ai/missions/Guru.ts","../src/ai/missions/MasonMission.ts","../src/ai/missions/BodyguardMission.ts","../src/ai/missions/RemoteBuildMission.ts","../src/ai/missions/ScoutMission.ts","../src/ai/missions/ClaimMission.ts","../src/ai/missions/SurveyAnalyzer.ts","../src/ai/missions/SurveyMission.ts","../src/ai/missions/DefenseMission.ts","../src/ai/operations/DefenseGuru.ts","../src/ai/operations/ControllerOperation.ts","../src/ai/operations/QuadOperation.ts","../src/ai/FlexGenerator.ts","../src/ai/operations/FlexOperation.ts","../src/helpers/consoleCommands.ts","../src/helpers/loopHelper.ts","../src/prototypes/initRoomPrototype.ts","../src/prototypes/initRoomPositionPrototype.ts","../src/prototypes/initPrototypes.ts","../src/main.ts"],"sourcesContent":["import {SpawnReservation} from \"../interfaces\";\r\nexport class SpawnGroup {\r\n\r\n    spawns: StructureSpawn[];\r\n    extensions: StructureExtension[];\r\n    room: Room;\r\n    pos: RoomPosition;\r\n\r\n    availableSpawnCount: number;\r\n    isAvailable: boolean;\r\n    currentSpawnEnergy: number;\r\n    maxSpawnEnergy: number;\r\n\r\n    memory: {\r\n        log: {\r\n            availability: number\r\n            history: number[]\r\n            longHistory: number[]\r\n        },\r\n    };\r\n\r\n    constructor(room: Room) {\r\n        this.room = room;\r\n        this.spawns = _.filter(this.room.find<StructureSpawn>(FIND_MY_SPAWNS),\r\n            s => s.canCreateCreep([MOVE]) !== ERR_RCL_NOT_ENOUGH);\r\n        if (!this.room.memory.spawnMemory) this.room.memory.spawnMemory = {};\r\n        this.memory = this.room.memory.spawnMemory;\r\n        this.extensions = room.findStructures(STRUCTURE_EXTENSION) as StructureExtension[];\r\n        this.manageSpawnLog();\r\n        this.availableSpawnCount = this.getSpawnAvailability();\r\n        this.isAvailable = this.availableSpawnCount > 0;\r\n        this.currentSpawnEnergy = this.room.energyAvailable;\r\n        this.maxSpawnEnergy = this.room.energyCapacityAvailable;\r\n        this.pos = _.head(this.spawns).pos;\r\n    }\r\n\r\n    spawn (build: string[], name: string, memory?: any, reservation?: SpawnReservation): string | number {\r\n        let outcome;\r\n        this.isAvailable = false;\r\n        if (reservation) {\r\n            if (this.availableSpawnCount < reservation.spawns) return ERR_BUSY;\r\n            if (this.currentSpawnEnergy < reservation.currentEnergy) return ERR_NOT_ENOUGH_RESOURCES;\r\n        }\r\n        for (let spawn of this.spawns) {\r\n            if (spawn.spawning == null) {\r\n                outcome = spawn.createCreep(build, name, memory);\r\n                if (Memory.playerConfig.muteSpawn) break; // early\r\n\r\n                if (outcome === ERR_INVALID_ARGS) {\r\n                    console.log(\"SPAWN: invalid args for creep\\nbuild:\", build, \"\\nname:\", name, \"\\ncount:\", build.length);\r\n                }\r\n                if (_.isString(outcome)) {\r\n                    console.log(\"SPAWN: building \" + name);\r\n                }\r\n                else if (outcome === ERR_NOT_ENOUGH_RESOURCES) {\r\n                    if (Game.time % 10 === 0) {\r\n                        console.log(\"SPAWN:\", this.room.name, \"not enough energy for\", name, \"cost:\", SpawnGroup.calculateBodyCost(build),\r\n                        \"current:\", this.currentSpawnEnergy, \"max\", this.maxSpawnEnergy);\r\n                    }\r\n                }\r\n                else if (outcome !== ERR_NAME_EXISTS && outcome !== ERR_RCL_NOT_ENOUGH) {\r\n                    console.log(\"SPAWN:\", this.room.name, \"had error spawning \" + name + \", outcome: \" + outcome);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return outcome;\r\n    }\r\n\r\n    private getSpawnAvailability(): number {\r\n        let count = 0;\r\n        for (let spawn of this.spawns) {\r\n            if (spawn.spawning === null) {\r\n                count++;\r\n            }\r\n        }\r\n        this.memory.log.availability += count;\r\n        Memory.stats[\"spawnGroups.\" + this.room.name + \".idleCount\"] = count;\r\n        return count;\r\n    }\r\n\r\n    private getCurrentSpawnEnergy(): number {\r\n        let sum = 0;\r\n        for (let ext of this.extensions) {\r\n            sum += ext.energy;\r\n        }\r\n        for (let spawn of this.spawns) {\r\n            sum += spawn.energy;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    private getMaxSpawnEnergy() {\r\n        let contollerLevel = this.room.controller.level;\r\n        let extensionCount = this.extensions.length;\r\n        let spawnCount = this.spawns.length;\r\n\r\n        return spawnCount * SPAWN_ENERGY_CAPACITY + extensionCount * EXTENSION_ENERGY_CAPACITY[contollerLevel];\r\n    }\r\n\r\n    public static calculateBodyCost(body: string[]): number {\r\n        let sum = 0;\r\n        for (let part of body) {\r\n            sum += BODYPART_COST[part];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    public canCreateCreep(body: string[]): boolean {\r\n        let cost = SpawnGroup.calculateBodyCost(body);\r\n        return cost <= this.currentSpawnEnergy;\r\n    }\r\n\r\n    // proportion allows you to scale down the body size if you don't want to use all of your spawning energy\r\n    // for example, proportion of .5 would return the max units per cost if only want to use half of your spawning capacity\r\n    public maxUnitsPerCost(unitCost: number, proportion: number = 1): number {\r\n        return Math.floor((this.maxSpawnEnergy * proportion) / unitCost);\r\n    }\r\n\r\n    public maxUnits(body: string[], proportion?: number) {\r\n        let cost = SpawnGroup.calculateBodyCost(body);\r\n        return Math.min(this.maxUnitsPerCost(cost, proportion), Math.floor(50 / body.length));\r\n    }\r\n\r\n    private manageSpawnLog() {\r\n        if (!this.memory.log) this.memory.log = {availability: 0, history: [], longHistory: []};\r\n\r\n        if (Game.time % 100 !== 0) return; // early\r\n        let log = this.memory.log;\r\n        let average = log.availability / 100;\r\n        log.availability = 0;\r\n        /*\r\n        if (average > 1) console.log(\"SPAWNING:\", this.missionRoom, \"not very busy (avg\", average, \"idle out of\",\r\n            this.spawns.length, \"), perhaps add more harvesting\");\r\n        if (average < .1) console.log(\"SPAWNING:\", this.missionRoom, \"very busy (avg\", average, \"idle out of\",\r\n            this.spawns.length, \"), might want to reduce harvesting\");\r\n            */\r\n        log.history.push(average);\r\n        while (log.history.length > 5) log.history.shift();\r\n\r\n        if (Game.time % 500 !== 0) return; // early\r\n        let longAverage = _.sum(log.history) / 5;\r\n        log.longHistory.push(longAverage);\r\n        while (log.longHistory.length > 5) log.longHistory.shift();\r\n    }\r\n\r\n    public showHistory() {\r\n        console.log(\"Average availability in\", this.room.name, \"the last 5 creep generations (1500 ticks):\");\r\n        console.log(this.memory.log.history);\r\n        console.log(\"Average availability over the last 75000 ticks (each represents a period of 15000 ticks)\");\r\n        console.log(this.memory.log.longHistory);\r\n    }\r\n\r\n    get averageAvailability(): number {\r\n        if (this.memory.log.history.length === 0) {\r\n            return .1;\r\n        }\r\n        return _.last(this.memory.log.history) as number;\r\n    }\r\n}\r\n","export const notifier = {\r\n    log(message: string, severity = 5) {\r\n        let styles = {\r\n            [0]: () => console.log(message),\r\n            [1]: () => console.log(`<font color=\"#00FF00\" severity=\"1\">${message}</font>`),\r\n            [2]: () => console.log(`<font color=\"#00FFFF\" severity=\"2\">${message}</font>`),\r\n            [3]: () => console.log(`<font color=\"#FFFF00\" severity=\"3\">${message}</font>`),\r\n            [4]: () => console.log(`<font color=\"#FF00FF\" severity=\"4\">${message}</font>`),\r\n            [5]: () => console.log(`<font color=\"#FF0000\" severity=\"4\">${message}</font>`),\r\n        };\r\n        if (styles[severity]) {\r\n            styles[severity]();\r\n        }\r\n        if (severity === 5) {\r\n            Memory.notifier.push({time: Game.time, earthTime: this.earthTime(-7), message: message});\r\n        }\r\n        while (Memory.notifier.length > 1000) {\r\n            Memory.notifier.shift();\r\n        }\r\n    },\r\n\r\n    review(limit = Number.MAX_VALUE, burnAfterReading = false) {\r\n        let messageCount = Memory.notifier.length;\r\n\r\n        let count = 0;\r\n        for (let value of Memory.notifier) {\r\n            let secondsElapsed = (Game.time - value.time) * 3;\r\n            let seconds = secondsElapsed % 60;\r\n            let minutes = Math.floor(secondsElapsed / 60);\r\n            let hours = Math.floor(secondsElapsed / 3600);\r\n            console.log(`\\n${value.time} (roughly ${\r\n                hours > 0 ? `${hours} hours, ` : \"\"}${\r\n                minutes > 0 ? `${minutes} minutes, ` : \"\"}${\r\n                seconds > 0 ? `${seconds} seconds ` : \"\"}ago)`);\r\n            console.log(`${value.message}`);\r\n            count++;\r\n            if (count >= limit) { break; }\r\n        }\r\n\r\n        let destroyed = 0;\r\n        if (burnAfterReading) {\r\n            while (Memory.notifier.length > 0) {\r\n                Memory.notifier.shift();\r\n                destroyed++;\r\n                if (destroyed >= limit) { break; }\r\n            }\r\n        }\r\n\r\n        return `viewing ${count} of ${messageCount} notifications`\r\n    },\r\n\r\n    clear(term: string) {\r\n        if (term) {\r\n            let count = 0;\r\n            term = term.toLocaleLowerCase();\r\n            let newArray = [];\r\n            for (let value of Memory.notifier) {\r\n                if (value.message.toLocaleLowerCase().indexOf(term) < 0) {\r\n                    newArray.push(value);\r\n                    count++;\r\n                }\r\n                Memory.notifier = newArray;\r\n            }\r\n\r\n            return `removed ${count} messages;`\r\n        }\r\n        else {\r\n            let count = Memory.notifier.length;\r\n            Memory.notifier = [];\r\n            return `removed ${count} messages;`\r\n        }\r\n    }\r\n};\r\n","export class Profiler {\r\n\r\n        public static start(identifier: string, consoleReport = false, period = 5) {\r\n            let profile = this.initProfile(identifier, consoleReport, period);\r\n            profile.cpu = Game.cpu.getUsed();\r\n        }\r\n\r\n        public static end(identifier: string) {\r\n            let profile = Memory.profiler[identifier];\r\n            profile.total += Game.cpu.getUsed() - profile.cpu;\r\n            profile.count++;\r\n        }\r\n\r\n        public static resultOnly(identifier: string, result: number, consoleReport = false, period = 5) {\r\n            let profile = this.initProfile(identifier, consoleReport, period);\r\n            profile.total += result;\r\n            profile.count++;\r\n        }\r\n\r\n        public static initProfile(identifier: string, consoleReport: boolean, period: number): ProfilerData {\r\n            if (!Memory.profiler[identifier]) {\r\n                Memory.profiler[identifier] = {} as ProfilerData;\r\n            }\r\n            _.defaults(Memory.profiler[identifier], {total: 0, count: 0, startOfPeriod: Game.time - 1});\r\n            Memory.profiler[identifier].period = period;\r\n            Memory.profiler[identifier].consoleReport = consoleReport;\r\n            Memory.profiler[identifier].lastTickTracked = Game.time;\r\n            return Memory.profiler[identifier];\r\n        }\r\n\r\n        public static finalize() {\r\n            for (let identifier in Memory.profiler) {\r\n                let profile = Memory.profiler[identifier];\r\n                if (Game.time - profile.startOfPeriod >= profile.period) {\r\n                    if (profile.count !== 0) {\r\n                        profile.costPerCall = _.round(profile.total / profile.count, 2);\r\n                    }\r\n                    profile.costPerTick = _.round(profile.total / profile.period, 2);\r\n                    profile.callsPerTick = _.round(profile.count / profile.period, 2);\r\n                    if (profile.consoleReport) {\r\n                        console.log(\"PROFILER:\", identifier, \"perTick:\", profile.costPerTick, \"perCall:\",\r\n                            profile.costPerCall, \"calls per tick:\", profile.callsPerTick);\r\n                    }\r\n                    profile.startOfPeriod = Game.time;\r\n                    profile.total = 0;\r\n                    profile.count = 0;\r\n                }\r\n                if (Game.time - profile.lastTickTracked > 100) {\r\n                    delete Memory.profiler[identifier];\r\n                }\r\n            }\r\n\r\n            if (Game.time % 10 === 0) {\r\n                // Memory serialization will cause additional CPU use, better to err on the conservative side\r\n                Memory.cpu.history.push(Game.cpu.getUsed() + Game.gcl.level / 5);\r\n                Memory.cpu.average = _.sum(Memory.cpu.history) / Memory.cpu.history.length;\r\n                while (Memory.cpu.history.length > 100) {\r\n                    Memory.cpu.history.shift();\r\n                }\r\n            }\r\n        }\r\n\r\n        public static proportionUsed() {\r\n            return Memory.cpu.average / (Game.gcl.level * 10 + 20);\r\n        }\r\n    }\r\n","import {Profiler} from \"../Profiler\";\r\n/**\r\n * To start using Traveler, require it in main.js:\r\n * Example: var Traveler = require('Traveler.js');\r\n *\r\n * Check the footer of this file for suggestions on how to access it at various scopes\r\n *\r\n */\r\n\r\nexport interface TravelData {\r\n    stuck: number;\r\n    dest: RoomPosition;\r\n    prev: RoomPosition;\r\n    path: string;\r\n    tick: number;\r\n    cpu: number;\r\n    count: number;\r\n}\r\n\r\nexport interface TravelToOptions {\r\n    ignoreRoads?: boolean;\r\n    ignoreCreeps?: boolean;\r\n    ignoreStuck?: boolean;\r\n    ignoreStructures?: boolean;\r\n    preferHighway?: boolean;\r\n    allowHostile?: boolean;\r\n    allowSK?: boolean;\r\n    range?: number;\r\n    obstacles?: {pos: RoomPosition}[];\r\n    roomCallback?: (roomName: string, matrix: CostMatrix) => CostMatrix | boolean;\r\n    routeCallback?: (roomName: string) => number;\r\n    returnData?: { nextPos: RoomPosition; };\r\n    restrictDistance?: number;\r\n    useFindRoute?: boolean;\r\n    maxOps?: number;\r\n    movingTarget?: boolean;\r\n    freshMatrix?: boolean;\r\n    offRoad?: boolean;\r\n    stuckValue?: number;\r\n}\r\n\r\ninterface PathfinderReturn {\r\n    path: RoomPosition[];\r\n    ops: number;\r\n    cost: number;\r\n    incomplete: boolean;\r\n}\r\n\r\ninterface CachedPath {\r\n    start: RoomPosition;\r\n    finish: RoomPosition;\r\n    path: string;\r\n}\r\n\r\ninterface CachedTravelData {\r\n    progress: number;\r\n    phase: number;\r\n    tempDest: RoomPosition;\r\n}\r\n\r\nconst REPORT_CPU_THRESHOLD = 2000;\r\nconst DEFAULT_MAXOPS = 20000;\r\nconst DEFAULT_STUCK_VALUE = 5;\r\n\r\nexport class Traveler {\r\n\r\n    private structureMatrixCache: {[roomName: number]: CostMatrix} = {};\r\n    private creepMatrixCache: {[roomName: string]: CostMatrix} = {};\r\n    private creepMatrixTick: number;\r\n    private structureMatrixTick: number;\r\n\r\n    public findRoute(origin: string, destination: string,\r\n                     options: TravelToOptions = {}): {[roomName: string]: boolean } {\r\n        _.defaults(options, { restrictDistance: 16 });\r\n        if (Game.map.getRoomLinearDistance(origin, destination) > options.restrictDistance) { return; }\r\n        let allowedRooms = { [ origin ]: true, [ destination ]: true };\r\n        let ret:\r\n            Array<{  exit: ExitConstant; room: string; }>\r\n            = Game.map.findRoute(origin, destination, {\r\n                routeCallback: (roomName: string) => {\r\n\r\n                    if (options.routeCallback) {\r\n                        let outcome = options.routeCallback(roomName);\r\n                        if (outcome !== undefined) {\r\n                            return outcome;\r\n                        }\r\n                    }\r\n\r\n                    if (Game.map.getRoomLinearDistance(origin, roomName) > options.restrictDistance) { return false; }\r\n                    let parsed;\r\n                    if (options.preferHighway) {\r\n                        parsed = /^[WE]([0-9]+)[NS]([0-9]+)$/.exec(roomName) as any;\r\n                        let isHighway = (parsed[1] % 10 === 0) || (parsed[2] % 10 === 0);\r\n                        if (isHighway) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                    // SK rooms are avoided when there is no vision in the room, harvested-from SK rooms are allowed\r\n                    if (!options.allowSK && !Game.rooms[roomName]) {\r\n                        if (!parsed) { parsed = /^[WE]([0-9]+)[NS]([0-9]+)$/.exec(roomName) as any; }\r\n                        let fMod = parsed[1] % 10;\r\n                        let sMod = parsed[2] % 10;\r\n                        let isSK =  !(fMod === 5 && sMod === 5) &&\r\n                            ((fMod >= 4) && (fMod <= 6)) &&\r\n                            ((sMod >= 4) && (sMod <= 6));\r\n                        if (isSK) {\r\n                            return 10;\r\n                        }\r\n                    }\r\n                    if (!options.allowHostile && Traveler.checkOccupied(roomName) &&\r\n                        roomName !== destination && roomName !== origin) {\r\n                        return Number.POSITIVE_INFINITY;\r\n                    }\r\n\r\n                    return 2.5;\r\n                },\r\n        });\r\n        if (!_.isArray(ret)) {\r\n            console.log(`couldn't findRoute to ${destination}`);\r\n            return;\r\n        }\r\n        for (let value of ret) {\r\n            allowedRooms[value.room] = true;\r\n        }\r\n\r\n        return allowedRooms;\r\n    }\r\n\r\n    routeDistance(origin: string, destination: string): number {\r\n        let linearDistance = Game.map.getRoomLinearDistance(origin, destination);\r\n        if (linearDistance >= 20) {\r\n            return linearDistance;\r\n        }\r\n\r\n        let allowedRooms = this.findRoute(origin, destination);\r\n        if (allowedRooms) {\r\n            return Object.keys(allowedRooms).length;\r\n        }\r\n    }\r\n\r\n    public findTravelPath(origin: {pos: RoomPosition}, destination: {pos: RoomPosition},\r\n                          options: TravelToOptions = {}): PathfinderReturn {\r\n        _.defaults(options, {\r\n            ignoreCreeps: true,\r\n            maxOps: DEFAULT_MAXOPS,\r\n            range: 1,\r\n            obstacles: [],\r\n        });\r\n\r\n        if (options.movingTarget) {\r\n            options.range = 0;\r\n        }\r\n\r\n        let allowedRooms;\r\n        if (options.useFindRoute || (options.useFindRoute === undefined &&\r\n            Game.map.getRoomLinearDistance(origin.pos.roomName, destination.pos.roomName) > 2)) {\r\n            allowedRooms = this.findRoute(origin.pos.roomName, destination.pos.roomName, options);\r\n        }\r\n\r\n        let callback = (roomName: string): CostMatrix | boolean => {\r\n\r\n            if (allowedRooms) {\r\n                if (!allowedRooms[roomName]) {\r\n                    return false;\r\n                }\r\n            } else if (!options.allowHostile && Traveler.checkOccupied(roomName)) {\r\n                return false;\r\n            }\r\n\r\n            let matrix: CostMatrix;\r\n            let room = Game.rooms[roomName];\r\n            if (room) {\r\n                if (options.ignoreStructures) {\r\n                    matrix = new PathFinder.CostMatrix();\r\n                    if (!options.ignoreCreeps) {\r\n                        Traveler.addCreepsToMatrix(room, matrix);\r\n                    }\r\n                } else if (options.ignoreCreeps || roomName !== origin.pos.roomName) {\r\n                    matrix = this.getStructureMatrix(room, options.freshMatrix);\r\n                } else {\r\n                    matrix = this.getCreepMatrix(room);\r\n                }\r\n\r\n                for (let obstacle of options.obstacles) {\r\n                    matrix.set(obstacle.pos.x, obstacle.pos.y, 0xff);\r\n                }\r\n            }\r\n\r\n            if (options.roomCallback) {\r\n                if (!matrix) { matrix = new PathFinder.CostMatrix(); }\r\n                let outcome = options.roomCallback(roomName, matrix.clone());\r\n                if (outcome !== undefined) {\r\n                    return outcome;\r\n                }\r\n            }\r\n\r\n            return matrix;\r\n        };\r\n\r\n        return PathFinder.search(origin.pos, {pos: destination.pos, range: options.range}, {\r\n            maxOps: options.maxOps,\r\n            plainCost: options.offRoad ? 1 : options.ignoreRoads ? 1 : 2,\r\n            swampCost: options.offRoad ? 1 : options.ignoreRoads ? 5 : 10,\r\n            roomCallback: callback,\r\n        } );\r\n    }\r\n\r\n    public travelTo(creep: Creep, destination: {pos: RoomPosition}, options: TravelToOptions = {}): number {\r\n\r\n        /* uncomment if you would like to register hostile rooms entered\r\n        if (creep.room.controller) {\r\n            if (creep.room.controller.owner && !creep.room.controller.my) {\r\n                creep.room.memory.occupied = true;\r\n            } else {\r\n                delete creep.room.memory.occupied;\r\n            }\r\n        }\r\n        */\r\n\r\n        // initialize data object\r\n        if (!creep.memory._travel) {\r\n            creep.memory._travel = {stuck: 0, tick: Game.time, cpu: 0, count: 0} as TravelData;\r\n        }\r\n        let travelData: TravelData = creep.memory._travel;\r\n\r\n        if (creep.fatigue > 0) {\r\n            travelData.tick = Game.time;\r\n            return ERR_BUSY;\r\n        }\r\n\r\n        if (!destination) {\r\n            return ERR_INVALID_ARGS;\r\n        }\r\n\r\n        // manage case where creep is nearby destination\r\n        let rangeToDestination = creep.pos.getRangeTo(destination);\r\n        if (rangeToDestination <= options.range) {\r\n            return OK;\r\n        } else if (rangeToDestination <= 1) {\r\n            if (rangeToDestination === 1 && !options.range) {\r\n                if (options.returnData) { options.returnData.nextPos = destination.pos; }\r\n                return creep.move(creep.pos.getDirectionTo(destination));\r\n            }\r\n            return OK;\r\n        }\r\n\r\n        // check if creep is stuck\r\n        let hasMoved = true;\r\n        if (travelData.prev) {\r\n            travelData.prev = Traveler.initPosition(travelData.prev);\r\n            if (creep.pos.inRangeTo(travelData.prev, 0)) {\r\n                hasMoved = false;\r\n                travelData.stuck++;\r\n            } else {\r\n                travelData.stuck = 0;\r\n            }\r\n        }\r\n\r\n        // handle case where creep is stuck\r\n        if (!options.stuckValue) { options.stuckValue = DEFAULT_STUCK_VALUE; }\r\n        if (travelData.stuck >= options.stuckValue && !options.ignoreStuck) {\r\n            options.ignoreCreeps = false;\r\n            options.freshMatrix = true;\r\n            delete travelData.path;\r\n        }\r\n\r\n\r\n        // handle case where creep wasn't traveling last tick and may have moved, but destination is still the same\r\n        if (Game.time - travelData.tick > 1 && hasMoved) {\r\n            delete travelData.path;\r\n        }\r\n        travelData.tick = Game.time;\r\n\r\n        // delete path cache if destination is different\r\n        if (!travelData.dest || travelData.dest.x !== destination.pos.x || travelData.dest.y !== destination.pos.y ||\r\n            travelData.dest.roomName !== destination.pos.roomName) {\r\n            if (travelData.dest && options.movingTarget) {\r\n                let dest = Traveler.initPosition(travelData.dest);\r\n                if (dest.isNearTo(destination)) {\r\n                    travelData.path += dest.getDirectionTo(destination);\r\n                    travelData.dest = destination.pos;\r\n                } else {\r\n                    delete travelData.path;\r\n                }\r\n            }\r\n            else {\r\n                delete travelData.path;\r\n            }\r\n        }\r\n\r\n        // pathfinding\r\n        if (!travelData.path) {\r\n            if (creep.spawning) { return ERR_BUSY; }\r\n\r\n            travelData.dest = destination.pos;\r\n            travelData.prev = undefined;\r\n            let cpu = Game.cpu.getUsed();\r\n            let ret = this.findTravelPath(creep, destination, options);\r\n            travelData.cpu += (Game.cpu.getUsed() - cpu);\r\n            travelData.count++;\r\n            if (travelData.cpu > REPORT_CPU_THRESHOLD) {\r\n                console.log(`TRAVELER: heavy cpu use: ${creep.name}, cpu: ${_.round(travelData.cpu, 2)},\\n` +\r\n                    `origin: ${creep.pos}, dest: ${destination.pos}`);\r\n            }\r\n            if (ret.incomplete) {\r\n                // console.log(`TRAVELER: incomplete path for ${creep.name}`);\r\n                if (ret.ops < 2000 && options.useFindRoute === undefined && travelData.stuck < DEFAULT_STUCK_VALUE) {\r\n                    options.useFindRoute = false;\r\n                    ret = this.findTravelPath(creep, destination, options);\r\n                    console.log(`attempting path without findRoute was ${ret.incomplete ? \"not\" : \"\"} successful`);\r\n                }\r\n            }\r\n            travelData.path = Traveler.serializePath(creep.pos, ret.path);\r\n            travelData.stuck = 0;\r\n        }\r\n        if (!travelData.path || travelData.path.length === 0) {\r\n            return ERR_NO_PATH;\r\n        }\r\n\r\n        // consume path and move\r\n        if (travelData.prev && travelData.stuck === 0) {\r\n            travelData.path = travelData.path.substr(1);\r\n        }\r\n        travelData.prev = creep.pos;\r\n        let nextDirection = parseInt(travelData.path[0], 10);\r\n        if (options.returnData) { options.returnData.nextPos = Traveler.positionAtDirection(creep.pos, nextDirection); }\r\n        return creep.move(nextDirection);\r\n    }\r\n\r\n    // unused and untested so far\r\n    public generateCachedPath(origin: {pos: RoomPosition}, destination: {pos: RoomPosition}): CachedPath {\r\n        let ret = this.findTravelPath(origin, destination);\r\n        if (ret.incomplete) {\r\n            console.log(`TRAVELER: cachedPath generation incomplete, ${origin.pos} -> ${destination.pos}, ${ret.ops}`);\r\n            return;\r\n        }\r\n\r\n        return {\r\n            start: _.head(ret.path),\r\n            finish: _.last(ret.path),\r\n            path: Traveler.serializePath(_.head(ret.path), ret.path),\r\n        };\r\n    }\r\n\r\n    // unused and untested so far\r\n    public travelByCachedPath(creep: Creep, cachedPath: CachedPath) {\r\n        if (!creep.memory._ctrav) { creep.memory._ctrav =  { progress: 0, phase: 0 }; }\r\n        let travelData = creep.memory._ctrav as CachedTravelData;\r\n\r\n        if (travelData.tempDest) {\r\n            let tempDest = Traveler.initPosition(travelData.tempDest);\r\n            if (creep.pos.inRangeTo(tempDest, 0)) {\r\n                delete travelData.tempDest;\r\n            } else {\r\n                return this.travelTo(creep, {pos: tempDest});\r\n            }\r\n        }\r\n\r\n        if (travelData.phase === 0) {\r\n            let startPos = Traveler.initPosition(cachedPath.start);\r\n            if (creep.pos.inRangeTo(startPos, 0)) {\r\n                travelData.phase++;\r\n                travelData.progress = 0;\r\n            } else {\r\n                travelData.tempDest = startPos;\r\n                return this.travelByCachedPath(creep, cachedPath);\r\n            }\r\n        }\r\n\r\n        if (travelData.phase === 1) {\r\n            let nextDirection = cachedPath.path[travelData.progress]\r\n        }\r\n    }\r\n\r\n    public getStructureMatrix(room: Room, freshMatrix?: boolean): CostMatrix {\r\n        if (!this.structureMatrixCache[room.name] || (freshMatrix && Game.time !== this.structureMatrixTick)) {\r\n            this.structureMatrixTick = Game.time;\r\n            let matrix = new PathFinder.CostMatrix();\r\n            this.structureMatrixCache[room.name] = Traveler.addStructuresToMatrix(room, matrix, 1);\r\n        }\r\n        return this.structureMatrixCache[room.name];\r\n    }\r\n\r\n    public static initPosition(pos: RoomPosition) {\r\n        return new RoomPosition(pos.x, pos.y, pos.roomName);\r\n    }\r\n\r\n    public static addStructuresToMatrix(room: Room, matrix: CostMatrix, roadCost: number): CostMatrix {\r\n\r\n        let impassibleStructures: Structure[] = [];\r\n        for (let structure of room.find<Structure>(FIND_STRUCTURES)) {\r\n            if (structure instanceof StructureRampart) {\r\n                if (!structure.my) {\r\n                    impassibleStructures.push(structure);\r\n                }\r\n            } else if (structure instanceof StructureRoad) {\r\n                matrix.set(structure.pos.x, structure.pos.y, roadCost);\r\n            } else if (structure instanceof StructureContainer) {\r\n                matrix.set(structure.pos.x, structure.pos.y, 5);\r\n            } else {\r\n                impassibleStructures.push(structure);\r\n            }\r\n        }\r\n\r\n        for (let site of room.find<ConstructionSite>(FIND_CONSTRUCTION_SITES)) {\r\n            if (site.structureType === STRUCTURE_CONTAINER || site.structureType === STRUCTURE_ROAD) { continue; }\r\n            matrix.set(site.pos.x, site.pos.y, 0xff);\r\n        }\r\n\r\n        for (let structure of impassibleStructures) {\r\n            matrix.set(structure.pos.x, structure.pos.y, 0xff);\r\n        }\r\n\r\n        return matrix;\r\n    }\r\n\r\n    public getCreepMatrix(room: Room) {\r\n        if (!this.creepMatrixCache[room.name] || Game.time !== this.creepMatrixTick) {\r\n            this.creepMatrixTick = Game.time;\r\n            this.creepMatrixCache[room.name] = Traveler.addCreepsToMatrix(room,\r\n                this.getStructureMatrix(room, true).clone());\r\n        }\r\n        return this.creepMatrixCache[room.name];\r\n    }\r\n\r\n    public static addCreepsToMatrix(room: Room, matrix: CostMatrix): CostMatrix {\r\n        room.find<Creep>(FIND_CREEPS).forEach((creep: Creep) => matrix.set(creep.pos.x, creep.pos.y, 0xff) );\r\n        return matrix;\r\n    }\r\n\r\n    public static serializePath(startPos: RoomPosition, path: RoomPosition[], display = true): string {\r\n        let serializedPath = \"\";\r\n        let lastPosition = startPos;\r\n        for (let position of path) {\r\n            if (position.roomName === lastPosition.roomName) {\r\n                if (display) {\r\n                    new RoomVisual(position.roomName).line(position, lastPosition, {color: 'orange', lineStyle: 'dashed'});\r\n                }\r\n                serializedPath += lastPosition.getDirectionTo(position);\r\n            }\r\n            lastPosition = position;\r\n        }\r\n        return serializedPath;\r\n    }\r\n\r\n    private static positionAtDirection(origin: RoomPosition, direction: number): RoomPosition {\r\n        let offsetX = [0, 0, 1, 1, 1, 0, -1, -1, -1];\r\n        let offsetY = [0, -1, -1, 0, 1, 1, 1, 0, -1];\r\n        return new RoomPosition(origin.x + offsetX[direction], origin.y + offsetY[direction], origin.roomName);\r\n    }\r\n\r\n    public static checkOccupied(roomName: string) {\r\n        return Memory.rooms[roomName] && Memory.rooms[roomName].occupied;\r\n    }\r\n}\r\n\r\n// uncomment this to have an instance of traveler available through import\r\nexport const traveler = new Traveler();\r\n\r\n// uncomment to assign an instance to global\r\n// global.traveler = new Traveler();\r\n\r\n// uncomment this block to assign a function to Creep.prototype: creep.travelTo(destination)\r\n/*\r\nconst traveler = new Traveler();\r\nCreep.prototype.travelTo = function(destination: {pos: RoomPosition}, options?: TravelToOptions) {\r\n    return traveler.travelTo(this, destination, options);\r\n};\r\n*/\r\n","import {Diplomat} from \"./Diplomat\";\r\nimport {SpawnGroup} from \"./SpawnGroup\";\r\nexport class WorldMap {\r\n\r\n    public controlledRooms: {[roomName: string]: Room } = {};\r\n\r\n    public allyMap: {[roomName: string]: RoomMemory } = {};\r\n    public allyRooms: Room[] = [];\r\n    public tradeMap: {[roomName: string]: RoomMemory } = {};\r\n    public tradeRooms: Room[] = [];\r\n    public foesMap: {[roomName: string]: RoomMemory } = {};\r\n    public foesRooms: Room[] = [];\r\n\r\n    public activeNukes: {tick: number; roomName: string}[];\r\n    public artRooms = ARTROOMS;\r\n\r\n    private diplomat: Diplomat;\r\n\r\n    constructor(diplomat: Diplomat) {\r\n        this.diplomat = diplomat;\r\n\r\n        if (!Memory.empire) { Memory.empire = {}; }\r\n        _.defaults(Memory.empire, {\r\n            activeNukes: {}\r\n        });\r\n        this.activeNukes = Memory.empire.activeNukes;\r\n    }\r\n\r\n    init(): {[roomName: string]: SpawnGroup } {\r\n\r\n        let spawnGroups = {};\r\n\r\n        for (let roomName in Memory.rooms) {\r\n            let memory = Memory.rooms[roomName];\r\n            let room = Game.rooms[roomName];\r\n\r\n            if (room) {\r\n                this.updateMemory(room);\r\n                if (room.controller && room.controller.my) {\r\n                    this.radar(room);\r\n                    this.controlledRooms[roomName] = room;\r\n                    if (room.find(FIND_MY_SPAWNS).length > 0) {\r\n                        spawnGroups[roomName] = new SpawnGroup(room);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.diplomat.allies[memory.owner]) {\r\n                this.allyMap[roomName] = memory;\r\n                if (room) { this.allyRooms.push(room); }\r\n            }\r\n            if (this.diplomat.foes[memory.owner]) {\r\n                this.foesMap[roomName] = memory;\r\n                if (room) { this.foesRooms.push(room); }\r\n            }\r\n            if (memory.nextTrade) {\r\n                this.tradeMap[roomName] = memory;\r\n                if (room) { this.tradeRooms.push(room); }\r\n            }\r\n        }\r\n\r\n        return spawnGroups;\r\n    }\r\n\r\n    actions() {\r\n        this.reportNukes();\r\n    }\r\n\r\n    public addNuke(activeNuke: {tick: number; roomName: string}) {\r\n        this.activeNukes.push(activeNuke);\r\n    }\r\n\r\n    public reportNukes() {\r\n        if (Game.time % TICK_FULL_REPORT !== 0) return;\r\n\r\n        for (let activeNuke of this.activeNukes) {\r\n            console.log(`EMPIRE: ${Game.time - activeNuke.tick} till our nuke lands in ${activeNuke.roomName}`);\r\n        }\r\n    }\r\n\r\n\r\n    private updateMemory(room: Room) {\r\n\r\n        if (room.controller) {\r\n            room.memory.level = room.controller.level;\r\n            if (room.controller.owner) {\r\n                room.memory.owner = room.controller.owner.username;\r\n            }\r\n            if (room.controller.owner && !room.controller.my) {\r\n                // uncomment to enable travel through ally rooms\r\n                /* if (this.diplomat.allies[room.controller.owner.username]) {\r\n                    delete room.memory.occupied;\r\n                    return;\r\n                }*/\r\n                room.memory.occupied = true;\r\n            }\r\n            else if (room.memory.occupied) {\r\n                delete room.memory.occupied;\r\n            }\r\n        }\r\n    }\r\n\r\n    private radar(scanningRoom: Room) {\r\n        if (scanningRoom.controller.level < 8) { return; }\r\n        if (Game.time < scanningRoom.memory.nextRadar) { return; }\r\n\r\n        // find observer\r\n        let observer = _(scanningRoom.find<StructureObserver>(FIND_STRUCTURES))\r\n            .filter(s => s.structureType === STRUCTURE_OBSERVER)\r\n            .head();\r\n        if (!observer) {\r\n            console.log(`NETWORK: please add an observer in ${scanningRoom.name} to participate in network`);\r\n            scanningRoom.memory.nextRadar = Game.time + 1000;\r\n            return;\r\n        }\r\n\r\n        if (!scanningRoom.memory.radarData) {\r\n            console.log(`NETWORK: Beginning full radar scan in ${scanningRoom.name}`);\r\n            scanningRoom.memory.radarData = { x: -10,  y: -10 };\r\n        }\r\n        let radarData = scanningRoom.memory.radarData;\r\n\r\n        // scan loop\r\n        let scanComplete = false;\r\n        while (!scanComplete) {\r\n            let roomName = WorldMap.findRelativeRoomName(scanningRoom.name, radarData.x, radarData.y);\r\n            let scannedRoom = Game.rooms[roomName];\r\n            if (scannedRoom) {\r\n                scannedRoom.memory.nextScan = Game.time + RADAR_INTERVAL;\r\n                this.evaluateTrade(scannedRoom);\r\n                // TODO: room selection code\r\n            }\r\n            else {\r\n                if (!Memory.rooms[roomName]) Memory.rooms[roomName] = {} as RoomMemory;\r\n                let roomMemory = Memory.rooms[roomName];\r\n                if (!roomMemory.nextScan || Game.time >= roomMemory.nextScan) {\r\n                    observer.observeRoom(roomName);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            scanComplete = this.incrementScan(radarData);\r\n            if (scanComplete) {\r\n                scanningRoom.memory.nextRadar = Game.time + RADAR_INTERVAL;\r\n                console.log(`RADAR: Scan complete at ${scanningRoom.name}`);\r\n                delete scanningRoom.memory.radarData;\r\n            }\r\n        }\r\n    }\r\n\r\n    private evaluateTrade(room: Room) {\r\n        if (!room.controller || room.controller.my //|| !TradeNetwork.canTrade(room)\r\n            || !this.diplomat.partners[room.controller.owner.username]) { return; }\r\n        if (!room.memory.nextTrade) { room.memory.nextTrade = Game.time; }\r\n    }\r\n\r\n    private incrementScan(radarData: {x: number; y: number}) {\r\n        // increment\r\n        radarData.x++;\r\n        if (radarData.x > 10) {\r\n            radarData.x = -10;\r\n            radarData.y++;\r\n            if (radarData.y > 10) {\r\n                return true;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public static findRelativeRoomName(roomName: string, xDelta: number, yDelta: number): string {\r\n        let coords = this.getRoomCoordinates(roomName);\r\n        let xDir = coords.xDir;\r\n        let yDir = coords.yDir;\r\n        let x = coords.x + xDelta;\r\n        let y = coords.y + yDelta;\r\n        if (x < 0) {\r\n            x = Math.abs(x) - 1;\r\n            xDir = this.negaDirection(xDir);\r\n        }\r\n        if (y < 0) {\r\n            y = Math.abs(y) - 1;\r\n            yDir = this.negaDirection(yDir);\r\n        }\r\n\r\n        return xDir + x + yDir + y;\r\n    }\r\n\r\n    public static findRoomCoordDeltas(origin: string, otherRoom: string): {x: number, y: number} {\r\n        let originCoords = this.getRoomCoordinates(origin);\r\n        let otherCoords = this.getRoomCoordinates(otherRoom);\r\n        let xDelta = otherCoords.x - originCoords.x;\r\n        if (originCoords.xDir === otherCoords.xDir) {\r\n            if (originCoords.xDir === \"W\") {\r\n                xDelta = -xDelta;\r\n            }\r\n        }\r\n        else {\r\n            xDelta = otherCoords.x + originCoords.x + 1;\r\n            if (originCoords.xDir === \"E\") {\r\n                xDelta = -xDelta;\r\n            }\r\n        }\r\n        let yDelta = otherCoords.y - originCoords.y;\r\n        if (originCoords.yDir === otherCoords.yDir) {\r\n            if (originCoords.yDir === \"S\") {\r\n                yDelta = -yDelta;\r\n            }\r\n        }\r\n        else {\r\n            yDelta = otherCoords.y + originCoords.y + 1;\r\n            if (originCoords.yDir === \"N\") {\r\n                yDelta = -yDelta\r\n            }\r\n        }\r\n        return {x: xDelta, y: yDelta};\r\n    }\r\n\r\n    public static findRelativeRoomDir(origin: string, otherRoom: string): number {\r\n        let coordDeltas = this.findRoomCoordDeltas(origin, otherRoom);\r\n        if (Math.abs(coordDeltas.x) === Math.abs(coordDeltas.y)) {\r\n            if (coordDeltas.x > 0) {\r\n                if (coordDeltas.y > 0) {\r\n                    return 2;\r\n                }\r\n                else {\r\n                    return 4;\r\n                }\r\n            }\r\n            else if (coordDeltas.x < 0) {\r\n                if (coordDeltas.y > 0) {\r\n                    return 8;\r\n                }\r\n                else {\r\n                    return 6;\r\n                }\r\n            }\r\n            else {\r\n                // must be the same missionRoom, no direction\r\n                return 0;\r\n            }\r\n        }\r\n        else {\r\n            if (Math.abs(coordDeltas.x) > Math.abs(coordDeltas.y)) {\r\n                if (coordDeltas.x > 0) {\r\n                    return 3;\r\n                }\r\n                else {\r\n                    return 7;\r\n                }\r\n            }\r\n            else {\r\n                if (coordDeltas.y > 0) {\r\n                    return 1;\r\n                }\r\n                else {\r\n                    return 5;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static negaDirection(dir: string): string {\r\n        switch (dir) {\r\n            case \"W\":\r\n                return \"E\";\r\n            case \"E\":\r\n                return \"W\";\r\n            case \"N\":\r\n                return \"S\";\r\n            case \"S\":\r\n                return \"N\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return missionRoom coordinates for a given Room, authored by tedivm\r\n     * @param roomName\r\n     * @returns {{x: (string|any), y: (string|any), x_dir: (string|any), y_dir: (string|any)}}\r\n     */\r\n\r\n    public static getRoomCoordinates(roomName: string): RoomCoord {\r\n\r\n        let coordinateRegex = /(E|W)(\\d+)(N|S)(\\d+)/g;\r\n        let match = coordinateRegex.exec(roomName);\r\n        if (!match) return;\r\n\r\n        let xDir = match[1];\r\n        let x = match[2];\r\n        let yDir = match[3];\r\n        let y = match[4];\r\n\r\n        return {\r\n            x: Number(x),\r\n            y: Number(y),\r\n            xDir: xDir,\r\n            yDir: yDir,\r\n        };\r\n    }\r\n\r\n    public static roomTypeFromName(roomName: string): number {\r\n        let coords = this.getRoomCoordinates(roomName);\r\n        if (coords.x % 10 === 0 || coords.y % 10 === 0) {\r\n            return ROOMTYPE_ALLEY;\r\n        }\r\n        else if (coords.x % 5 === 0 && coords.y % 5 === 0) {\r\n            return ROOMTYPE_CORE;\r\n        }\r\n        else if (coords.x % 10 === 6 || coords.x % 10 === 4 || coords.y % 10 === 6 || coords.y % 10 === 4) {\r\n            return ROOMTYPE_SOURCEKEEPER;\r\n        }\r\n        else {\r\n            return ROOMTYPE_CONTROLLER;\r\n        }\r\n    }\r\n\r\n    public static findNearestCore(roomName: string): string {\r\n\r\n        let roomCoords = this.getRoomCoordinates(roomName);\r\n        let x = Math.floor(roomCoords.x / 10) + 5;\r\n        let y = Math.floor(roomCoords.y / 10) + 5;\r\n\r\n        return roomCoords.xDir + x + roomCoords.yDir + y;\r\n    }\r\n}\r\n\r\nexport const ARTROOMS = {\r\n\r\n};\r\n\r\nexport const TICK_FULL_REPORT = 0;\r\nexport const ROOMTYPE_SOURCEKEEPER = -1301;\r\nexport const ROOMTYPE_CORE = -1302;\r\nexport const ROOMTYPE_CONTROLLER = -1303;\r\nexport const ROOMTYPE_ALLEY = -1304;\r\nexport const RADAR_INTERVAL = 10000;\r\n","export class Diplomat {\r\n\r\n        public allies: {[username: string]: boolean};\r\n        public foes: {[username: string]: boolean};\r\n        public partners: {[username: string]: boolean};\r\n\r\n        constructor() {\r\n            if (!Memory.empire) { Memory.empire = {}; }\r\n            _.defaults(Memory.empire, {\r\n                allies: ALLIES,\r\n                foes: FOES,\r\n                partners: TRADE_PARTNERS,\r\n                safe: {},\r\n                danger: {},\r\n            });\r\n            this.allies = Memory.empire.allies;\r\n            this.foes = Memory.empire.foes;\r\n            this.partners = Memory.empire.partners;\r\n        }\r\n\r\n        checkEnemy(username: string, roomName: string) {\r\n            if ( this.allies[username] ) {\r\n                return false;\r\n            }\r\n\r\n            // make note of non-ally, non-npc creeps\r\n            if (username !== \"Invader\" && username !== \"Source Keeper\") {\r\n                Diplomat.strangerDanger(username, roomName);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        public static strangerDanger(username: string, roomName: string) {\r\n            if (!Memory.strangerDanger) { Memory.strangerDanger = {}; }\r\n            if (!Memory.strangerDanger[username]) { Memory.strangerDanger[username] = []; }\r\n            let lastReport = _.last(Memory.strangerDanger[username]) as StrangerReport;\r\n            if (!lastReport || lastReport.tickSeen < Game.time - 2000 ) {\r\n                let report = { tickSeen: Game.time, roomName: roomName };\r\n                console.log(\"STRANGER DANGER: one of\", username, \"\\'s creeps seen in\", roomName);\r\n                Memory.strangerDanger[username].push(report);\r\n                while (Memory.strangerDanger[username].length > 10) Memory.strangerDanger[username].shift();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    export const ALLIES = {\r\n        \"taiga\": true,\r\n        \"Reini\": true,\r\n        \"bonzaiferroni\": true,\r\n        \"SteeleR\": true,\r\n        \"Vervorris\": true,\r\n        \"Jeb\": true,\r\n        \"danny\": true,\r\n        \"Atavus\": true,\r\n        \"Ashburnie\": true,\r\n        \"ricane\": true,\r\n        \"trebbettes\": true,\r\n        \"bovius\": true,\r\n    };\r\n\r\n    export const TRADE_PARTNERS = {\r\n        \"bonzaiferroni\": true,\r\n        \"taiga\": true,\r\n        \"Reini\": true,\r\n        \"Vervorris\": true,\r\n        \"Jeb\": true,\r\n        \"trebbettes\": true,\r\n        \"ricane\": true,\r\n    };\r\n\r\n    export const FOES = {\r\n\r\n    };\r\n","import {SpawnGroup} from \"./SpawnGroup\";\r\nimport {notifier} from \"../notifier\";\r\nimport {Profiler} from \"../Profiler\";\r\nimport {Traveler, traveler} from \"./Traveler\";\r\nimport {WorldMap} from \"./WorldMap\";\r\nimport {Diplomat} from \"./Diplomat\";\r\nimport {TimeoutTracker} from \"../TimeoutTracker\";\r\n\r\nexport class Empire {\r\n\r\n    spawnGroups: {[roomName: string]: SpawnGroup};\r\n    memory: {\r\n        errantConstructionRooms: {};\r\n    };\r\n\r\n    public traveler: Traveler;\r\n    public diplomat: Diplomat;\r\n    public map: WorldMap;\r\n\r\n    constructor() {\r\n        if (!Memory.empire) Memory.empire = {};\r\n        _.defaults(Memory.empire, {\r\n            errantConstructionRooms: {},\r\n        });\r\n        this.memory = Memory.empire;\r\n    }\r\n\r\n    /**\r\n     * Occurs before operation phases\r\n     */\r\n\r\n    init() {\r\n        this.traveler = traveler;\r\n        this.diplomat = new Diplomat();\r\n        this.map = new WorldMap(this.diplomat);\r\n        this.spawnGroups = this.map.init();\r\n    }\r\n\r\n    /**\r\n     * Occurs after operation phases\r\n     */\r\n\r\n    actions() {\r\n        this.map.actions();\r\n        this.clearErrantConstruction();\r\n    }\r\n\r\n    getSpawnGroup(roomName: string) {\r\n        if (this.spawnGroups[roomName]) {\r\n            return this.spawnGroups[roomName];\r\n        }\r\n        else {\r\n            let room = Game.rooms[roomName];\r\n            if (room && room.find(FIND_MY_SPAWNS).length > 0 && room.controller.level > 0) {\r\n                this.spawnGroups[roomName] = new SpawnGroup(room);\r\n                return this.spawnGroups[roomName];\r\n            }\r\n        }\r\n    }\r\n\r\n    underCPULimit() {\r\n        return Profiler.proportionUsed() < .9;\r\n    }\r\n\r\n    private clearErrantConstruction() {\r\n        if (Game.time % 1000 !== 0) { return; }\r\n\r\n        let removeErrantStatus = {};\r\n        let addErrantStatus = {};\r\n        for (let siteName in Game.constructionSites) {\r\n            let site = Game.constructionSites[siteName];\r\n            if (site.room) {\r\n                delete this.memory.errantConstructionRooms[site.pos.roomName];\r\n            }\r\n            else {\r\n                if (this.memory.errantConstructionRooms[site.pos.roomName]) {\r\n                    site.remove();\r\n                    removeErrantStatus[site.pos.roomName];\r\n                }\r\n                else {\r\n                    addErrantStatus[site.pos.roomName] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let roomName in addErrantStatus) {\r\n            this.memory.errantConstructionRooms[roomName] = true;\r\n        }\r\n\r\n        for (let roomName in removeErrantStatus) {\r\n            notifier.log(`EMPIRE: removed construction sites in ${roomName}`);\r\n            delete this.memory.errantConstructionRooms[roomName];\r\n        }\r\n    }\r\n\r\n    spawnFromClosest(pos: RoomPosition, body: string[], name: string) {\r\n        let closest: SpawnGroup;\r\n        let bestDistance = Number.MAX_VALUE;\r\n        for (let roomName in this.spawnGroups) {\r\n            let distance = Game.map.getRoomLinearDistance(pos.roomName, roomName);\r\n            if (distance < bestDistance) {\r\n                bestDistance = distance;\r\n                closest = this.spawnGroups[roomName];\r\n            }\r\n        }\r\n        return closest.spawn(body, name);\r\n    }\r\n}\r\n\r\n","import {PowerFlagScan, Coord} from \"../interfaces\";\r\nimport {empire} from \"./loopHelper\";\r\nimport {ROOMTYPE_ALLEY, ROOMTYPE_CORE, ROOMTYPE_SOURCEKEEPER, ROOMTYPE_CONTROLLER} from \"../ai/WorldMap\";\r\nexport var helper = {\r\n    getStoredAmount(target: any, resourceType: string) {\r\n        if (target instanceof Creep) {\r\n            return target.carry[resourceType];\r\n        }\r\n        else if (target.hasOwnProperty(\"store\")) {\r\n            return target.store[resourceType];\r\n        }\r\n        else if (resourceType === RESOURCE_ENERGY && target.hasOwnProperty(\"energy\")) {\r\n            return target.energy;\r\n        }\r\n    },\r\n\r\n    getCapacity(target: any) {\r\n        if (target instanceof Creep) {\r\n            return target.carryCapacity;\r\n        }\r\n        else if (target.hasOwnProperty(\"store\")) {\r\n            return target.storeCapacity;\r\n        }\r\n        else if (target.hasOwnProperty(\"energyCapacity\")) {\r\n            return target.energyCapacity;\r\n        }\r\n    },\r\n\r\n    isFull(target: any, resourceType: string) {\r\n        if (target instanceof Creep) {\r\n            return target.carry[resourceType] === target.carryCapacity;\r\n        }\r\n        else if (target.hasOwnProperty(\"store\")) {\r\n            return target.store[resourceType] === target.storeCapacity;\r\n        }\r\n        else if (resourceType === RESOURCE_ENERGY && target.hasOwnProperty(\"energy\")) {\r\n            return target.energy === target.energyCapacity;\r\n        }\r\n    },\r\n\r\n    clampDirection(direction: number): number {\r\n        while (direction < 1) direction += 8;\r\n        while (direction > 8) direction -= 8;\r\n        return direction;\r\n    },\r\n\r\n    deserializeRoomPosition(roomPosition: RoomPosition): RoomPosition {\r\n        return new RoomPosition(roomPosition.x, roomPosition.y, roomPosition.roomName);\r\n    },\r\n\r\n    blockOffPosition(costs: CostMatrix, roomObject: RoomObject, range: number, cost = 30) {\r\n        for (let xDelta = -range; xDelta <= range; xDelta++) {\r\n            for (let yDelta = -range; yDelta <= range; yDelta++) {\r\n                if (Game.map.getTerrainAt(roomObject.pos.x + xDelta, roomObject.pos.y + yDelta, roomObject.room.name) === \"wall\") continue;\r\n                costs.set(roomObject.pos.x + xDelta, roomObject.pos.y + yDelta, cost);\r\n            }\r\n        }\r\n    },\r\n\r\n    addTerrainToMatrix(matrix: CostMatrix, roomName: string): CostMatrix {\r\n        for (let x = 0; x < 50; x++) {\r\n            for (let y = 0; y < 50; y++) {\r\n                let terrain = Game.map.getTerrainAt(x, y, roomName);\r\n                if (terrain === \"wall\") {\r\n                    matrix.set(x, y, 0xff);\r\n                }\r\n                else if (terrain === \"swamp\") {\r\n                    matrix.set(x, y, 5);\r\n                }\r\n                else {\r\n                    matrix.set(x, y, 1);\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    },\r\n\r\n    blockOffExits(matrix: CostMatrix, cost = 0xff, roomName?: string): CostMatrix {\r\n        for (let x = 0; x < 50; x += 49) {\r\n            for (let y = 0; y < 50; y++) {\r\n                if (roomName) {\r\n                    let terrain = Game.map.getTerrainAt(x, y, roomName);\r\n                    if (terrain !== \"wall\") { matrix.set(x, y, cost); }\r\n                }\r\n                else { matrix.set(x, y, 0xff); }\r\n            }\r\n        }\r\n        for (let x = 0; x < 50; x++) {\r\n            for (let y = 0; y < 50; y += 49) {\r\n                if (roomName) {\r\n                    let terrain = Game.map.getTerrainAt(x, y, roomName);\r\n                    if (terrain !== \"wall\") { matrix.set(x, y, cost); }\r\n                }\r\n                else { matrix.set(x, y, 0xff); }\r\n            }\r\n        }\r\n        return matrix;\r\n    },\r\n\r\n    showMatrix(matrix: CostMatrix) {\r\n        // showMatrix\r\n        for (let y = 0; y < 50; y++) {\r\n            let line = \"\";\r\n            for (let x = 0; x < 50; x++) {\r\n                let value = matrix.get(x, y);\r\n                if (value === 0xff) line += \"f\";\r\n                else line += value % 10;\r\n            }\r\n            console.log(line);\r\n        }\r\n    },\r\n\r\n    coordToPosition(coord: Coord, centerPosition: RoomPosition, rotation = 0) {\r\n        if (!(centerPosition instanceof RoomPosition)) {\r\n            centerPosition = this.deserializeRoomPosition(centerPosition);\r\n        }\r\n        let xCoord = coord.x;\r\n        let yCoord = coord.y;\r\n        if (rotation === 1) {\r\n            xCoord = -coord.y;\r\n            yCoord = coord.x;\r\n        }\r\n        else if (rotation === 2) {\r\n            xCoord = -coord.x;\r\n            yCoord = -coord.y;\r\n        }\r\n        else if (rotation === 3) {\r\n            xCoord = coord.y;\r\n            yCoord = -coord.x;\r\n        }\r\n        return new RoomPosition(centerPosition.x + xCoord, centerPosition.y + yCoord, centerPosition.roomName);\r\n    },\r\n\r\n    positionToCoord(pos: {x: number, y: number}, centerPoint: {x: number, y: number}, rotation = 0): Coord {\r\n        let xCoord = pos.x - centerPoint.x;\r\n        let yCoord = pos.y - centerPoint.y;\r\n        if (rotation === 0) {\r\n            return {x: xCoord, y: yCoord };\r\n        }\r\n        else if (rotation === 1) {\r\n            return {x: yCoord, y: -xCoord };\r\n        }\r\n        else if (rotation === 2) {\r\n            return {x: -xCoord, y: -yCoord };\r\n        }\r\n        else if (rotation === 3) {\r\n            return {x: -yCoord, y: xCoord};\r\n        }\r\n    },\r\n\r\n    serializePath(startPos: RoomPosition, path: RoomPosition[]): string {\r\n        let serializedPath = \"\";\r\n        let lastPosition = startPos;\r\n        for (let position of path) {\r\n            if (position.roomName === lastPosition.roomName) {\r\n                serializedPath += lastPosition.getDirectionTo(position);\r\n            }\r\n            lastPosition = position;\r\n        }\r\n        return serializedPath;\r\n    },\r\n\r\n    pathablePosition(roomName: string): RoomPosition {\r\n        for (let radius = 0; radius < 20; radius++) {\r\n            for (let xDelta = -radius; xDelta <= radius; xDelta++) {\r\n                for (let yDelta = -radius; yDelta <= radius; yDelta++) {\r\n                    if (Math.abs(yDelta) !== radius && Math.abs(xDelta) !== radius) {\r\n                        continue;\r\n                    }\r\n                    let x = 25 + xDelta;\r\n                    let y = 25 + yDelta;\r\n                    let terrain = Game.map.getTerrainAt(x, y, roomName);\r\n                    if (terrain !== \"wall\") {\r\n                        return new RoomPosition(x, y, roomName);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    debugPath(path: RoomPosition[], identifier = \"\") {\r\n        let count = 0;\r\n        for (let position of path) {\r\n            let room = Game.rooms[position.roomName];\r\n            if (room) {\r\n                let name = \"debugPath\" + identifier + count;\r\n                count++;\r\n                let flag = Game.flags[name];\r\n                if (flag) {\r\n                    flag.setPosition(position);\r\n                }\r\n                else {\r\n                    position.createFlag(name, COLOR_ORANGE);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = count; i < 1000; i++) {\r\n            let name = \"debugPath\" + identifier + i;\r\n            let flag = Game.flags[name];\r\n            if (flag) {\r\n                flag.remove();\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return `placed ${count} out of ${path.length} flags`;\r\n    },\r\n\r\n    towerDamageAtRange(range: number): number {\r\n        if (range <= TOWER_OPTIMAL_RANGE) { return TOWER_POWER_ATTACK; }\r\n        if (range >= TOWER_FALLOFF_RANGE) { range = TOWER_FALLOFF_RANGE; }\r\n        return TOWER_POWER_ATTACK - (TOWER_POWER_ATTACK * TOWER_FALLOFF *\r\n            (range - TOWER_OPTIMAL_RANGE) / (TOWER_FALLOFF_RANGE - TOWER_OPTIMAL_RANGE))\r\n    },\r\n\r\n    permutator(inputArr): number[][] {\r\n        let result = [];\r\n\r\n        const permute = (arr, m = []) => {\r\n            if (arr.length === 0) {\r\n                result.push(m)\r\n            } else {\r\n                for (let i = 0; i < arr.length; i++) {\r\n                    let curr = arr.slice();\r\n                    let next = curr.splice(i, 1);\r\n                    permute(curr.slice(), m.concat(next))\r\n                }\r\n            }\r\n        };\r\n\r\n        permute(inputArr);\r\n\r\n        return result;\r\n    },\r\n\r\n    randomInterval(interval: number): number {\r\n        return interval + Math.floor((Math.random() - .5) * interval * .2);\r\n    }\r\n};\r\n","import {empire} from \"../helpers/loopHelper\";\r\n\r\nexport interface FindClosestOptions {\r\n    linearDistanceLimit?: number,\r\n    opsLimit?: number,\r\n    margin?: number,\r\n    byRoute?: boolean,\r\n}\r\n\r\nexport class RoomHelper {\r\n    public static findClosest<T extends {pos: RoomPosition}>(origin: {pos: RoomPosition}, destinations: T[],\r\n                              options: FindClosestOptions = {}): {destination: T, distance: number}[] {\r\n\r\n        if (options.linearDistanceLimit === undefined) {\r\n            options.linearDistanceLimit = 16; // pathfinder room search limit\r\n        }\r\n\r\n        if (options.margin === undefined) {\r\n            options.margin = 0;\r\n        }\r\n\r\n        let totalCPU = Game.cpu.getUsed();\r\n\r\n        let filtered = _(destinations)\r\n            .filter( dest => Game.map.getRoomLinearDistance(origin.pos.roomName, dest.pos.roomName) <= options.linearDistanceLimit)\r\n            .sortBy( dest => Game.map.getRoomLinearDistance(origin.pos.roomName, dest.pos.roomName))\r\n            .value();\r\n\r\n        let bestDestinations: {destination: T, distance: number}[] = [];\r\n        let bestLinearDistance = Number.MAX_VALUE;\r\n        let bestDistance = Number.MAX_VALUE;\r\n        for (let dest of filtered) {\r\n            let linearDistance = Game.map.getRoomLinearDistance(origin.pos.roomName, dest.pos.roomName);\r\n            if (linearDistance > bestLinearDistance) {\r\n                continue;\r\n            }\r\n\r\n            let distance;\r\n            if (options.byRoute) {\r\n                let route = empire.traveler.findRoute(origin.pos.roomName, dest.pos.roomName);\r\n                if (!route) { continue; }\r\n                distance = Object.keys(route).length;\r\n            } else {\r\n                let ret = empire.traveler.findTravelPath(origin, dest, {maxOps: options.opsLimit});\r\n                if (ret.incomplete) { continue; }\r\n                distance = ret.path.length;\r\n            }\r\n\r\n            if (distance < bestDistance) {\r\n                bestLinearDistance = linearDistance;\r\n                bestDistance = distance;\r\n                bestDestinations = _.filter(bestDestinations, value => value.distance <= bestDistance + options.margin);\r\n            }\r\n\r\n            if (distance <= bestDistance + options.margin) {\r\n                bestDestinations.push({destination: dest, distance: distance});\r\n            }\r\n        }\r\n\r\n        console.log(`FINDCLOSEST: cpu: ${Game.cpu.getUsed() - totalCPU}, # considered: ${destinations.length},` +\r\n            ` # selected ${bestDestinations.length}`);\r\n\r\n        return bestDestinations;\r\n    }\r\n}\r\n","import {notifier} from \"./notifier\";\r\nexport class TimeoutTracker {\r\n    public static init() {\r\n        if (Memory.timeoutTracker) {\r\n            let data = Memory.timeoutTracker;\r\n            notifier.log(`TIMEOUT: operation: ${data.operation}, mission: ${data.mission}, phase: ${data.phase}`);\r\n            delete Memory.timeoutTracker;\r\n        }\r\n\r\n        Memory.timeoutTracker = { phase: \"pre-operation init\", operation: undefined, mission: undefined };\r\n    }\r\n\r\n    public static log(phase: string, operation?: string, mission?: string) {\r\n        Memory.timeoutTracker.operation = operation;\r\n        Memory.timeoutTracker.mission = mission;\r\n        Memory.timeoutTracker.phase = phase;\r\n    }\r\n\r\n    public static finalize() {\r\n        delete Memory.timeoutTracker;\r\n    }\r\n}\r\n","import {Empire} from \"../Empire\";\r\nimport {Mission} from \"../missions/Mission\";\r\nimport {SpawnGroup} from \"../SpawnGroup\";\r\nimport {OperationPriority} from \"../../config/constants\";\r\nimport {Profiler} from \"../../Profiler\";\r\nimport {empire} from \"../../helpers/loopHelper\";\r\nimport {RoomHelper} from \"../RoomHelper\";\r\nimport {helper} from \"../../helpers/helper\";\r\nimport {TimeoutTracker} from \"../../TimeoutTracker\";\r\n\r\nexport abstract class Operation {\r\n\r\n    flag: Flag;\r\n    name: string;\r\n    type: string;\r\n    room: Room;\r\n    priority: OperationPriority;\r\n    hasVision: boolean;\r\n    sources: Source[];\r\n    mineral: Mineral;\r\n    spawnGroup: SpawnGroup;\r\n    remoteSpawn: {distance: number, spawnGroup: SpawnGroup};\r\n    missions: {[roleName: string]: Mission} = {};\r\n    waypoints: Flag[];\r\n    spawnData: {\r\n        spawnRooms: { distance: number, roomName: string }[];\r\n        nextSpawnCheck: number;\r\n    };\r\n    memory: any;\r\n\r\n    /**\r\n     *\r\n     * @param flag - missions will operate relative to this flag, use the following naming convention: \"operationType_operationName\"\r\n     * @param name - second part of flag.name, should be unique amont all other operation names (I use city names)\r\n     * @param type - first part of flag.name, used to determine which operation class to instantiate\r\n     * @param empire - object used for empire-scoped behavior (terminal transmission, etc.)\r\n     */\r\n    constructor(flag: Flag, name: string, type: string) {\r\n        this.flag = flag;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.room = flag.room;\r\n        this.memory = flag.memory;\r\n        if (!this.memory.spawnData) { this.memory.spawnData = {}; }\r\n        this.spawnData = this.memory.spawnData;\r\n        // variables that require vision (null check where appropriate)\r\n        if (this.flag.room) {\r\n            this.hasVision = true;\r\n            this.sources = _.sortBy(flag.room.find<Source>(FIND_SOURCES), (s: Source) => s.pos.getRangeTo(flag));\r\n            this.mineral = _.head(flag.room.find<Mineral>(FIND_MINERALS));\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Init Phase - initialize operation variables and instantiate missions\r\n     */\r\n    init() {\r\n        try {\r\n            TimeoutTracker.log(\"initOperation\", this.name);\r\n            this.initOperation();\r\n        }\r\n        catch (e) {\r\n            console.log(\"error caught in initOperation phase, operation:\", this.name);\r\n            console.log(e.stack);\r\n        }\r\n\r\n        for (let missionName in this.missions) {\r\n            try {\r\n                TimeoutTracker.log(\"initMission\", this.name, missionName);\r\n                Profiler.start(\"in_m.\" + missionName.substr(0, 3));\r\n                this.missions[missionName].initMission();\r\n                Profiler.end(\"in_m.\" + missionName.substr(0, 3));\r\n            }\r\n            catch (e) {\r\n                console.log(\"error caught in initMission phase, operation:\", this.name, \"mission:\", missionName);\r\n                console.log(e.stack);\r\n            }\r\n        }\r\n    }\r\n    abstract initOperation();\r\n\r\n    /**\r\n     * RoleCall Phase - Iterate through missions and call mission.roleCall()\r\n     */\r\n    roleCall() {\r\n        // mission roleCall\r\n        for (let missionName in this.missions) {\r\n            try {\r\n                TimeoutTracker.log(\"roleCall\", this.name, missionName);\r\n                Profiler.start(\"rc_m.\" + missionName.substr(0, 3));\r\n                this.missions[missionName].roleCall();\r\n                Profiler.end(\"rc_m.\" + missionName.substr(0, 3));\r\n            }\r\n            catch (e) {\r\n                console.log(\"error caught in roleCall phase, operation:\", this.name, \"mission:\", missionName);\r\n                console.log(e.stack);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Action Phase - Iterate through missions and call mission.missionActions()\r\n     */\r\n    actions() {\r\n        // mission actions\r\n        for (let missionName in this.missions) {\r\n            try {\r\n                TimeoutTracker.log(\"actions\", this.name, missionName);\r\n                Profiler.start(\"ac_m.\" + missionName.substr(0, 3));\r\n                this.missions[missionName].missionActions();\r\n                Profiler.end(\"ac_m.\" + missionName.substr(0, 3));\r\n            }\r\n            catch (e) {\r\n                console.log(\"error caught in missionActions phase, operation:\", this.name, \"mission:\", missionName, \"in missionRoom \", this.flag.pos.roomName);\r\n                console.log(e.stack);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finalization Phase - Iterate through missions and call mission.finalizeMission(), also call operation.finalizeOperation()\r\n     */\r\n    finalize() {\r\n        // mission actions\r\n        for (let missionName in this.missions) {\r\n            try {\r\n                TimeoutTracker.log(\"finalize\", this.name, missionName);\r\n                Profiler.start(\"fi_m.\" + missionName.substr(0, 3));\r\n                this.missions[missionName].finalizeMission();\r\n                Profiler.end(\"fi_m.\" + missionName.substr(0, 3));\r\n            }\r\n            catch (e) {\r\n                console.log(\"error caught in finalizeMission phase, operation:\", this.name, \"mission:\", missionName);\r\n                console.log(e.stack);\r\n            }\r\n        }\r\n\r\n        try {\r\n            TimeoutTracker.log(\"finalizeOperation\", this.name);\r\n            this.finalizeOperation();\r\n            TimeoutTracker.log(\"post-operation\");\r\n        }\r\n        catch (e) {\r\n            console.log(\"error caught in finalizeOperation phase, operation:\", this.name);\r\n            console.log(e.stack);\r\n        }\r\n    }\r\n    abstract finalizeOperation();\r\n\r\n    /**\r\n     * Invalidate Cache Phase - Occurs every-so-often (see constants.ts) to give you an efficient means of invalidating operation and\r\n     * mission cache\r\n     */\r\n    invalidateCache() {\r\n        // base rate of 1 proc out of 100 ticks\r\n        if (Math.random() < .01) {\r\n            for (let missionName in this.missions) {\r\n                try {\r\n                    this.missions[missionName].invalidateMissionCache();\r\n                }\r\n                catch (e) {\r\n                    console.log(\"error caught in invalidateMissionCache phase, operation:\", this.name, \"mission:\", missionName);\r\n                    console.log(e.stack);\r\n                }\r\n            }\r\n\r\n            try {\r\n                this.invalidateOperationCache();\r\n            }\r\n            catch (e) {\r\n                console.log(\"error caught in invalidateOperationCache phase, operation:\", this.name);\r\n                console.log(e.stack);\r\n            }\r\n        }\r\n    }\r\n    abstract invalidateOperationCache();\r\n\r\n    /**\r\n     * Add mission to operation.missions hash\r\n     * @param mission\r\n     */\r\n    addMission(mission: Mission) {\r\n        // it is important for every mission belonging to an operation to have\r\n        // a unique name or they will be overwritten here\r\n        this.missions[mission.name] = mission;\r\n    }\r\n\r\n    initRemoteSpawn(roomDistanceLimit: number, levelRequirement: number, margin = 0) {\r\n\r\n        // invalidated periodically\r\n        if (!this.spawnData.nextSpawnCheck || Game.time >= this.spawnData.nextSpawnCheck) {\r\n            let spawnGroups = _.filter(_.toArray(empire.spawnGroups),\r\n                spawnGroup => spawnGroup.room.controller.level >= levelRequirement\r\n                && spawnGroup.room.name !== this.flag.pos.roomName);\r\n            let bestGroups = RoomHelper.findClosest(this.flag, spawnGroups,\r\n                {margin: margin, linearDistanceLimit: roomDistanceLimit});\r\n\r\n            if (bestGroups.length > 0) {\r\n                bestGroups = _.sortBy(bestGroups, value => value.distance);\r\n                this.spawnData.spawnRooms = _.map(bestGroups, value => {\r\n                    return {distance: value.distance, roomName: value.destination.room.name}\r\n                });\r\n                this.spawnData.nextSpawnCheck = Game.time + helper.randomInterval(10000); // Around 10 hours\r\n            } else {\r\n                this.spawnData.nextSpawnCheck = Game.time + 100; // Around 6 min\r\n            }\r\n            console.log(`SPAWN: finding spawn rooms in ${this.name}, result: ${bestGroups.length} found`);\r\n        }\r\n\r\n        if (this.spawnData.spawnRooms) {\r\n            let bestAvailability = 0;\r\n            let bestSpawn: {distance: number, roomName: string };\r\n            for (let data of this.spawnData.spawnRooms) {\r\n                let spawnGroup = empire.getSpawnGroup(data.roomName);\r\n                if (!spawnGroup) { continue; }\r\n                if (spawnGroup.averageAvailability >= 1) {\r\n                    bestSpawn = data;\r\n                    break;\r\n                }\r\n                if (spawnGroup.averageAvailability > bestAvailability) {\r\n                    bestAvailability = spawnGroup.averageAvailability;\r\n                    bestSpawn = data;\r\n                }\r\n            }\r\n            if (bestSpawn) {\r\n                this.remoteSpawn = {distance: bestSpawn.distance, spawnGroup: empire.getSpawnGroup(bestSpawn.roomName)};\r\n            }\r\n        }\r\n    }\r\n\r\n    manualControllerBattery(id: string) {\r\n        let object = Game.getObjectById(id);\r\n        if (!object) { return \"that is not a valid game object or not in vision\"; }\r\n        this.flag.room.memory.controllerBatteryId = id;\r\n        this.flag.room.memory.upgraderPositions = undefined;\r\n        return \"controller battery assigned to\" + object;\r\n    }\r\n\r\n    protected findOperationWaypoints() {\r\n        this.waypoints = [];\r\n        for (let i = 0; i < 100; i++) {\r\n            let flag = Game.flags[this.name + \"_waypoints_\" + i];\r\n            if (flag) {\r\n                this.waypoints.push(flag);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    setMax(missionName: string, max: number) {\r\n        if (!this.memory[missionName]) return \"SPAWN: no \" + missionName + \" mission in \" + this.name;\r\n        let oldValue = this.memory[missionName].max;\r\n        this.memory[missionName].max = max;\r\n        return \"SPAWN: \" + missionName + \" max spawn value changed from \" + oldValue + \" to \" + max;\r\n    }\r\n\r\n    setBoost(missionName: string, activateBoost: boolean) {\r\n        if (!this.memory[missionName]) return \"SPAWN: no \" + missionName + \" mission in \" + this.name;\r\n        let oldValue = this.memory[missionName].activateBoost;\r\n        this.memory[missionName].activateBoost = activateBoost;\r\n        return \"SPAWN: \" + missionName + \" boost value changed from \" + oldValue + \" to \" + activateBoost;\r\n    }\r\n}\r\n","// these are the constants that govern your energy balance\r\n// rooms below this will try to pull energy...\r\nexport const NEED_ENERGY_THRESHOLD = 200000;\r\n// ...from rooms above this.\r\nexport const SUPPLY_ENERGY_THRESHOLD = 250000;\r\n// rooms above this will start processing power\r\nexport const POWER_PROCESS_THRESHOLD = 350000;\r\n// rooms above this will spawn a more powerful wall-builder to try to sink energy that way\r\nexport const ENERGYSINK_THRESHOLD = 450000;\r\nexport const RESERVE_AMOUNT = 5000;\r\nexport const SURPLUS_AMOUNT = 10000;\r\nexport const TRADE_DISTANCE = 6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const DESTINATION_REACHED = -1201;\r\nexport const CACHE_INVALIDATION_FREQUENCY = 1000;\r\nexport const CACHE_INVALIDATION_PERIOD = 10;\r\nexport const MAX_HARVEST_DISTANCE = 2;\r\nexport const MAX_HARVEST_PATH = 165;\r\n\r\nexport const PRIORITY_BUILD: string[] = [\r\n    STRUCTURE_SPAWN,\r\n    STRUCTURE_TOWER,\r\n    STRUCTURE_EXTENSION,\r\n    STRUCTURE_ROAD,\r\n    STRUCTURE_CONTAINER,\r\n    STRUCTURE_LINK,\r\n    STRUCTURE_STORAGE\r\n];\r\nexport const LOADAMOUNT_MINERAL = Math.ceil(33 / 6);\r\n\r\nexport const USERNAME = _.first(_.toArray(Game.structures)).owner.username;\r\n\r\nexport enum OperationPriority { Emergency, OwnedRoom, VeryHigh, High, Medium, Low, VeryLow }\r\nexport enum Direction { North = 1, NorthEast = 2, East = 3, SouthEast = 4, South = 5, SouthWest = 6, West = 7, NorthWest = 8 }\r\nexport const IGOR_CAPACITY = 1000;\r\n\r\nexport const MINERAL_STORAGE_TARGET = {\r\n    H: 150000,\r\n    O: 150000,\r\n    K: 100000,\r\n    Z: 100000,\r\n    U: 100000,\r\n    L: 100000,\r\n    X: 140000,\r\n};\r\n\r\nexport const REAGENT_LIST = {\r\n    KO: [\"K\", \"O\"],\r\n    UH: [\"U\", \"H\"],\r\n    UO: [\"U\", \"O\"],\r\n    OH: [\"O\", \"H\"],\r\n    LO: [\"L\", \"O\"],\r\n    LH: [\"L\", \"H\"],\r\n    ZO: [\"Z\", \"O\"],\r\n    ZH: [\"Z\", \"H\"],\r\n    ZK: [\"Z\", \"K\"],\r\n    UL: [\"U\", \"L\"],\r\n    G: [\"ZK\", \"UL\"],\r\n    GH: [\"G\", \"H\"],\r\n    GO: [\"G\", \"O\"],\r\n    UH2O: [\"UH\", \"OH\"],\r\n    UHO2: [\"UO\", \"OH\"],\r\n    GH2O: [\"GH\", \"OH\"],\r\n    GHO2: [\"GO\", \"OH\"],\r\n    LHO2: [\"LO\", \"OH\"],\r\n    LH2O: [\"LH\", \"OH\"],\r\n    ZHO2: [\"ZO\", \"OH\"],\r\n    ZH2O: [\"ZH\", \"OH\"],\r\n    KHO2: [\"KO\", \"OH\"],\r\n    XUH2O: [\"X\", \"UH2O\"],\r\n    XUHO2: [\"X\", \"UHO2\"],\r\n    XGH2O: [\"X\", \"GH2O\"],\r\n    XGHO2: [\"X\", \"GHO2\"],\r\n    XLHO2: [\"X\", \"LHO2\"],\r\n    XLH2O: [\"X\", \"LH2O\"],\r\n    XZHO2: [\"ZHO2\", \"X\"],\r\n    XZH2O: [\"ZH2O\", \"X\"],\r\n    XKHO2: [\"KHO2\", \"X\"]\r\n};\r\n\r\nexport const OPERATION_NAMES = [\r\n    \"domo\", \"boca\", \"lima\", \"root\", \"lima\", \"gato\", \"fret\", \"thad\", \"colo\", \"pony\",\r\n    \"moon\", \"oslo\", \"pita\", \"gaol\", \"snek\", \"kiev\", \"bonn\", \"dili\", \"cali\", \"nuuk\",\r\n    \"suva\", \"lome\", \"bern\", \"mija\", \"mano\", \"casa\", \"flor\", \"baja\", \"jefe\", \"flux\",\r\n    \"jeux\", \"cozy\", \"lupe\", \"hazy\", \"jugs\", \"quip\", \"jibs\", \"quay\", \"zany\", \"mojo\",\r\n    \"zarf\", \"expo\", \"mump\", \"huck\", \"prex\", \"djin\", \"hymn\", \"club\", \"whap\", \"chic\"\r\n];\r\n","import {Mission} from \"./Mission\";\r\nimport {IGOR_CAPACITY} from \"../../config/constants\";\r\nimport {helper} from \"../../helpers/helper\";\r\nimport {TravelToOptions, Traveler, TravelData} from \"../Traveler\";\r\nimport {empire} from \"../../helpers/loopHelper\";\r\nimport {ROOMTYPE_SOURCEKEEPER, WorldMap} from \"../WorldMap\";\r\nimport {FleeData} from \"../../interfaces\";\r\nimport {notifier} from \"../../notifier\";\r\n\r\nexport class Agent {\r\n\r\n    public creep: Creep;\r\n    public mission: Mission;\r\n    public room: Room;\r\n    public missionRoom: Room;\r\n    public outcome: number;\r\n    public carry: StoreDefinition;\r\n    public carryCapacity: number;\r\n    public hits: number;\r\n    public hitsMax: number;\r\n    public pos: RoomPosition;\r\n    public ticksToLive: number;\r\n    public name: string;\r\n    public id: string;\r\n    public fatigue: number;\r\n    public spawning: boolean;\r\n    public memory: any;\r\n\r\n    constructor(creep: Creep, mission: Mission) {\r\n        this.creep = creep;\r\n        this.mission = mission;\r\n        this.room = creep.room;\r\n        this.missionRoom = mission.room;\r\n        this.memory = creep.memory;\r\n        this.pos = creep.pos;\r\n        this.carry = creep.carry;\r\n        this.carryCapacity = creep.carryCapacity;\r\n        this.hits = creep.hits;\r\n        this.hitsMax = creep.hitsMax;\r\n        this.ticksToLive = creep.ticksToLive;\r\n        this.name = creep.name;\r\n        this.id = creep.id;\r\n        this.fatigue = creep.fatigue;\r\n        this.spawning = creep.spawning;\r\n    }\r\n\r\n    public attack(target: Creep|Structure): number { return this.creep.attack(target); }\r\n    public attackController(controller: StructureController): number { return this.creep.attackController(controller); }\r\n    public build(target: ConstructionSite): number { return this.creep.build(target); }\r\n    public claimController(controller: StructureController): number { return this.creep.claimController(controller); }\r\n    public dismantle(target: Structure): number { return this.creep.dismantle(target); }\r\n    public drop(resourceType: string, amount?: number): number { return this.creep.drop(resourceType, amount); }\r\n    public getActiveBodyparts(type: string): number { return this.creep.getActiveBodyparts(type); }\r\n    public harvest(source: Source|Mineral): number { return this.creep.harvest(source); }\r\n    public move(direction: number): number { return this.creep.move(direction); }\r\n    public pickup(resource: Resource): number { return this.creep.pickup(resource); }\r\n    public rangedAttack(target: Creep|Structure): number { return this.creep.rangedAttack(target); }\r\n    public rangedMassAttack(): number { return this.creep.rangedMassAttack(); }\r\n    public repair(target: Structure): number { return this.creep.repair(target); }\r\n    public reserveController(controller: StructureController): number { return this.creep.reserveController(controller); }\r\n    public say(message: string, pub?: boolean): number { return this.creep.say(message, pub); }\r\n    public suicide(): number { return this.creep.suicide(); }\r\n    public upgradeController(controller: StructureController): number { return this.creep.upgradeController(controller); }\r\n    public heal(target: Creep|Agent): number {\r\n        if (target instanceof Agent) {\r\n            return this.creep.heal(target.creep);\r\n        } else {\r\n            return this.creep.heal(target);\r\n        }\r\n    }\r\n    public rangedHeal(target: Creep|Agent): number {\r\n        if (target instanceof Agent) {\r\n            return this.creep.rangedHeal(target.creep);\r\n        } else {\r\n            return this.creep.rangedHeal(target);\r\n        }\r\n    }\r\n    public transfer(target: Creep|Structure, resourceType: string, amount?: number): number {\r\n        return this.creep.transfer(target, resourceType, amount); }\r\n    public withdraw(target: Creep|Structure, resourceType: string, amount?: number): number {\r\n        if (target instanceof Creep) { return target.transfer(this.creep, resourceType, amount); }\r\n        else { return this.creep.withdraw(target, resourceType, amount); }\r\n    }\r\n    public partCount(partType: string) { return this.partCount(partType);}\r\n\r\n    public travelTo(destination: {pos: RoomPosition} | RoomPosition, options?: TravelToOptions): number {\r\n        if (destination instanceof RoomPosition) { destination = {pos: destination}; }\r\n        return empire.traveler.travelTo(this.creep, destination, options);\r\n    }\r\n\r\n    public isFull(margin = 0): boolean {\r\n        return _.sum(this.carry) >= this.carryCapacity - margin;\r\n    }\r\n\r\n    travelToAndBuild(site: ConstructionSite): number {\r\n        this.idleNear(site);\r\n        return this.build(site);\r\n    }\r\n\r\n    retrieve(target: Creep|Structure, resourceType: string, options?: TravelToOptions, amount?: number): number {\r\n        if (this.pos.isNearTo(target)) {\r\n            this.withdraw(target, resourceType, amount);\r\n        }\r\n        else {\r\n            this.travelTo(target, options);\r\n            return ERR_NOT_IN_RANGE;\r\n        }\r\n    }\r\n\r\n    deliver(target: Creep|Structure, resourceType: string, options?: TravelToOptions, amount?: number): number {\r\n        if (this.pos.isNearTo(target)) {\r\n            return this.transfer(target, resourceType, amount);\r\n        }\r\n        else {\r\n            this.travelTo(target, options);\r\n            return ERR_NOT_IN_RANGE;\r\n        }\r\n    }\r\n\r\n    hasLoad(): boolean {\r\n        if (this.carryCapacity === 0) return false;\r\n\r\n        if (this.memory.hasLoad && _.sum(this.carry) === 0) {\r\n            this.memory.hasLoad = false;\r\n        } else if (!this.memory.hasLoad && _.sum(this.carry) === this.carryCapacity) {\r\n            this.memory.hasLoad = true;\r\n        }\r\n        return this.memory.hasLoad;\r\n    }\r\n\r\n    /**\r\n     * Can be used to keep idling creeps out of the way, like when a road repairer doesn't have any roads needing repair\r\n     * or a spawn refiller who currently has full extensions.\r\n     * @param anchor\r\n     * @param maintainDistance\r\n     * @returns {any}\r\n     */\r\n    public idleOffRoad(anchor: {pos: RoomPosition} = this.mission.flag, maintainDistance = false): number {\r\n        let offRoad = this.pos.lookForStructure(STRUCTURE_ROAD) === undefined;\r\n        if (offRoad) return OK;\r\n\r\n        let positions = _.sortBy(this.pos.openAdjacentSpots(), (p: RoomPosition) => p.getRangeTo(anchor));\r\n        if (maintainDistance) {\r\n            let currentRange = this.pos.getRangeTo(anchor);\r\n            positions = _.filter(positions, (p: RoomPosition) => p.getRangeTo(anchor) <= currentRange);\r\n        }\r\n\r\n        let swampPosition;\r\n        for (let position of positions) {\r\n            if (position.lookForStructure(STRUCTURE_ROAD)) continue;\r\n            let terrain = position.lookFor(LOOK_TERRAIN)[0] as string;\r\n            if (terrain === \"swamp\") {\r\n                swampPosition = position;\r\n            }\r\n            else {\r\n                return this.move(this.pos.getDirectionTo(position));\r\n            }\r\n        }\r\n\r\n        if (swampPosition) {\r\n            return this.move(this.pos.getDirectionTo(swampPosition));\r\n        }\r\n\r\n        return this.travelTo(anchor) as number;\r\n    }\r\n\r\n    public stealNearby(stealSource: string): number {\r\n        if (stealSource === \"creep\") {\r\n            let creep = _(this.pos.findInRange<Creep>(FIND_MY_CREEPS, 1))\r\n                .filter((c: Creep) => c.getActiveBodyparts(WORK) === 0 && c.carry.energy > 0)\r\n                .head();\r\n            if (!creep) { return ERR_NOT_IN_RANGE; }\r\n            return creep.transfer(this.creep, RESOURCE_ENERGY);\r\n        }\r\n        else {\r\n            let structure = _(this.pos.findInRange<Structure>(this.creep.room.findStructures<Structure>(stealSource), 1))\r\n                .filter((s: {energy: number}) => s.energy > 0)\r\n                .head();\r\n            if (!structure) { return ERR_NOT_IN_RANGE; }\r\n            return this.withdraw(structure, RESOURCE_ENERGY);\r\n        }\r\n    }\r\n\r\n    public idleNear(place: {pos: RoomPosition}, acceptableRange = 1, cachePos = false, allowSwamp = true): number {\r\n        let range = this.pos.getRangeTo(place);\r\n        if (range <= acceptableRange && !this.pos.lookForStructure(STRUCTURE_ROAD)) {\r\n            return;\r\n        }\r\n\r\n        if (range <= acceptableRange + 1) {\r\n            let swampDirection;\r\n            // find movement options\r\n            let direction = this.creep.pos.getDirectionTo(place);\r\n            for (let i = -2; i <= 2; i++) {\r\n                let relDirection = direction + i;\r\n                relDirection = helper.clampDirection(relDirection);\r\n                let position = this.creep.pos.getPositionAtDirection(relDirection);\r\n                if (!position.inRangeTo(place, acceptableRange)) continue;\r\n                if (position.lookForStructure(STRUCTURE_ROAD)) continue;\r\n                if (!position.isPassible()) continue;\r\n                if (position.isNearExit(0)) continue;\r\n                if (position.lookFor(LOOK_TERRAIN)[0] === \"swamp\") {\r\n                    swampDirection = relDirection;\r\n                    continue;\r\n                }\r\n                return this.creep.move(relDirection);\r\n            }\r\n            if (swampDirection && allowSwamp) {\r\n                return this.creep.move(swampDirection);\r\n            }\r\n        }\r\n\r\n        if (cachePos) {\r\n            return this.travelTo(this.cacheIdlePosition(place, acceptableRange)) as number;\r\n        }\r\n\r\n        if (range <= 1) {\r\n            let position = this.findIdlePosition(place, acceptableRange);\r\n            if (!position) { return; }\r\n            return this.travelTo({pos: position}) as number;\r\n        }\r\n\r\n        return this.travelTo(place) as number;\r\n    }\r\n\r\n    private cacheIdlePosition(place: {pos: RoomPosition}, acceptableRange: number): RoomPosition {\r\n        if (this.memory.idlePosition) {\r\n            let position = helper.deserializeRoomPosition(this.memory.idlePosition);\r\n            let range = position.getRangeTo(place);\r\n            if (range === 0) {\r\n                return position;\r\n            }\r\n            if (range <= acceptableRange && position.isPassible()) {\r\n                return position;\r\n            }\r\n            else {\r\n                this.memory.idlePosition = undefined;\r\n                return this.cacheIdlePosition(place, acceptableRange);\r\n            }\r\n        } else {\r\n            let position = this.findIdlePosition(place, acceptableRange);\r\n            if (position) {\r\n                this.memory.idlePosition = position;\r\n                return position;\r\n            } else {\r\n                this.memory.idlePosition = place.pos;\r\n                console.log(`AGENT: no idlepos within range ${acceptableRange} near ${place.pos}`);\r\n                return place.pos;\r\n            }\r\n        }\r\n    }\r\n\r\n    private findIdlePosition(place: {pos: RoomPosition}, acceptableRange: number): RoomPosition {\r\n        let radius = 0;\r\n        let validPositions = [];\r\n        while (radius <= acceptableRange) {\r\n            for (let xDelta = -radius; xDelta <= radius; xDelta++) {\r\n                for (let yDelta = -radius; yDelta <= radius; yDelta++) {\r\n                    if (Math.abs(xDelta) < radius && Math.abs(yDelta) < radius) { continue; }\r\n                    let x = place.pos.x + xDelta;\r\n                    let y = place.pos.y + yDelta;\r\n                    let position = new RoomPosition(x, y, place.pos.roomName);\r\n                    if (!position.isPassible()) { continue; }\r\n                    if (position.isNearExit(0)) { continue; }\r\n                    if (position.lookForStructure(STRUCTURE_ROAD)) { continue; }\r\n                    validPositions.push(position);\r\n                }\r\n            }\r\n            radius++;\r\n        }\r\n        return this.pos.findClosestByRange(validPositions);\r\n    }\r\n\r\n    isNearTo(place: {pos: RoomPosition} | RoomPosition) {\r\n        return this.pos.isNearTo(place);\r\n    }\r\n\r\n    seekBoost(boosts: string[], allowUnboosted: boolean) {\r\n        if (!boosts) return true;\r\n        if (this.room.findStructures(STRUCTURE_LAB).length === 0) return true;\r\n        if (this.room.controller.level < 6) return true;\r\n\r\n        let boosted = true;\r\n        for (let boost of boosts) {\r\n            if (this.memory[boost]) continue;\r\n\r\n            let requests = this.room.memory.boostRequests;\r\n            if (!requests) {\r\n                this.memory[boost] = true;\r\n                continue;\r\n            }\r\n            if (!requests[boost]) {\r\n                requests[boost] = { flagName: undefined, requesterIds: [] };\r\n            }\r\n\r\n            // check if already boosted\r\n            let boostedPart = _.find(this.creep.body, {boost: boost});\r\n            if (boostedPart) {\r\n                this.memory[boost] = true;\r\n                requests[boost].requesterIds = _.pull(requests[boost].requesterIds, this.creep.id);\r\n                continue;\r\n            }\r\n\r\n            boosted = false;\r\n\r\n            if (!_.includes(requests[boost].requesterIds, this.creep.id)) {\r\n                requests[boost].requesterIds.push(this.creep.id);\r\n            }\r\n\r\n            if (this.creep.spawning) continue;\r\n\r\n            let flag = Game.flags[requests[boost].flagName];\r\n            if (!flag) continue;\r\n\r\n            let lab = flag.pos.lookForStructure(STRUCTURE_LAB) as StructureLab;\r\n\r\n            if (lab.mineralType === boost && lab.mineralAmount >= IGOR_CAPACITY && lab.energy >= IGOR_CAPACITY) {\r\n                if (this.pos.isNearTo(lab)) {\r\n                    lab.boostCreep(this.creep);\r\n                }\r\n                else {\r\n                    this.travelTo(lab);\r\n                    return false;\r\n                }\r\n            }\r\n            else if (allowUnboosted) {\r\n                console.log(\"BOOST: no boost for\", this.creep.name, \" so moving on (allowUnboosted = true)\");\r\n                requests[boost].requesterIds = _.pull(requests[boost].requesterIds, this.creep.id);\r\n                this.memory[boost] = true;\r\n            }\r\n            else {\r\n                if (Game.time % 10 === 0) console.log(\"BOOST: no boost for\", this.creep.name,\r\n                    \" it will wait for some boost (allowUnboosted = false)\");\r\n                this.idleOffRoad(this.missionRoom.storage);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return boosted;\r\n    }\r\n\r\n    avoidSK(destination: Flag): number {\r\n        let costCall = (roomName: string, matrix: CostMatrix): CostMatrix | boolean => {\r\n            if (roomName !== this.pos.roomName) return;\r\n            let room = Game.rooms[this.pos.roomName];\r\n            let sourceKeepers = _.filter(room.hostiles, (c: Creep) => c.owner.username === \"Source Keeper\");\r\n            for (let sourceKeeper of sourceKeepers) {\r\n                const SAFE_RANGE = 4;\r\n                if (this.pos.getRangeTo(sourceKeeper) < SAFE_RANGE) continue;\r\n                for (let xDelta = -SAFE_RANGE; xDelta <= SAFE_RANGE; xDelta++) {\r\n                    for (let yDelta = -SAFE_RANGE; yDelta <= SAFE_RANGE; yDelta++) {\r\n                        matrix.set(sourceKeeper.pos.x + xDelta, sourceKeeper.pos.y + yDelta, 0xff);\r\n                    }\r\n                }\r\n            }\r\n            return matrix;\r\n        };\r\n\r\n        let options: TravelToOptions = {};\r\n        if (this.room.roomType === ROOMTYPE_SOURCEKEEPER) {\r\n            options.roomCallback = costCall;\r\n            let hostileCount = this.creep.room.hostiles.length;\r\n            if (!this.memory.hostileCount) this.memory.hostileCount = 0;\r\n            if (hostileCount > this.memory.hostileCount) {\r\n                this.resetTravelPath();\r\n            }\r\n            this.memory.hostileCount = hostileCount;\r\n        }\r\n\r\n        return this.travelTo(destination, options) as number;\r\n    }\r\n\r\n    resetTravelPath() {\r\n        if (!this.memory._travel) return;\r\n        delete this.memory._travel.path;\r\n    }\r\n\r\n    resetPrep() {\r\n        this.memory.prep = false;\r\n    }\r\n\r\n    fleeHostiles(): boolean {\r\n        return this.fleeByPath(this.room.fleeObjects, 6, 2, false);\r\n    }\r\n\r\n    fleeByPath(fleeObjects: {pos: RoomPosition}[], fleeRange: number, fleeDelay: number, confineToRoom = false): boolean {\r\n\r\n        let closest = this.pos.findClosestByRange(fleeObjects);\r\n        let rangeToClosest = 50;\r\n        if (closest) { rangeToClosest = this.pos.getRangeTo(closest); }\r\n\r\n        if (rangeToClosest > fleeRange) {\r\n            if (!this.memory._flee) {\r\n                return false; // where most creeps exit function\r\n            }\r\n\r\n            let fleeData = this.memory._flee;\r\n\r\n            if (this.pos.isNearExit(0)) {\r\n                this.moveOffExit();\r\n                return true;\r\n            }\r\n\r\n            if (fleeData.delay <= 0) {\r\n                delete this.memory._flee;\r\n                return false; // safe to resume\r\n            }\r\n            fleeData.delay--;\r\n\r\n            return true;\r\n        }\r\n\r\n        if (this.fatigue > 0) {\r\n            if (closest instanceof Creep) {\r\n                let moveCount = this.getActiveBodyparts(MOVE);\r\n                let dropAmount = this.carry.energy - (moveCount * CARRY_CAPACITY);\r\n                this.drop(RESOURCE_ENERGY, dropAmount);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        if (!this.memory._flee) { this.memory._flee = {} as FleeData; }\r\n\r\n        let fleeData = this.memory._flee as FleeData;\r\n        fleeData.delay = fleeDelay;\r\n\r\n        if (fleeData.nextPos) {\r\n            let position = helper.deserializeRoomPosition(fleeData.nextPos);\r\n            if (this.arrivedAtPosition(position)) {\r\n                fleeData.path = fleeData.path.substr(1);\r\n            } else {\r\n                fleeData.path = undefined;\r\n            }\r\n        }\r\n\r\n        if (fleeData.path) {\r\n            if (fleeData.path.length > 0) {\r\n                let nextDirection = parseInt(fleeData.path[0], 10);\r\n                let position = this.pos.getPositionAtDirection(nextDirection);\r\n                if (!position.isNearExit(0) &&\r\n                    position.findClosestByRange(fleeObjects).pos.getRangeTo(position) < rangeToClosest) {\r\n                    fleeData.path = undefined;\r\n                } else {\r\n                    this.move(nextDirection);\r\n                    fleeData.nextPos = position;\r\n                    return true;\r\n                }\r\n            } else {\r\n                fleeData.path = undefined;\r\n            }\r\n        }\r\n\r\n        if (!fleeData.path) {\r\n            let avoidance = _.map(fleeObjects, obj => { return {pos: obj.pos, range: 10 }; });\r\n\r\n            let ret = PathFinder.search(this.pos, avoidance, {\r\n                flee: true,\r\n                maxRooms: confineToRoom ? 1 : undefined,\r\n                roomCallback: (roomName: string): CostMatrix|boolean => {\r\n                    if (Traveler.checkOccupied(roomName)) { return false; }\r\n                    if (roomName === this.room.name) { return empire.traveler.getCreepMatrix(this.room); }\r\n                    if (Game.rooms[roomName]) { return empire.traveler.getStructureMatrix(Game.rooms[roomName]); }\r\n                }\r\n            });\r\n\r\n            if (ret.path.length === 0) { return true; }\r\n\r\n            fleeData.path = Traveler.serializePath(this.pos, ret.path);\r\n        }\r\n\r\n        let nextDirection = parseInt(fleeData.path[0], 10);\r\n        fleeData.nextPos = this.pos.getPositionAtDirection(nextDirection);\r\n        this.move(nextDirection);\r\n        return true;\r\n    }\r\n\r\n    retreat(avoidObjects?: {pos: RoomPosition}[], fleeRange = 5): number {\r\n        if (!avoidObjects) {\r\n            avoidObjects = this.room.fleeObjects;\r\n        }\r\n\r\n        let avoidance = _.map(this.pos.findInRange(avoidObjects, fleeRange + 1),\r\n            (c: Creep) => { return {pos: c.pos, range: 20 }; });\r\n\r\n\r\n        let ret = PathFinder.search(this.pos, avoidance, {\r\n            flee: true,\r\n            roomCallback: (roomName: string): CostMatrix|boolean => {\r\n                if (Traveler.checkOccupied(roomName)) { return false; }\r\n                if (roomName === this.room.name) { return empire.traveler.getCreepMatrix(this.room); }\r\n                if (Game.rooms[roomName]) { return empire.traveler.getStructureMatrix(Game.rooms[roomName]); }\r\n            }\r\n        });\r\n\r\n        if (ret.path.length > 0) {\r\n            return this.creep.move(this.pos.getDirectionTo(ret.path[0]));\r\n        } else {\r\n            return OK;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves a creep to a position using creep.blindMoveTo(position), when at range === 1 will remove any occuping creep\r\n     * @param position\r\n     * @param name - if given, will suicide the occupying creep if string occurs anywhere in name (allows easy role replacement)\r\n     * and will transfer any resources in creeps' carry\r\n     * @param lethal - will suicide the occupying creep\r\n     * @returns {number}\r\n     */\r\n    moveItOrLoseIt(position: RoomPosition, name?: string, lethal = true): number {\r\n        if (this.creep.fatigue > 0) { return OK; }\r\n        let range = this.pos.getRangeTo(position);\r\n        if (range === 0) return OK;\r\n        if (range > 1) { return this.travelTo(position) as number; }\r\n\r\n        // take care of creep that might be in the way\r\n        let occupier = _.head(position.lookFor<Creep>(LOOK_CREEPS));\r\n        if (occupier && occupier.name) {\r\n            if (name && occupier.name.indexOf(name) >= 0) {\r\n                if (lethal) {\r\n                    for (let resourceType in occupier.carry) {\r\n                        let amount = occupier.carry[resourceType];\r\n                        if (amount > 0) {\r\n                            occupier.transfer(this.creep, resourceType);\r\n                        }\r\n                    }\r\n                    this.creep.say(\"my spot!\");\r\n                    occupier.suicide();\r\n                }\r\n            }\r\n            else {\r\n                let direction = occupier.pos.getDirectionTo(this);\r\n                occupier.move(direction);\r\n                this.creep.say(\"move it\");\r\n            }\r\n        }\r\n\r\n        // move\r\n        let direction = this.pos.getDirectionTo(position);\r\n        this.creep.move(direction);\r\n    }\r\n\r\n\r\n    /**\r\n     * another function for keeping roads clear, this one is more useful for builders and road repairers that are\r\n     * currently working, will move off road without going out of range of target\r\n     * @param target - target for which you do not want to move out of range\r\n     * @param allowSwamps\r\n     * @returns {number}\r\n     */\r\n    public yieldRoad(target: {pos: RoomPosition}, allowSwamps = true): number  {\r\n        let isOffRoad = this.pos.lookForStructure(STRUCTURE_ROAD) === undefined;\r\n        if (isOffRoad) return OK;\r\n\r\n        let swampPosition;\r\n        // find movement options\r\n        let direction = this.pos.getDirectionTo(target);\r\n        for (let i = -2; i <= 2; i++) {\r\n            let relDirection = direction + i;\r\n            relDirection = helper.clampDirection(relDirection);\r\n            let position = this.pos.getPositionAtDirection(relDirection);\r\n            if (!position.inRangeTo(target, 3)) continue;\r\n            if (position.lookFor(LOOK_STRUCTURES).length > 0) continue;\r\n            if (!position.isPassible()) continue;\r\n            if (position.isNearExit(0)) continue;\r\n            if (position.lookFor(LOOK_TERRAIN)[0] === \"swamp\") {\r\n                swampPosition = position;\r\n                continue;\r\n            }\r\n            return this.move(relDirection);\r\n        }\r\n        if (swampPosition && allowSwamps) {\r\n            return this.move(this.pos.getDirectionTo(swampPosition));\r\n        }\r\n        return this.travelTo(target);\r\n    };\r\n\r\n    /**\r\n     * Only withdraw from a store-holder if there is enough resource to transfer (or if holder is full), cpu-efficiency effort\r\n     * @param target\r\n     * @param resourceType\r\n     * @returns {number}\r\n     */\r\n    withdrawIfFull(target: Creep|StructureContainer|StructureStorage|StructureTerminal, resourceType: string): number {\r\n        if (!this.pos.isNearTo(target)) {\r\n            return ERR_NOT_IN_RANGE;\r\n        }\r\n\r\n        let norm = Agent.normalizeStore(target);\r\n        let storageAvailable = this.carryCapacity - _.sum(this.carry);\r\n        let targetStorageAvailable = norm.storeCapacity - _.sum(norm.store);\r\n        if (norm.store[resourceType] >= storageAvailable || targetStorageAvailable === 0) {\r\n            return this.withdraw(target, resourceType);\r\n        }\r\n        else {\r\n            return ERR_NOT_ENOUGH_RESOURCES;\r\n        }\r\n    };\r\n\r\n    public static normalizeStore(target: Creep|StructureContainer|StructureStorage|StructureTerminal):\r\n    { store: StoreDefinition, storeCapacity: number } {\r\n        let store;\r\n        let storeCapacity;\r\n        if (target instanceof Creep) {\r\n            store = target.carry;\r\n            storeCapacity = target.carryCapacity;\r\n        }\r\n        else {\r\n            store = target.store;\r\n            storeCapacity = target.storeCapacity;\r\n        }\r\n        return {store: store, storeCapacity: storeCapacity };\r\n    }\r\n\r\n    withdrawEverything(target: Creep|StructureContainer|StructureStorage|StructureTerminal): number {\r\n        let norm = Agent.normalizeStore(target);\r\n        for (let resourceType in norm.store) {\r\n            let amount = norm.store[resourceType];\r\n            if (amount > 0) {\r\n                return this.withdraw(target, resourceType);\r\n            }\r\n        }\r\n        return ERR_NOT_ENOUGH_RESOURCES;\r\n    };\r\n\r\n    transferEverything(target: Creep|StructureContainer|StructureStorage|StructureTerminal): number {\r\n        for (let resourceType in this.carry) {\r\n            let amount = this.carry[resourceType];\r\n            if (amount > 0) {\r\n                return this.transfer(target, resourceType);\r\n            }\r\n        }\r\n        return ERR_NOT_ENOUGH_RESOURCES;\r\n    };\r\n\r\n    /**\r\n     * Find a structure, cache, and invalidate cache based on the functions provided\r\n     * @param findStructure\r\n     * @param forget\r\n     * @param immediate\r\n     * @param prop\r\n     * @returns {Structure}\r\n     */\r\n\r\n    rememberStructure(findStructure: () => Structure, forget: (structure: Structure) => boolean,\r\n                                 prop = \"remStructureId\", immediate = false): Structure {\r\n        if (this.memory[prop]) {\r\n            let structure = Game.getObjectById(this.memory[prop]) as Structure;\r\n            if (structure && !forget(structure)) {\r\n                return structure;\r\n            }\r\n            else {\r\n                this.memory[prop] = undefined;\r\n                return this.rememberStructure(findStructure, forget, prop, true);\r\n            }\r\n        }\r\n        else if (Game.time % 10 === 0 || immediate) {\r\n            let object = findStructure();\r\n            if (object) {\r\n                this.memory[prop] = object.id;\r\n                return object;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Find a creep, cache, and invalidate cache based on the functions provided\r\n     * @param findCreep\r\n     * @param forget\r\n     * @returns {Structure}\r\n     */\r\n\r\n    rememberCreep(findCreep: () => Creep, forget: (creep: Creep) => boolean): Creep {\r\n        if (this.memory.remCreepId) {\r\n            let creep = Game.getObjectById(this.memory.remCreepId) as Creep;\r\n            if (creep && !forget(creep)) {\r\n                return creep;\r\n            }\r\n            else {\r\n                this.memory.remCreepId = undefined;\r\n                return this.rememberCreep(findCreep, forget);\r\n            }\r\n        }\r\n        else {\r\n            let object = findCreep();\r\n            if (object) {\r\n                this.memory.remCreepId = object.id;\r\n                return object;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Find the nearest energy source with greater than 50 energy, cache with creep memory;\r\n     * @returns {Creep | StructureContainer}\r\n     */\r\n    rememberBattery(): Creep | StructureContainer {\r\n        if (this.memory.batteryId) {\r\n            let battery = Game.getObjectById(this.memory.batteryId) as Creep | StructureContainer;\r\n            if (battery && Agent.normalizeStore(battery).store.energy >= 50) {\r\n                return battery;\r\n            }\r\n            else {\r\n                this.memory.batteryId = undefined;\r\n                return this.rememberBattery();\r\n            }\r\n        }\r\n        else {\r\n            let battery = this.room.getAltBattery(this.creep);\r\n            if (battery) {\r\n                this.memory.batteryId = battery.id;\r\n                return battery;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Pass in position of recycle bin (aka container next to spawn) and will creep go recycle itself there\r\n     * @param container\r\n     */\r\n\r\n    recycleSelf(container: StructureContainer) {\r\n\r\n        if (!container) {\r\n            console.log(this.name, \" needs a container to recycle self\");\r\n            return;\r\n        }\r\n\r\n        let binTooFull = (this.ticksToLive + _.sum(container.store)) > container.storeCapacity;\r\n        if (binTooFull) {\r\n            console.log(this.name, \" is waiting for space in recycle bin in \", this.pos.roomName);\r\n            return;\r\n        }\r\n\r\n        if (!this.pos.isEqualTo(container.pos)) {\r\n            this.travelTo(container, { range: 0 });\r\n            console.log(this.name, \" is heading to recycle bin\");\r\n            return;\r\n        }\r\n\r\n        let spawn = this.pos.findClosestByRange(FIND_MY_SPAWNS) as StructureSpawn;\r\n        if (!spawn) {\r\n            console.log(\"recycleBin is missing spawn in\", this.room.name);\r\n            return;\r\n        }\r\n\r\n        let recycleOutcome = spawn.recycleCreep(this.creep);\r\n        if (recycleOutcome === OK) {\r\n            console.log(this.pos.roomName, \" recycled creep \", this.name);\r\n        }\r\n        else if (recycleOutcome === -9) {\r\n            console.log(this.name, \" is moving to recycle bin at \", container.pos);\r\n            this.travelTo(container, { range: 0 });\r\n            return;\r\n        }\r\n        else {\r\n            console.log(this.room.name, \" recycling error: \", recycleOutcome);\r\n        }\r\n        return;\r\n    };\r\n\r\n    /**\r\n     * General-purpose energy getting, will look for an energy source in the same missionRoom as the operation flag (not creep)\r\n     * @param creep\r\n     * @param nextDestination\r\n     * @param highPriority - allows you to withdraw energy before a battery reaches an optimal amount of energy, jumping\r\n     * ahead of any other creeps trying to get energy\r\n     * @param getFromSource\r\n     */\r\n\r\n    public procureEnergy(nextDestination?: {pos: RoomPosition}, highPriority = false, getFromSource = false) {\r\n        let battery = this.getBattery();\r\n\r\n        if (battery) {\r\n            if (this.pos.isNearTo(battery)) {\r\n                let outcome;\r\n                if (highPriority) {\r\n                    if (Agent.normalizeStore(battery).store.energy >= 50) {\r\n                        outcome = this.withdraw(battery, RESOURCE_ENERGY);\r\n                    }\r\n                }\r\n                else {\r\n                    outcome = this.withdrawIfFull(battery, RESOURCE_ENERGY);\r\n                }\r\n                if (outcome === OK) {\r\n                    this.memory.batteryId = undefined;\r\n                    if (nextDestination) {\r\n                        this.travelTo(nextDestination);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this.travelTo(battery);\r\n            }\r\n        }\r\n        else {\r\n            if (getFromSource) {\r\n                let closest = this.pos.findClosestByRange<Source>(this.mission.sources);\r\n                if (closest) {\r\n                    if (this.pos.isNearTo(closest)) {\r\n                        this.harvest(closest);\r\n                    }\r\n                    else {\r\n                        this.travelTo(closest);\r\n                    }\r\n                }\r\n                else {\r\n                    this.idleOffRoad();\r\n                }\r\n            }\r\n            else {\r\n                if (this.memory._travel && this.memory._travel.dest) {\r\n                    let destPos = this.memory._travel.dest;\r\n                    let dest = new RoomPosition(destPos.x, destPos.y, destPos.roomName);\r\n                    this.idleOffRoad({pos: dest}, true);\r\n                }\r\n                else {\r\n                    this.idleOffRoad();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public nextPositionInPath(): RoomPosition {\r\n        if (this.memory._travel && this.memory._travel.path && this.memory._travel.path.length > 0) {\r\n            let position = this.pos.getPositionAtDirection(parseInt(this.memory._travel.path[0], 10));\r\n            if (!position.isNearExit(0)) {\r\n                return position;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will return storage if it is available, otherwise will look for an alternative battery and cache it\r\n     * @param creep - return a battery relative to the missionRoom that the creep is currently in\r\n     * @returns {any}\r\n     */\r\n\r\n    public getBattery(): Creep|StructureContainer|StructureTerminal|StructureStorage {\r\n        let minEnergy = this.carryCapacity - this.carry.energy;\r\n        if (this.room.storage && this.room.storage.store.energy > minEnergy) {\r\n            return this.room.storage;\r\n        }\r\n\r\n        return this.rememberBattery();\r\n    }\r\n\r\n    public static squadTravel(leader: Agent, follower: Agent, target: {pos: RoomPosition},\r\n                              options?: TravelToOptions): number {\r\n\r\n        if (leader.room !== follower.room) {\r\n            if (leader.pos.isNearExit(0)) {\r\n                leader.travelTo(target);\r\n            }\r\n            follower.travelTo(leader);\r\n            return;\r\n        }\r\n\r\n        let range = leader.pos.getRangeTo(follower);\r\n        if (range > 1) {\r\n            follower.travelTo(leader);\r\n            // attacker stands still\r\n        } else if (follower.fatigue === 0) {\r\n            leader.travelTo(target, options);\r\n            follower.move(follower.pos.getDirectionTo(leader));\r\n        }\r\n    }\r\n\r\n    capacityAvailable(container: Creep|StructureContainer|StructureTerminal|StructureStorage) {\r\n        let norm = Agent.normalizeStore(container);\r\n        return _.sum(this.carry) <= norm.storeCapacity - _.sum(norm.store);\r\n    }\r\n\r\n    public standardHealing(agents: Agent[]): boolean {\r\n        let hurtAgents = _(this.pos.findInRange(agents, 3))\r\n            .filter(agent => agent.hits < agent.hitsMax)\r\n            .sortBy(agent => agent.hits - agent.hitsMax)\r\n            .value();\r\n        if (hurtAgents.length > 0) {\r\n\r\n            let healPotential = this.getActiveBodyparts(HEAL) * 12;\r\n            if (_.find(this.creep.body, part => part.boost)) { healPotential *= 4; }\r\n\r\n            let mostHurt = _.head(hurtAgents);\r\n            if (mostHurt.pos.isNearTo(this)) {\r\n                this.heal(mostHurt);\r\n                return true;\r\n            }\r\n\r\n            let nearbyAndHurt = _.filter(this.pos.findInRange(hurtAgents, 1),\r\n                agent => agent.hits < agent.hitsMax - healPotential);\r\n            if (nearbyAndHurt.length > 0) {\r\n                this.heal(_.head(nearbyAndHurt));\r\n                return true;\r\n            }\r\n\r\n            this.rangedHeal(_.head(hurtAgents));\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public standardRangedAttack(): Creep {\r\n        let hostilesInRange = _(this.pos.findInRange<Creep>(FIND_HOSTILE_CREEPS, 3))\r\n            .sortBy(creep => creep.hits - creep.hitsMax)\r\n            .value();\r\n        if (hostilesInRange.length > 0) {\r\n            if (hostilesInRange.length > 2 || this.pos.findClosestByRange(hostilesInRange).pos.isNearTo(this)) {\r\n                this.rangedMassAttack();\r\n                return hostilesInRange[0];\r\n            } else {\r\n                this.rangedAttack(hostilesInRange[0]);\r\n                return hostilesInRange[0];\r\n            }\r\n        }\r\n    }\r\n\r\n    public standardMelee(damageThreshold = 0): Creep {\r\n        if (this.hits < damageThreshold) { return; }\r\n        let hostilesInRange = _(this.pos.findInRange<Creep>(FIND_HOSTILE_CREEPS, 1))\r\n            .sortBy(creep => creep.hits - creep.hitsMax)\r\n            .value();\r\n        if (hostilesInRange.length > 0) {\r\n            this.attack(hostilesInRange[0]);\r\n            return hostilesInRange[0];\r\n        }\r\n    }\r\n\r\n    public moveOffExit(): number {\r\n        let swampDirection;\r\n        for (let direction = 1; direction < 8; direction++) {\r\n            let position = this.pos.getPositionAtDirection(direction);\r\n            if (position.isNearExit(0)) { continue; }\r\n            if (!position.isPassible()) { continue; }\r\n            let terrain = position.lookFor(LOOK_TERRAIN)[0];\r\n            if (terrain === \"swamp\") {\r\n                swampDirection = direction;\r\n                continue;\r\n            }\r\n            return this.move(direction);\r\n        }\r\n\r\n        if (swampDirection) {\r\n            return this.move(swampDirection);\r\n        }\r\n\r\n        return ERR_NO_PATH;\r\n    }\r\n\r\n    private arrivedAtPosition(position: RoomPosition) {\r\n        if (this.pos.getRangeTo(position) === 0) {\r\n            return true;\r\n        }\r\n\r\n        if (this.pos.isNearExit(0) && position.isNearExit(0)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public isStuck() {\r\n        return this.memory._travel && this.memory._travel.stuck >= 2\r\n    }\r\n\r\n    public pushyTravelTo(destination: {pos: RoomPosition}, exclusion?: string, options: TravelToOptions = {}) {\r\n        if (this.isStuck()) {\r\n            options.returnData = {nextPos: undefined };\r\n            this.travelTo(destination, options);\r\n            if (options.returnData.nextPos) {\r\n                let creep = options.returnData.nextPos.lookFor<Creep>(LOOK_CREEPS)[0];\r\n                if (creep && creep.my && (!exclusion || creep.name.indexOf(exclusion) < 0)) {\r\n                    notifier.log(`pushed creep ${creep.pos}`);\r\n                    this.say(\"excuse me\", true);\r\n                    creep.move(creep.pos.getDirectionTo(this));\r\n                }\r\n            }\r\n        } else {\r\n            this.travelTo(destination, options);\r\n        }\r\n    }\r\n}\r\n","import {Operation} from \"../operations/Operation\";\r\nimport {SpawnGroup} from \"../SpawnGroup\";\r\nimport {HeadCountOptions, TransportAnalysis} from \"../../interfaces\";\r\nimport {DESTINATION_REACHED, MAX_HARVEST_DISTANCE, MAX_HARVEST_PATH} from \"../../config/constants\";\r\nimport {helper} from \"../../helpers/helper\";\r\nimport {Agent} from \"./Agent\";\r\nimport {empire} from \"../../helpers/loopHelper\";\r\nimport {ROOMTYPE_SOURCEKEEPER, WorldMap, ROOMTYPE_ALLEY} from \"../WorldMap\";\r\nimport {Traveler} from \"../Traveler\";\r\nimport {RoomHelper} from \"../RoomHelper\";\r\nexport abstract class Mission {\r\n\r\n    flag: Flag;\r\n    memory: any;\r\n    spawnGroup: SpawnGroup;\r\n    sources: Source[];\r\n    room: Room;\r\n    name: string;\r\n    operation: Operation;\r\n    allowSpawn: boolean;\r\n    hasVision: boolean;\r\n    waypoints: Flag[];\r\n    partnerPairing: {[role: string]: Agent[]} = {};\r\n    distanceToSpawn: number;\r\n\r\n    constructor(operation: Operation, name: string, allowSpawn: boolean = true) {\r\n        this.name = name;\r\n        this.flag = operation.flag;\r\n        this.room = operation.room;\r\n        this.spawnGroup = operation.spawnGroup;\r\n        this.sources = operation.sources;\r\n        if (!operation.memory[name]) operation.memory[name] = {};\r\n        this.memory = operation.memory[name];\r\n        this.allowSpawn = allowSpawn;\r\n        this.operation = operation;\r\n        if (this.room) this.hasVision = true;\r\n        // initialize memory to be used by this mission\r\n        if (!this.memory.hc) this.memory.hc = {};\r\n        if (operation.waypoints && operation.waypoints.length > 0) {\r\n            this.waypoints = operation.waypoints;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Init Phase - Used to initialize values for the following phases\r\n     */\r\n    public abstract initMission();\r\n\r\n    /**\r\n     * RoleCall Phase - Used to find creeps and spawn any extra that are needed\r\n     */\r\n    public abstract roleCall();\r\n\r\n    /**\r\n     * MissionAction Phase - Primary phase for world-changing functions like creep.harvest(), tower.attack(), etc.\r\n     */\r\n    public abstract missionActions();\r\n\r\n    /**\r\n     * Finish Phase - Do any remaining work that needs to happen after the other phases\r\n     */\r\n    public abstract finalizeMission();\r\n\r\n    /**\r\n     * Invalidate Cache Phase - Do any housekeeping that might need to be done\r\n     */\r\n    public abstract invalidateMissionCache();\r\n\r\n    public setBoost(activateBoost: boolean) {\r\n        let oldValue = this.memory.activateBoost;\r\n        this.memory.activateBoost = activateBoost;\r\n        return `changing boost activation for ${this.name} in ${this.operation.name} from ${oldValue} to ${activateBoost}`;\r\n    }\r\n\r\n    public setMax(max: number) {\r\n        let oldValue = this.memory.max;\r\n        this.memory.max = max;\r\n        return `changing max creeps for ${this.name} in ${this.operation.name} from ${oldValue} to ${max}`;\r\n    }\r\n\r\n    public setSpawnGroup(spawnGroup: SpawnGroup) {\r\n        this.spawnGroup = spawnGroup;\r\n    }\r\n\r\n    public invalidateSpawnDistance() {\r\n        if (this.memory.distanceToSpawn) {\r\n            console.log(`SPAWN: resetting distance for ${this.name} in ${this.operation.name}`);\r\n            this.memory.distanceToSpawn = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * General purpose function for spawning creeps\r\n     * @param roleName - Used to find creeps belonging to this role, examples: miner, energyCart\r\n     * @param getBody - function that returns the body to be used if a new creep needs to be spawned\r\n     * @param getMax - function that returns how many creeps are currently desired, pass 0 to halt spawning\r\n     * @param options - Optional parameters like prespawn interval, whether to disable attack notifications, etc.\r\n     * @returns {Agent[]}\r\n     */\r\n\r\n    protected headCount(roleName: string, getBody: () => string[], getMax: () => number,\r\n                        options: HeadCountOptions = {}): Agent[] {\r\n        let agentArray = [];\r\n        if (!this.memory.hc[roleName]) this.memory.hc[roleName] = this.findOrphans(roleName);\r\n        let creepNames = this.memory.hc[roleName] as string[];\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < creepNames.length; i++) {\r\n            let creepName = creepNames[i];\r\n            let creep = Game.creeps[creepName];\r\n            if (creep) {\r\n                let agent = new Agent(creep, this);\r\n                let prepared = this.prepAgent(agent, options);\r\n                if (prepared) agentArray.push(agent);\r\n                let ticksNeeded = 0;\r\n                if (options.prespawn !== undefined) {\r\n                    ticksNeeded += creep.body.length * 3;\r\n                    ticksNeeded += options.prespawn;\r\n                }\r\n                if (!creep.ticksToLive || creep.ticksToLive > ticksNeeded) { count++; }\r\n            }\r\n            else {\r\n                creepNames.splice(i, 1);\r\n                delete Memory.creeps[creepName];\r\n                i--;\r\n            }\r\n        }\r\n\r\n        let spawnGroup = this.spawnGroup;\r\n        if (options.altSpawnGroup) {\r\n            spawnGroup = options.altSpawnGroup;\r\n        }\r\n\r\n        let allowSpawn = spawnGroup.isAvailable && this.allowSpawn && (this.hasVision || options.blindSpawn);\r\n        if (allowSpawn && count < getMax()) {\r\n            let creepName = `${this.operation.name}_${roleName}_${Math.floor(Math.random() * 100)}`;\r\n            let outcome = spawnGroup.spawn(getBody(), creepName, options.memory, options.reservation);\r\n            if (_.isString(outcome)) { creepNames.push(creepName); }\r\n        }\r\n\r\n        return agentArray;\r\n    }\r\n\r\n    protected spawnSharedAgent(roleName: string, getBody: () => string[]): Agent {\r\n        let spawnMemory = this.spawnGroup.spawns[0].memory;\r\n        if (!spawnMemory.communityRoles) spawnMemory.communityRoles = {};\r\n\r\n        let employerName = this.operation.name + this.name;\r\n        let creep: Creep;\r\n        if (spawnMemory.communityRoles[roleName]) {\r\n            let creepName = spawnMemory.communityRoles[roleName];\r\n            creep = Game.creeps[creepName];\r\n            if (creep && Game.map.getRoomLinearDistance(this.spawnGroup.room.name, creep.room.name) <= 3) {\r\n                if (creep.memory.employer === employerName || (!creep.memory.lastTickEmployed || Game.time - creep.memory.lastTickEmployed > 1)) {\r\n                    creep.memory.employer = employerName;\r\n                    creep.memory.lastTickEmployed = Game.time;\r\n                    return new Agent(creep, this);\r\n                }\r\n            }\r\n            else {\r\n                delete Memory.creeps[creepName];\r\n                delete spawnMemory.communityRoles[roleName];\r\n            }\r\n        }\r\n\r\n        if (!creep && this.spawnGroup.isAvailable) {\r\n            let creepName = \"community_\" + roleName;\r\n            while (Game.creeps[creepName]) {\r\n                creepName = \"community_\" + roleName + \"_\" + Math.floor(Math.random() * 100);\r\n            }\r\n            let outcome = this.spawnGroup.spawn(getBody(), creepName, undefined, undefined);\r\n            if (_.isString(outcome)) {\r\n                spawnMemory.communityRoles[roleName] = outcome;\r\n            }\r\n            else if (Game.time % 10 !== 0 && outcome !== ERR_NOT_ENOUGH_RESOURCES) {\r\n                console.log(`error spawning community ${roleName} in ${this.operation.name} outcome: ${outcome}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns creep body array with desired number of parts in this order: WORK → CARRY → MOVE\r\n     * @param workCount\r\n     * @param carryCount\r\n     * @param movecount\r\n     * @returns {string[]}\r\n     */\r\n    protected workerBody(workCount: number, carryCount: number, movecount: number): string[] {\r\n        let body: string [] = [];\r\n        for (let i = 0; i < workCount; i++) {\r\n            body.push(WORK);\r\n        }\r\n        for (let i = 0; i < carryCount; i++) {\r\n            body.push(CARRY);\r\n        }\r\n        for (let i = 0; i < movecount; i++) {\r\n            body.push(MOVE);\r\n        }\r\n        return body;\r\n    }\r\n\r\n    protected configBody(config: {[partType: string]: number}): string[] {\r\n        let body: string[] = [];\r\n        for (let partType in config) {\r\n            let amount = config[partType];\r\n            for (let i = 0; i < amount; i++) {\r\n                body.push(partType);\r\n            }\r\n        }\r\n        return body;\r\n    }\r\n\r\n    /**\r\n     * Returns creep body array with the desired ratio of parts, governed by how much spawn energy is possible\r\n     * @param workRatio\r\n     * @param carryRatio\r\n     * @param moveRatio\r\n     * @param spawnFraction - proportion of spawn energy to be used up to 50 body parts, .5 would use half, 1 would use all\r\n     * @param limit - set a limit to the number of units (useful if you know the exact limit, like with miners)\r\n     * @returns {string[]}\r\n     */\r\n    protected bodyRatio(workRatio: number, carryRatio: number, moveRatio: number, spawnFraction: number, limit?: number): string[] {\r\n        let sum = workRatio * 100 + carryRatio * 50 + moveRatio * 50;\r\n        let partsPerUnit = workRatio + carryRatio + moveRatio;\r\n        if (!limit) limit = Math.floor(50 / partsPerUnit);\r\n        let maxUnits = Math.min(Math.floor((this.spawnGroup.maxSpawnEnergy * spawnFraction) / sum), limit);\r\n        return this.workerBody(workRatio * maxUnits, carryRatio * maxUnits, moveRatio * maxUnits);\r\n    }\r\n\r\n    /**\r\n     * General purpose checking for creep load\r\n     * @param creep\r\n     * @returns {boolean}\r\n     */\r\n    protected hasLoad(creep: Creep): boolean {\r\n        if (creep.memory.hasLoad && _.sum(creep.carry) === 0) {\r\n            creep.memory.hasLoad = false;\r\n        }\r\n        else if (!creep.memory.hasLoad && _.sum(creep.carry) === creep.carryCapacity) {\r\n            creep.memory.hasLoad = true;\r\n        }\r\n        return creep.memory.hasLoad;\r\n    }\r\n\r\n    // deprecated\r\n    /**\r\n     * Used to determine cart count/size based on transport distance and the bandwidth needed\r\n     * @param distance - distance (or average distance) from point A to point B\r\n     * @param load - how many resource units need to be transported per tick (example: 10 for an energy source)\r\n     * @returns {{body: string[], cartsNeeded: number}}\r\n     */\r\n    protected cacheTransportAnalysis(distance: number, load: number): TransportAnalysis {\r\n        if (!this.memory.transportAnalysis || load !== this.memory.transportAnalysis.load\r\n            || distance !== this.memory.transportAnalysis.distance) {\r\n            this.memory.transportAnalysis = Mission.analyzeTransport(distance, load, this.spawnGroup.maxSpawnEnergy)\r\n        }\r\n        return this.memory.transportAnalysis;\r\n    }\r\n\r\n    // deprecated\r\n    static analyzeTransport(distance: number, load: number, maxSpawnEnergy: number): TransportAnalysis {\r\n        // cargo units are just 2 CARRY, 1 MOVE, which has a capacity of 100 and costs 150\r\n        let maxUnitsPossible = Math.min(Math.floor(maxSpawnEnergy /\r\n            ((BODYPART_COST[CARRY] * 2) + BODYPART_COST[MOVE])), 16);\r\n        let bandwidthNeeded = distance * load * 2.1;\r\n        let cargoUnitsNeeded = Math.ceil(bandwidthNeeded / (CARRY_CAPACITY * 2));\r\n        let cartsNeeded = Math.ceil(cargoUnitsNeeded / maxUnitsPossible);\r\n        let cargoUnitsPerCart = Math.floor(cargoUnitsNeeded / cartsNeeded);\r\n        return {\r\n            load: load,\r\n            distance: distance,\r\n            cartsNeeded: cartsNeeded,\r\n            carryCount: cargoUnitsPerCart * 2,\r\n            moveCount: cargoUnitsPerCart,\r\n        };\r\n    }\r\n\r\n    // deprecated\r\n    static loadFromSource(source: Source): number {\r\n        return Math.max(source.energyCapacity, SOURCE_ENERGY_CAPACITY) / ENERGY_REGEN_TIME;\r\n    }\r\n\r\n    protected getFlagSet(identifier: string, max = 10): Flag[] {\r\n\r\n        let flags = [];\r\n        for (let i = 0; i < max; i++) {\r\n            let flag = Game.flags[this.operation.name + identifier + i];\r\n            if (flag) {\r\n                flags.push(flag);\r\n            }\r\n        }\r\n        return flags;\r\n    }\r\n\r\n    protected flagLook(lookConstant: string, identifier: string, max = 10) {\r\n\r\n        let objects = [];\r\n\r\n        let flags = this.getFlagSet(identifier, max);\r\n        for (let flag of flags) {\r\n            if (flag.room) {\r\n                let object = _.head(flag.pos.lookFor(lookConstant));\r\n                if (object) {\r\n                    objects.push(object);\r\n                }\r\n                else {\r\n                    flag.remove();\r\n                }\r\n            }\r\n        }\r\n\r\n        return objects;\r\n    }\r\n\r\n    // deprecated, use similar function on TransportGuru\r\n    getStorage(pos: RoomPosition): StructureStorage {\r\n        if (this.memory.tempStorageId) {\r\n            let storage = Game.getObjectById<StructureStorage>(this.memory.tempStorageId);\r\n            if (storage) {\r\n                return storage;\r\n            }\r\n            else {\r\n                console.log(\"ATTN: Clearing temporary storage id due to not finding object in\", this.operation.name);\r\n                this.memory.tempStorageId = undefined;\r\n            }\r\n        }\r\n\r\n        // invalidated periodically\r\n        if (!this.memory.nextStorageCheck || Game.time >= this.memory.nextStorageCheck) {\r\n            let bestStorages = RoomHelper.findClosest({pos: pos}, _.filter(Game.structures, s => s.structureType == STRUCTURE_STORAGE),\r\n                {linearDistanceLimit: MAX_HARVEST_DISTANCE });\r\n\r\n            bestStorages = _.filter(bestStorages, value => value.distance < MAX_HARVEST_PATH);\r\n\r\n            let resultPosition;\r\n            if (bestStorages.length > 0) {\r\n                let result = bestStorages[0].destination;\r\n                resultPosition = result.pos;\r\n                this.memory.storageId = result.id;\r\n                this.memory.nextStorageCheck = Game.time + helper.randomInterval(10000); // Around 10 hours\r\n            } else {\r\n                this.memory.nextStorageCheck = Game.time + 100; // Around 6 minutes\r\n            }\r\n            console.log(`MISSION: finding storage for ${this.operation.name}, result: ${resultPosition}`);\r\n        }\r\n\r\n        if (this.memory.storageId) {\r\n            let storage = Game.getObjectById<StructureStorage>(this.memory.storageId);\r\n            if (storage && storage.room.controller.level >= 4) {\r\n                return storage;\r\n            } else {\r\n                this.memory.storageId = undefined;\r\n                this.memory.nextStorageCheck = Game.time;\r\n                return this.getStorage(pos);\r\n            }\r\n        }\r\n    }\r\n\r\n    private findOrphans(roleName: string) {\r\n        let creepNames = [];\r\n        for (let creepName in Game.creeps) {\r\n            if (creepName.indexOf(this.operation.name + \"_\" + roleName + \"_\") > -1) {\r\n                creepNames.push(creepName);\r\n            }\r\n        }\r\n        return creepNames;\r\n    }\r\n\r\n    protected recycleAgent(agent: Agent) {\r\n        let spawn = this.spawnGroup.spawns[0];\r\n        if (agent.pos.isNearTo(spawn)) {\r\n            spawn.recycleCreep(agent.creep);\r\n        }\r\n        else {\r\n            agent.travelTo(spawn);\r\n        }\r\n    }\r\n\r\n    private prepAgent(agent: Agent, options: HeadCountOptions) {\r\n        if (!agent.memory.prep) {\r\n            if (options.disableNotify) {\r\n                this.disableNotify(agent)\r\n            }\r\n            let boosted = agent.seekBoost(agent.memory.boosts, agent.memory.allowUnboosted);\r\n            if (!boosted) return false;\r\n            if (agent.creep.spawning) return false;\r\n            if (!options.skipMoveToRoom && (agent.pos.roomName !== this.flag.pos.roomName || agent.pos.isNearExit(1))) {\r\n                agent.avoidSK(this.flag);\r\n                return;\r\n            }\r\n            agent.memory.prep = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    protected findPartnerships(agents: Agent[], role: string) {\r\n        for (let agent of agents) {\r\n            if (!agent.memory.partner) {\r\n                if (!this.partnerPairing[role]) this.partnerPairing[role] = [];\r\n                this.partnerPairing[role].push(agent);\r\n                for (let otherRole in this.partnerPairing) {\r\n                    if (role === otherRole) continue;\r\n                    let otherCreeps = this.partnerPairing[otherRole];\r\n                    let closestCreep;\r\n                    let smallestAgeDifference = Number.MAX_VALUE;\r\n                    for (let otherCreep of otherCreeps) {\r\n                        let ageDifference = Math.abs(agent.ticksToLive - otherCreep.ticksToLive);\r\n                        if (ageDifference < smallestAgeDifference) {\r\n                            smallestAgeDifference = ageDifference;\r\n                            closestCreep = otherCreep;\r\n                        }\r\n                    }\r\n\r\n                    if (closestCreep) {\r\n                        closestCreep.memory.partner = agent.name;\r\n                        agent.memory.partner = closestCreep.name;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getPartner(agent: Agent, possibilities: Agent[]): Agent {\r\n        for (let possibility of possibilities) {\r\n            if (possibility.name === agent.memory.partner) {\r\n                return possibility;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected findDistanceToSpawn(destination: RoomPosition): number {\r\n        if (!this.memory.distanceToSpawn) {\r\n            let roomLinearDistance = Game.map.getRoomLinearDistance(this.spawnGroup.pos.roomName, destination.roomName);\r\n            if (roomLinearDistance <= OBSERVER_RANGE) {\r\n                let ret = empire.traveler.findTravelPath(this.spawnGroup, {pos: destination});\r\n                if (ret.incomplete) {\r\n                    console.log(`SPAWN: error finding distance in ${this.operation.name} for object at ${destination}`);\r\n                    console.log(`fallback to linearRoomDistance`);\r\n                    this.memory.distanceToSpawn = roomLinearDistance * 50 + 25;\r\n                } else {\r\n                    this.memory.distanceToSpawn = ret.path.length;\r\n                }\r\n            }\r\n            else {\r\n                console.log(`SPAWN: likely portal travel detected in ${this.operation.name}, setting distance to 200`);\r\n                this.memory.distanceToSpawn = 200;\r\n            }\r\n        }\r\n\r\n        return this.memory.distanceToSpawn;\r\n    }\r\n\r\n    protected disableNotify(creep: Creep | Agent) {\r\n        if (creep instanceof Agent) {\r\n            creep = creep.creep;\r\n        }\r\n\r\n        if (!creep.memory.notifyDisabled) {\r\n            creep.notifyWhenAttacked(false);\r\n            creep.memory.notifyDisabled = true;\r\n        }\r\n    }\r\n\r\n    protected pavePath(start: {pos: RoomPosition}, finish: {pos: RoomPosition}, rangeAllowance: number, ignoreLimit = false): number {\r\n        if (Game.time - this.memory.paveTick < 1000) return;\r\n\r\n        if (Game.map.getRoomLinearDistance(start.pos.roomName, finish.pos.roomName) > 2) {\r\n            console.log(`PAVER: path too long: ${start.pos.roomName} to ${finish.pos.roomName}`);\r\n            return;\r\n        }\r\n        let path = this.findPavedPath(start.pos, finish.pos, rangeAllowance);\r\n\r\n        if (!path) {\r\n            console.log(`incomplete pavePath, please investigate (${this.operation.name}), start: ${start.pos}, finish: ${finish.pos}, mission: ${this.name}`);\r\n            return;\r\n        }\r\n\r\n        let newConstructionPos = this.examinePavedPath(path);\r\n\r\n        if (newConstructionPos && (ignoreLimit || Object.keys(Game.constructionSites).length < 60)) {\r\n            if (!Game.cache.placedRoad) {\r\n                Game.cache.placedRoad = true;\r\n                console.log(`PAVER: placed road ${newConstructionPos} in ${this.operation.name}`);\r\n                newConstructionPos.createConstructionSite(STRUCTURE_ROAD);\r\n            }\r\n        }\r\n        else {\r\n            this.memory.paveTick = Game.time;\r\n            if (_.last(path).inRangeTo(finish.pos, rangeAllowance)) {\r\n                return path.length;\r\n            }\r\n        }\r\n    }\r\n\r\n    // This path making will only be valid for an origin/destination with a roomdistance less than 3\r\n    protected findPavedPath(start: RoomPosition, finish: RoomPosition, rangeAllowance: number): RoomPosition[] {\r\n        const ROAD_COST = 3;\r\n        const PLAIN_COST = 4;\r\n        const SWAMP_COST = 5;\r\n        const AVOID_COST = 7;\r\n\r\n        let maxDistance = Game.map.getRoomLinearDistance(start.roomName, finish.roomName);\r\n        let ret = PathFinder.search(start, [{pos: finish, range: rangeAllowance}], {\r\n            plainCost: PLAIN_COST,\r\n            swampCost: SWAMP_COST,\r\n            maxOps: 12000,\r\n            roomCallback: (roomName: string): CostMatrix | boolean => {\r\n\r\n                // disqualify rooms that involve a circuitous path\r\n                if (Game.map.getRoomLinearDistance(start.roomName, roomName) > maxDistance) {\r\n                    return false;\r\n                }\r\n\r\n                // disqualify enemy rooms\r\n                if (Traveler.checkOccupied(roomName)) {\r\n                    return false;\r\n                }\r\n\r\n                let room = Game.rooms[roomName];\r\n                if (!room) {\r\n                    let roomType = WorldMap.roomTypeFromName(roomName);\r\n                    if (roomType === ROOMTYPE_ALLEY) {\r\n                        let matrix = new PathFinder.CostMatrix();\r\n                        return helper.blockOffExits(matrix, AVOID_COST, roomName);\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                let matrix = new PathFinder.CostMatrix();\r\n                Traveler.addStructuresToMatrix(room, matrix, ROAD_COST);\r\n\r\n                // avoid controller\r\n                if (room.controller) {\r\n                    helper.blockOffPosition(matrix, room.controller, 3, AVOID_COST);\r\n                }\r\n\r\n                // avoid container/link adjacency\r\n                let sources = room.find<Source>(FIND_SOURCES);\r\n                for (let source of sources) {\r\n                    let structure = source.findMemoStructure<Structure>(STRUCTURE_CONTAINER, 1);\r\n                    if (!structure) {\r\n                        structure = source.findMemoStructure<Structure>(STRUCTURE_LINK, 1);\r\n                    }\r\n\r\n                    if (structure) {\r\n                        helper.blockOffPosition(matrix, structure, 1, AVOID_COST);\r\n                    }\r\n                }\r\n\r\n                // add construction sites too\r\n                let constructionSites = room.find<ConstructionSite>(FIND_MY_CONSTRUCTION_SITES);\r\n                for (let site of constructionSites) {\r\n                    if (site.structureType === STRUCTURE_ROAD) {\r\n                        matrix.set(site.pos.x, site.pos.y, ROAD_COST);\r\n                    }\r\n                    else {\r\n                        matrix.set(site.pos.x, site.pos.y, 0xff);\r\n                    }\r\n                }\r\n\r\n                // avoid going too close to lairs\r\n                for (let lair of room.findStructures<StructureKeeperLair>(STRUCTURE_KEEPER_LAIR)) {\r\n                    helper.blockOffPosition(matrix, lair, 1, AVOID_COST);\r\n                }\r\n\r\n                return matrix;\r\n            },\r\n        });\r\n\r\n        if (!ret.incomplete) {\r\n            return ret.path;\r\n        }\r\n    }\r\n\r\n    private examinePavedPath(path: RoomPosition[]) {\r\n\r\n        let repairIds = [];\r\n        let hitsToRepair = 0;\r\n\r\n        for (let i = 0; i < path.length; i++) {\r\n            let position = path[i];\r\n            if (!Game.rooms[position.roomName]) return;\r\n            if (position.isNearExit(0)) continue;\r\n            let road = position.lookForStructure(STRUCTURE_ROAD);\r\n            if (road) {\r\n                repairIds.push(road.id);\r\n                hitsToRepair += road.hitsMax - road.hits;\r\n                // TODO: calculate how much \"a whole lot\" should be based on paver repair rate\r\n                const A_WHOLE_LOT = 1000000;\r\n                if (!this.memory.roadRepairIds && (hitsToRepair > A_WHOLE_LOT || road.hits < road.hitsMax * .20)) {\r\n                    console.log(`PAVER: I'm being summoned in ${this.operation.name}`);\r\n                    this.memory.roadRepairIds = repairIds;\r\n                }\r\n                continue;\r\n            }\r\n            let construction = position.lookFor<ConstructionSite>(LOOK_CONSTRUCTION_SITES)[0];\r\n            if (construction) continue;\r\n            return position;\r\n        }\r\n    }\r\n\r\n    protected paverActions(paver: Agent) {\r\n\r\n        // paver, healthyself\r\n        if (paver.hits < paver.hitsMax) {\r\n            if (paver.room.hostiles.length === 0 && !paver.pos.isNearExit(0)) {\r\n                let tower = paver.pos.findClosestByRange(paver.room.findStructures<StructureTower>(STRUCTURE_TOWER));\r\n                if (tower) {\r\n                    tower.heal(paver.creep);\r\n                    return;\r\n                }\r\n            }\r\n            let healersInRoom = _.filter(paver.room.find<Creep>(FIND_MY_CREEPS), c => c.getActiveBodyparts(HEAL));\r\n            if (healersInRoom.length > 0) {\r\n                paver.idleOffRoad();\r\n                return;\r\n            }\r\n            if (paver.getActiveBodyparts(WORK) === 0) {\r\n                paver.travelTo(this.spawnGroup);\r\n                return;\r\n            }\r\n        }\r\n\r\n        let hasLoad = paver.hasLoad();\r\n        if (!hasLoad) {\r\n            paver.procureEnergy(this.findRoadToRepair());\r\n            return;\r\n        }\r\n\r\n        let road = this.findRoadToRepair();\r\n\r\n        if (!road) {\r\n            console.log(`this is ${this.operation.name} paver, checking out with ${paver.ticksToLive} ticks to live`);\r\n            delete Memory.creeps[paver.name];\r\n            paver.idleOffRoad(this.room.controller);\r\n            return;\r\n        }\r\n\r\n        let paving = false;\r\n        if (paver.pos.inRangeTo(road, 3) && !paver.pos.isNearExit(0)) {\r\n            paving = paver.repair(road) === OK;\r\n            let hitsLeftToRepair = road.hitsMax - road.hits;\r\n            if (hitsLeftToRepair > 10000) {\r\n                paver.yieldRoad(road, true);\r\n            }\r\n            else if (hitsLeftToRepair > 1500) {\r\n                paver.yieldRoad(road, false)\r\n            }\r\n        }\r\n        else {\r\n            paver.travelTo(road, {range: 0});\r\n        }\r\n\r\n        if (!paving) {\r\n            road = paver.pos.lookForStructure(STRUCTURE_ROAD) as StructureRoad;\r\n            if (road && road.hits < road.hitsMax) paver.repair(road);\r\n        }\r\n\r\n        paver.stealNearby(\"creep\");\r\n    }\r\n\r\n    private findRoadToRepair(): StructureRoad {\r\n        if (!this.memory.roadRepairIds) return;\r\n\r\n        let road = Game.getObjectById<StructureRoad>(this.memory.roadRepairIds[0]);\r\n        if (road && road.hits < road.hitsMax) {\r\n            return road;\r\n        }\r\n        else {\r\n            this.memory.roadRepairIds.shift();\r\n            if (this.memory.roadRepairIds.length > 0) {\r\n                return this.findRoadToRepair();\r\n            }\r\n            else {\r\n                this.memory.roadRepairIds = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected spawnPaver(): Agent {\r\n        if (this.room.controller && this.room.controller.level === 1) return;\r\n        let paverBody = () => { return this.bodyRatio(1, 3, 2, 1, 5); };\r\n        return this.spawnSharedAgent(\"paver\", paverBody);\r\n    }\r\n\r\n    protected registerPrespawn(agent: Agent) {\r\n        if (!agent.memory.registered) {\r\n            agent.memory.registered = true;\r\n            const SANITY_CHECK = CREEP_LIFE_TIME / 2;\r\n            this.memory.prespawn = Math.max(CREEP_LIFE_TIME - agent.creep.ticksToLive, SANITY_CHECK);\r\n        }\r\n    }\r\n\r\n    protected medicActions(defender: Agent) {\r\n        let hurtCreep = this.findHurtCreep(defender);\r\n        if (!hurtCreep) {\r\n            defender.idleNear(this.flag, 12);\r\n            return;\r\n        }\r\n\r\n        // move to creep\r\n        let range = defender.pos.getRangeTo(hurtCreep);\r\n        if (range > 1) {\r\n            defender.travelTo(hurtCreep, {movingTarget: true});\r\n        }\r\n        else {\r\n            defender.yieldRoad(hurtCreep, true);\r\n        }\r\n\r\n        if (range === 1) {\r\n            defender.heal(hurtCreep);\r\n        }\r\n        else if (range <= 3) {\r\n            defender.rangedHeal(hurtCreep);\r\n        }\r\n    }\r\n\r\n    private findHurtCreep(defender: Agent) {\r\n        if (!this.room) return;\r\n\r\n        if (defender.memory.healId) {\r\n            let creep = Game.getObjectById(defender.memory.healId) as Creep;\r\n            if (creep && creep.room.name === defender.room.name && creep.hits < creep.hitsMax) {\r\n                return creep;\r\n            }\r\n            else {\r\n                defender.memory.healId = undefined;\r\n                return this.findHurtCreep(defender);\r\n            }\r\n        }\r\n        else if (!defender.memory.healCheck || Game.time - defender.memory.healCheck > 25) {\r\n            defender.memory.healCheck = Game.time;\r\n            let hurtCreep = _(this.room.find<Creep>(FIND_MY_CREEPS))\r\n                .filter((c: Creep) => c.hits < c.hitsMax && c.ticksToLive > 100)\r\n                .sortBy((c: Creep) => -c.partCount(WORK))\r\n                .head();\r\n\r\n            if (hurtCreep) {\r\n                defender.memory.healId = hurtCreep.id;\r\n                return hurtCreep;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {Mission} from \"./Mission\";\r\nimport {Operation} from \"../operations/Operation\";\r\nimport {Agent} from \"./Agent\";\r\nexport class EmergencyMinerMission extends Mission {\r\n\r\n    public emergencyMiners: Agent[];\r\n    public memory: {\r\n        lastTick: number\r\n    };\r\n\r\n    /**\r\n     * Checks every 100 ticks if storage is full or a miner is present, if not spawns an emergency miner. Should come\r\n     * first in FortOperation\r\n     * @param operation\r\n     */\r\n\r\n    constructor(operation: Operation) {\r\n        super(operation, \"emergencyMiner\");\r\n    }\r\n\r\n    public initMission() {\r\n    }\r\n\r\n    public roleCall() {\r\n        let energyAvailable = this.spawnGroup.currentSpawnEnergy >= 1300 ||\r\n            (this.room.storage && this.room.storage.store.energy > 1300) || this.findMinersBySources();\r\n        if (energyAvailable) {\r\n            this.memory.lastTick = Game.time;\r\n        }\r\n\r\n        let getMaxMiners = () => {\r\n            if (!this.memory.lastTick || Game.time > this.memory.lastTick + 100) {\r\n                if (Game.time % 10 === 0) {\r\n                    console.log(\"ATTN: Backup miner being spawned in\", this.operation.name);\r\n                }\r\n                return 2;\r\n            }\r\n        };\r\n\r\n        this.emergencyMiners = this.headCount(\"emergencyMiner\", () => this.workerBody(2, 1, 1), getMaxMiners);\r\n    }\r\n\r\n    public missionActions() {\r\n        for (let miner of this.emergencyMiners) {\r\n            this.minerActions(miner);\r\n        }\r\n    }\r\n\r\n    public finalizeMission() {\r\n    }\r\n    public invalidateMissionCache() {\r\n    }\r\n\r\n    private minerActions(miner: Agent) {\r\n        let closest = miner.pos.findClosestByRange(FIND_SOURCES) as Source;\r\n        if (!miner.pos.isNearTo(closest)) {\r\n            miner.travelTo(closest);\r\n            return;\r\n        }\r\n\r\n        miner.memory.donatesEnergy = true;\r\n        miner.memory.scavanger = RESOURCE_ENERGY;\r\n        miner.harvest(closest);\r\n    }\r\n\r\n    private findMinersBySources() {\r\n        for (let source of this.room.find<Source>(FIND_SOURCES)) {\r\n            if (source.pos.findInRange(FIND_MY_CREEPS, 1, {filter:(c: Creep) => c.partCount(WORK) > 0}).length > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import {Mission} from \"./Mission\";\nimport {Operation} from \"../operations/Operation\";\nimport {Agent} from \"./Agent\";\n\ninterface EnergyStructure extends Structure {\n    pos: RoomPosition\n    energy: number\n    energyCapacity: number\n}\n\nexport class RefillMission extends Mission {\n\n    carts: Agent[];\n    emergencyCarts: Agent[];\n    emergencyMode: boolean;\n    empties: EnergyStructure[];\n\n    memory: {\n        cartsLastTick: number,\n        max: number\n    };\n\n    /**\n     * General-purpose structure refilling. Can be used to refill spawning energy, towers, links, labs, etc.\n     *  Will default to drawing energy from storage, and use altBattery if there is no storage with energy\n     * @param operation\n     */\n\n    constructor(operation: Operation) {\n        super(operation, \"refill\");\n    }\n\n    initMission() {\n        this.emergencyMode = this.memory.cartsLastTick === 0;\n    }\n\n    roleCall() {\n\n        let max = () => this.room.storage ? 1 : 2;\n        let emergencyMax = () => this.emergencyMode ? 1 : 0;\n\n        let emergencyBody = () => { return this.workerBody(0, 4, 2); };\n        this.emergencyCarts = this.headCount(\"emergency_\" + this.name, emergencyBody, emergencyMax);\n\n        let cartBody = () => {\n            if (this.operation.type === \"flex\") {\n                return this.bodyRatio(0, 2, 1, 1, 16);\n            }\n            else {\n                return this.bodyRatio(0, 2, 1, 1, 10);\n            }\n        };\n\n        let memory = { scavanger: RESOURCE_ENERGY };\n        this.carts = this.headCount(\"spawnCart\", cartBody, max, {prespawn: 50, memory: memory});\n        this.memory.cartsLastTick = this.carts.length;\n    }\n\n    missionActions() {\n\n        for (let cart of this.emergencyCarts) {\n            this.spawnCartActions(cart, 0);\n        }\n\n        let order = 0;\n        for (let cart of this.carts) {\n            this.spawnCartActions(cart, order);\n            order++;\n        }\n    }\n\n    spawnCartActions2(cart: Agent, order: number) {\n        let hasLoad = cart.hasLoad();\n        if (!hasLoad) {\n            if (order !== 0 && cart.ticksToLive < 50) {\n                cart.suicide();\n                return;\n            }\n            cart.memory.emptyId = undefined;\n            cart.procureEnergy(this.findNearestEmpty(cart), true);\n            return;\n        }\n    }\n\n    spawnCartActions(cart: Agent, order: number) {\n\n        let hasLoad = cart.hasLoad();\n        if (!hasLoad) {\n            if (order !== 0 && cart.ticksToLive < 50) {\n                cart.suicide();\n                return;\n            }\n            cart.memory.emptyId = undefined;\n            cart.procureEnergy(this.findNearestEmpty(cart), true);\n            return;\n        }\n\n        let target = this.findNearestEmpty(cart);\n        if (!target) {\n            if (cart.carry.energy < cart.carryCapacity * .8) {\n                cart.memory.hasLoad = false;\n            } else {\n                cart.idleOffRoad(cart.room.controller);\n            }\n            return;\n        }\n\n        // has target\n        if (!cart.pos.isNearTo(target)) {\n            cart.travelTo(target);\n            if (this.room.storage && cart.pos.isNearTo(this.room.storage) &&\n                cart.carry.energy <= cart.carryCapacity - 50) {\n                cart.withdraw(this.room.storage, RESOURCE_ENERGY);\n            }\n            return;\n        }\n\n        // is near to target\n        let outcome = cart.transfer(target, RESOURCE_ENERGY);\n        if (outcome === OK) {\n            if (cart.carry.energy > target.energyCapacity) {\n                cart.memory.emptyId = undefined;\n                target = this.findNearestEmpty(cart, target);\n                if (target && !cart.pos.isNearTo(target)) {\n                    cart.travelTo(target);\n                }\n            } else if (this.room.storage) {\n                cart.travelTo(this.room.storage);\n            }\n        }\n    }\n\n    finalizeMission() {\n    }\n    invalidateMissionCache() {\n    }\n\n    findNearestEmpty(cart: Agent, pullTarget?: EnergyStructure): EnergyStructure {\n        if (cart.memory.emptyId) {\n            let empty = Game.getObjectById<EnergyStructure>(cart.memory.emptyId);\n            if (empty && empty.energy < empty.energyCapacity) {\n                let rangeToEmpty = cart.pos.getRangeTo(empty);\n                let closestEmpty = cart.pos.findClosestByRange(this.getEmpties());\n                let rangeToClosest = cart.pos.getRangeTo(closestEmpty);\n                if (rangeToEmpty > rangeToClosest) {\n                    cart.memory.emptyId = closestEmpty.id;\n                    return closestEmpty;\n                } else {\n                    return empty;\n                }\n            } else {\n                delete cart.memory.emptyId;\n                return this.findNearestEmpty(cart, pullTarget);\n            }\n        } else {\n            let closestEmpty = cart.pos.findClosestByRange<EnergyStructure>(this.getEmpties(pullTarget));\n            if (closestEmpty) {\n                cart.memory.emptyId = closestEmpty.id;\n                return closestEmpty;\n            }\n        }\n    }\n\n    getEmpties(pullTarget?: EnergyStructure): EnergyStructure[] {\n        if (!this.empties) {\n            this.empties = _.filter(this.room.findStructures<EnergyStructure>(STRUCTURE_SPAWN)\n                .concat(this.room.findStructures<EnergyStructure>(STRUCTURE_EXTENSION)), (s: StructureSpawn) => {\n                return s.energy < s.energyCapacity;\n            });\n            this.empties = this.empties.concat(_.filter(this.room.findStructures<EnergyStructure>(STRUCTURE_TOWER),\n                (s: StructureTower) => { return s.energy < s.energyCapacity * .5; }));\n        }\n\n        if (pullTarget) {\n            _.pull(this.empties, pullTarget);\n        }\n\n        return this.empties;\n    }\n}","import {Mission} from \"./Mission\";\nimport {Operation} from \"../operations/Operation\";\nimport {Agent} from \"./Agent\";\nexport class LinkMiningMission extends Mission {\n\n    linkMiners: Agent[];\n    source: Source;\n    link: StructureLink;\n\n    /**\n     * Sends a miner to a source with a link, energy transfer is managed by LinkNetworkMission\n     * @param operation\n     * @param name\n     * @param source\n     * @param link\n     */\n\n    constructor(operation: Operation, name: string, source: Source, link: StructureLink) {\n        super(operation, name);\n        this.source = source;\n        this.link = link;\n    }\n\n    initMission() {\n    }\n\n    roleCall() {\n        this.linkMiners = this.headCount(this.name, () => this.workerBody(5, 4, 5), () => 1);\n    }\n\n    missionActions() {\n        for (let miner of this.linkMiners) {\n            this.minerActions(miner);\n        }\n    }\n\n    finalizeMission() {\n    }\n    invalidateMissionCache() {\n    }\n\n    private minerActions(miner: Agent) {\n        if (!miner.memory.inPosition) {\n            this.moveToPosition(miner);\n            return; // early\n        }\n\n        miner.memory.donatesEnergy = true;\n        miner.memory.scavanger = RESOURCE_ENERGY;\n        miner.harvest(this.source);\n        if (miner.carry.energy === miner.carryCapacity) {\n            miner.transfer(this.link, RESOURCE_ENERGY);\n        }\n    }\n\n    /**\n     * Picks a position between the source and the link and moves there, robbing and killing any miner at that position\n     * @param miner\n     */\n    private moveToPosition(miner: Agent) {\n        let roadPos: RoomPosition;\n\n        for (let i = 1; i <= 8; i++) {\n            let position = this.source.pos.getPositionAtDirection(i);\n            if (!position.isPassible(true)) continue;\n            if (!position.isNearTo(this.link)) continue;\n            if (position.lookForStructure(STRUCTURE_ROAD)) {\n                roadPos = position;\n            }\n\n            if (miner.pos.inRangeTo(position, 0)) {\n                miner.memory.inPosition = true;\n            } else {\n                miner.moveItOrLoseIt(position, \"miner\");\n            }\n            return; // early\n        }\n        if (!miner.memory.posNotify) {\n            miner.memory.posNotify = true;\n            console.log(\"couldn't find valid position for\", miner.name, \"in \", miner.room.name);\n        }\n\n        if (miner.pos.inRangeTo(roadPos, 0)) {\n            miner.memory.inPosition = true;\n        } else {\n            miner.moveItOrLoseIt(roadPos, \"miner\");\n        }\n    }\n}","import {Mission} from \"./Mission\";\nimport {Operation} from \"../operations/Operation\";\nimport {TransportAnalysis} from \"../../interfaces\";\nimport {Agent} from \"./Agent\";\nimport {notifier} from \"../../notifier\";\nimport {empire} from \"../../helpers/loopHelper\";\nimport {Profiler} from \"../../Profiler\";\n\nexport class MiningMission extends Mission {\n\n    public memory: {\n        potencyPerMiner: number;\n        positionsAvailable: number;\n        transportAnalysis: TransportAnalysis;\n        distanceToStorage: number;\n        roadRepairIds: string[];\n        prespawn: number;\n        positionCount: number;\n    };\n\n    private miners: Agent[];\n    private minerCarts: Agent[];\n    private paver: Agent;\n    private source: Source;\n    private container: StructureContainer;\n    private storage: StructureStorage;\n    private remoteSpawning: boolean;\n    private _minersNeeded: number;\n    private _analysis: TransportAnalysis;\n\n    /**\n     * General-purpose energy mining, uses a nested TransportMission to transfer energy\n     * @param operation\n     * @param name\n     * @param source\n     * @param remoteSpawning\n     */\n\n    constructor(operation: Operation, name: string, source: Source, remoteSpawning = false) {\n        super(operation, name);\n        this.source = source;\n        this.remoteSpawning = remoteSpawning;\n    }\n\n    // return-early\n    public initMission() {\n        if (!this.hasVision) { return; }\n        this.container = this.findContainer();\n        this.storage = this.findMinerStorage();\n    }\n\n    public getMaxMiners = () => this.minersNeeded;\n\n    public getMinerBody = () => {\n        if (this.remoteSpawning) { return this.workerBody(6, 1, 6); }\n        let minersSupported = this.minersSupported();\n        if (minersSupported === 1) {\n            let work = Math.ceil((Math.max(this.source.energyCapacity,\n                        SOURCE_ENERGY_CAPACITY) / ENERGY_REGEN_TIME) / HARVEST_POWER) + 1;\n            return this.workerBody(work, 1, Math.ceil(work / 2));\n        } else if (minersSupported === 2) {\n            return this.workerBody(3, 1, 2);\n        } else { return this.workerBody(2, 1, 1); }\n    };\n\n    public getMaxCarts = () => {\n        if (!this.storage || this.storage.room.controller.level < 4) { return 0; }\n        const FULL_STORAGE_THRESHOLD = STORAGE_CAPACITY - 50000;\n        if (_.sum(this.storage.store) > FULL_STORAGE_THRESHOLD) { return 0; }\n        if (!this.container) { return 0; }\n        return this.analysis.cartsNeeded;\n    };\n\n    public getCartBody = () => {\n        return this.workerBody(0, this.analysis.carryCount, this.analysis.moveCount);\n    };\n\n    public roleCall() {\n\n        let prespawn = 0;\n        if (this.storage) {\n            prespawn = Game.map.getRoomLinearDistance(this.source.pos.roomName, this.storage.pos.roomName) * 50 + 50;\n        }\n\n        this.miners = this.headCount(this.name, this.getMinerBody, this.getMaxMiners,\n            {prespawn: prespawn});\n\n        if (this.memory.roadRepairIds) {\n            this.paver = this.spawnPaver();\n        }\n\n        let memory = { scavanger: RESOURCE_ENERGY };\n        this.minerCarts = this.headCount(this.name + \"cart\", this.getCartBody, this.getMaxCarts,\n            {prespawn: this.analysis.distance, memory: memory});\n    }\n\n    public missionActions() {\n\n        let order = 0;\n        for (let miner of this.miners) {\n            this.minerActions(miner, order);\n            order++;\n        }\n\n        for (let cart of this.minerCarts) {\n            this.cartActions(cart);\n        }\n\n        if (this.paver) {\n            this.paverActions(this.paver);\n        }\n\n        if (this.container) {\n            let startingPosition: {pos: RoomPosition} = this.storage;\n            if (!startingPosition) {\n                startingPosition = this.room.find<StructureSpawn>(FIND_MY_SPAWNS)[0];\n            }\n            if (!startingPosition) {\n                startingPosition = this.room.find<ConstructionSite>(FIND_CONSTRUCTION_SITES,\n                    {filter: ( (s: ConstructionSite) => s.structureType === STRUCTURE_SPAWN)})[0];\n            }\n            if (startingPosition) {\n                if (Game.map.getRoomLinearDistance(startingPosition.pos.roomName, this.container.pos.roomName) > 2) {\n                    console.log(`path too long for miner in ${this.operation.name}`);\n                    return;\n                }\n                let distance = this.pavePath(startingPosition, this.container, 2);\n                if (distance) {\n                    this.memory.distanceToStorage = distance;\n                }\n            }\n        }\n    }\n\n    public finalizeMission() { }\n    public invalidateMissionCache() {\n        this.memory.transportAnalysis = undefined;\n    }\n\n    private minerActions(miner: Agent, order: number) {\n\n        let fleeing = miner.fleeHostiles();\n        if (fleeing) {\n            this.dropEnergy(miner);\n            return;\n        }\n\n        if (!this.hasVision) {\n            miner.travelTo(this.flag);\n            return; // early\n        }\n\n        if (!this.container) {\n            let reserveEnergy = order === 0 && this.minersNeeded > 1;\n            this.buildContainer(miner, this.source, reserveEnergy);\n            return;\n        }\n\n        if (order === 0) {\n            this.leadMinerActions(miner, this.source, this.container);\n            if (!miner.memory.registered && miner.pos.isNearTo(this.source)) {\n                this.registerPrespawn(miner);\n            }\n        } else {\n            if (this.minersNeeded === 1) {\n                this.replaceCurrentMiner(miner, this.container)\n            } else {\n                this.backupMinerActions(miner, this.source, this.container);\n            }\n        }\n    }\n\n    private cartActions(cart: Agent) {\n\n        let fleeing = cart.fleeHostiles();\n        if (fleeing) { return; } // early\n\n        // emergency cpu savings\n        if (Game.cpu.bucket < 1000) { return; }\n\n        let hasLoad = cart.hasLoad();\n        if (!hasLoad) {\n\n            // heal chipped carts\n            if (cart.hits < cart.hitsMax) {\n                let healersInRoom = _.filter(cart.room.find<Creep>(FIND_MY_CREEPS), c => c.getActiveBodyparts(HEAL));\n                if (healersInRoom.length > 0) {\n                    cart.idleOffRoad();\n                    return;\n                }\n                if (cart.room.hostiles.length === 0 && !cart.pos.isNearExit(0)) {\n                    let tower = cart.pos.findClosestByRange(cart.room.findStructures<StructureTower>(STRUCTURE_TOWER));\n                    if (tower) {\n                        tower.heal(cart.creep);\n                        return;\n                    }\n                }\n                if (cart.carryCapacity === 0) {\n                    cart.travelTo(this.storage);\n                    return;\n                }\n            }\n\n            if (!this.container) {\n                cart.idleOffRoad();\n                return;\n            }\n\n            let range = cart.pos.getRangeTo(this.container);\n            if (range > 3) {\n                cart.travelTo(this.container, {offRoad: true});\n                return;\n            }\n\n            if (this.container.store.energy < cart.creep.carryCapacity) {\n                cart.idleNear(this.container, 3);\n                return;\n            }\n\n            let outcome = cart.retrieve(this.container, RESOURCE_ENERGY);\n            if (outcome === OK && cart.carryCapacity > 0) {\n                cart.travelTo(this.storage);\n            }\n            return;\n        }\n\n        let outcome = cart.deliver(this.storage, RESOURCE_ENERGY);\n        if (outcome === OK) {\n            if (cart.creep.ticksToLive < this.analysis.distance * 2) {\n                cart.creep.suicide();\n            } else if (cart.capacityAvailable(this.container)) {\n                cart.travelTo(this.container, {offRoad: true});\n            }\n        }\n    }\n\n    dropEnergy(agent: Agent) {\n        if (agent.creep.carry.energy > 0) {\n            agent.drop(RESOURCE_ENERGY);\n        }\n    }\n\n    buildContainer(miner: Agent, source: Source, reserveEnergy: boolean) {\n        if (miner.pos.isNearTo(source)) {\n            if (miner.carry.energy < miner.carryCapacity || reserveEnergy) {\n                miner.harvest(source);\n            }\n            else {\n                let construction = source.pos.findInRange<ConstructionSite>(FIND_CONSTRUCTION_SITES, 1)[0];\n                if (construction) {\n                    miner.build(construction);\n                }\n            }\n        }\n        else {\n            miner.travelTo(source);\n        }\n    }\n\n    leadMinerActions(miner: Agent, source: Source, container: StructureContainer) {\n        if (miner.pos.inRangeTo(container, 0)) {\n            if (container.hits < container.hitsMax * .90 && miner.carry.energy >= 20) {\n                miner.repair(container);\n            }\n            else if (container.store.energy < container.storeCapacity) {\n                miner.harvest(source);\n            }\n        }\n        else {\n            miner.travelTo(container, {range: 0});\n        }\n    }\n\n    replaceCurrentMiner(miner: Agent, container: StructureContainer) {\n        if (miner.pos.isNearTo(container)) {\n            miner.moveItOrLoseIt(container.pos, \"miner\");\n        }\n        else {\n            miner.travelTo(container);\n        }\n    }\n\n    backupMinerActions(miner: Agent, source: Source, container: StructureContainer) {\n        if (!miner.pos.isNearTo(source) || !miner.pos.isNearTo(container)) {\n            let position = _.filter(container.pos.openAdjacentSpots(), (p: RoomPosition) => p.isNearTo(source))[0];\n            if (position) {\n                miner.travelTo(position);\n            }\n            else {\n                miner.idleNear(container, 3);\n            }\n            return;\n        }\n\n        if (container.hits < container.hitsMax * .90 && miner.carry.energy >= 20) {\n            miner.repair(container);\n        }\n        else {\n            miner.harvest(source);\n        }\n\n        if (miner.carry.energy >= 40) {\n            miner.transfer(container, RESOURCE_ENERGY);\n        }\n    }\n\n    findMinerStorage(): StructureStorage {\n        let destination = Game.flags[this.operation.name + \"_sourceDestination\"];\n        if (destination) {\n            let structure = destination.pos.lookFor(LOOK_STRUCTURES)[0] as StructureStorage;\n            if (structure) {\n                return structure;\n            }\n        }\n\n        if (this.operation.type === \"mining\" || this.operation.type === \"keeper\") {\n            return this.getStorage(this.source.pos);\n        }\n        else {\n            if (this.room.storage && this.room.storage.my) {\n                return this.flag.room.storage;\n            }\n        }\n    }\n\n    findContainer(): StructureContainer {\n        let container = this.source.findMemoStructure<StructureContainer>(STRUCTURE_CONTAINER, 1);\n        if (!container) {\n            this.placeContainer();\n        }\n        return container;\n    }\n\n    private placeContainer() {\n\n        if (this.room.controller.reservation &&\n            /* reserved and not mine */\n            this.room.controller.reservation.username != Game.structures[_.first(Object.keys(Game.structures))].owner.username) {\n            // console.log(`MINER: Unable to place container in ${this.operation.name}, hostile reserved room`);\n            return;\n        }\n\n        let startingPosition: {pos: RoomPosition} = this.findMinerStorage();\n        if (!startingPosition) {\n            startingPosition = this.room.find(FIND_MY_SPAWNS)[0] as StructureSpawn;\n        }\n        if (!startingPosition) {\n            startingPosition = this.room.find<ConstructionSite>(FIND_CONSTRUCTION_SITES,\n                {filter: ( (s: ConstructionSite) => s.structureType === STRUCTURE_SPAWN)})[0];\n        }\n        if (!startingPosition) return;\n\n        if (this.source.pos.findInRange(FIND_CONSTRUCTION_SITES, 1).length > 0) return;\n\n        let ret = PathFinder.search(this.source.pos, [{pos: startingPosition.pos, range: 1}], {\n            maxOps: 4000,\n            swampCost: 2,\n            plainCost: 2,\n            roomCallback: (roomName: string): CostMatrix => {\n                let room = Game.rooms[roomName];\n                if (!room) return;\n\n                let matrix = empire.traveler.getStructureMatrix(room);\n\n                return matrix;\n            }\n        });\n        if (ret.incomplete || ret.path.length === 0) {\n            notifier.log(`path used for container placement in ${this.operation.name} incomplete, please investigate`);\n        }\n\n        let position = ret.path[0];\n        let testPositions = _.sortBy(this.source.pos.openAdjacentSpots(true), (p: RoomPosition) => p.getRangeTo(position));\n        for (let testPosition of testPositions) {\n            let sourcesInRange = testPosition.findInRange(FIND_SOURCES, 1);\n            if (sourcesInRange.length > 1) { continue; }\n            console.log(`MINER: placed container in ${this.operation.name}`);\n            testPosition.createConstructionSite(STRUCTURE_CONTAINER);\n            return;\n        }\n\n        console.log(`MINER: Unable to place container in ${this.operation.name}`);\n    }\n\n    private findDistanceToStorage() {\n        if (!this.memory.distanceToStorage) {\n            let storage = this.findMinerStorage();\n            if (!storage) return;\n            let path = PathFinder.search(storage.pos, {pos: this.source.pos, range: 1}).path;\n            this.memory.distanceToStorage = path.length;\n        }\n        return this.memory.distanceToStorage;\n    }\n\n    get minersNeeded() {\n        if (!this._minersNeeded) {\n            if (!this.memory.positionCount) { this.memory.positionCount = this.source.pos.openAdjacentSpots(true).length; }\n\n            this._minersNeeded = Math.min(this.minersSupported(), this.memory.positionCount);\n        }\n        return this._minersNeeded;\n    }\n\n    get analysis(): TransportAnalysis {\n        if (!this._analysis) {\n            this._analysis = this.cacheTransportAnalysis(this.findDistanceToStorage(), Mission.loadFromSource(this.source));\n        }\n        return this._analysis;\n    }\n\n    private minersSupported(): number {\n        if (this.spawnGroup.maxSpawnEnergy >= 1050 || this.remoteSpawning) {\n            return 1;\n        } else if (this.spawnGroup.maxSpawnEnergy >= 450) {\n            return 2;\n        } else {\n            return 3;\n        }\n    }\n}","import {Mission} from \"./Mission\";\nimport {Operation} from \"../operations/Operation\";\nimport {helper} from \"../../helpers/helper\";\nimport {TransportAnalysis} from \"../../interfaces\";\nimport {PRIORITY_BUILD} from \"../../config/constants\";\nimport {DefenseGuru} from \"../operations/DefenseGuru\";\nimport {Agent} from \"./Agent\";\nexport class BuilderMission extends Mission {\n\n    builders: Agent[];\n    supplyCarts: Agent[];\n    sites: ConstructionSite[];\n    prioritySites: ConstructionSite[];\n    walls: Structure[];\n    remoteSpawn: boolean;\n    activateBoost: boolean;\n    defenseGuru: DefenseGuru;\n\n    memory: {\n        maxHitsToBuild: number\n        max: number\n        transportAnalysis: TransportAnalysis\n        rampartPos: RoomPosition\n        manualTargetId: string\n        manualTargetHits: number\n        prespawn: number\n    };\n    private _analysis: TransportAnalysis;\n\n    /**\n     * Spawns a creep to build construction and repair walls. Construction will take priority over walls\n     * @param operation\n     * @param defenseGuru\n     * @param activateBoost\n     */\n\n    constructor(operation: Operation, defenseGuru: DefenseGuru, activateBoost = false) {\n        super(operation, \"builder\");\n        this.defenseGuru = defenseGuru;\n        this.activateBoost = activateBoost;\n    }\n\n    initMission() {\n        if (this.room !== this.spawnGroup.room) {\n            this.remoteSpawn = true;\n        }\n\n        this.sites = this.room.find<ConstructionSite>(FIND_MY_CONSTRUCTION_SITES);\n        this.prioritySites = _.filter(this.sites, s => PRIORITY_BUILD.indexOf(s.structureType) > -1);\n\n        if (Game.time % 10 === 5) {\n            // this should be a little more cpu-friendly since it basically will only run in missionRoom that has construction\n            for (let site of this.sites) {\n                if (site.structureType === STRUCTURE_RAMPART || site.structureType === STRUCTURE_WALL) {\n                    this.memory.maxHitsToBuild = 2000;\n                    break;\n                }\n            }\n        }\n\n        if (!this.memory.maxHitsToBuild) this.memory.maxHitsToBuild = 2000;\n    }\n\n    maxBuilders = () => {\n        if (this.sites.length === 0 || this.defenseGuru.hostiles.length > 0) {\n            return 0;\n        }\n\n        let potency = this.findBuilderPotency();\n        let builderCost = potency * 100 + Math.ceil(potency / 2) * 50 + 150 * potency;\n        return Math.min(Math.ceil(builderCost / this.spawnGroup.maxSpawnEnergy), 3);\n    };\n\n    maxCarts = () => {\n        if (this.sites.length === 0 || this.defenseGuru.hostiles.length > 0) {\n            return 0;\n        }\n        return this.analysis.cartsNeeded;\n    };\n\n    builderBody = () => {\n        let potency = this.findBuilderPotency();\n        if (this.spawnGroup.maxSpawnEnergy < 550) {\n            return this.bodyRatio(1, 3, .5, 1, potency)\n        }\n\n        let potencyCost = potency * 100 + Math.ceil(potency / 2) * 50;\n        let energyForCarry = this.spawnGroup.maxSpawnEnergy - potencyCost;\n        let cartCarryCount = this.analysis.carryCount;\n        let carryCount = Math.min(Math.floor(energyForCarry / 50), cartCarryCount);\n        if (this.spawnGroup.room === this.room) {\n            return this.workerBody(potency, carryCount, Math.ceil(potency / 2))\n        }\n        else {\n            return this.workerBody(potency, carryCount, potency);\n        }\n    };\n\n    roleCall() {\n\n        let builderMemory;\n        if (this.activateBoost) {\n            builderMemory = {\n                scavanger: RESOURCE_ENERGY,\n                boosts: [RESOURCE_CATALYZED_LEMERGIUM_ACID],\n                allowUnboosted: true\n            };\n        }\n        else {\n            builderMemory = { scavanger: RESOURCE_ENERGY };\n        }\n\n        this.builders = this.headCount(this.name, this.builderBody, this.maxBuilders,\n            {prespawn: this.memory.prespawn, memory: builderMemory });\n        this.builders = _.sortBy(this.builders, (c: Creep) => c.carry.energy);\n\n        let cartMemory = {\n            scavanger: RESOURCE_ENERGY\n        };\n        this.supplyCarts = this.headCount(this.name + \"Cart\",\n            () => this.workerBody(0, this.analysis.carryCount, this.analysis.moveCount), this.maxCarts,\n            {prespawn: this.memory.prespawn, memory: cartMemory });\n    }\n\n    missionActions() {\n        for (let builder of this.builders) {\n            this.builderActions(builder);\n        }\n\n        for (let cart of this.supplyCarts) {\n            this.builderCartActions(cart);\n        }\n    }\n\n    finalizeMission() {\n    }\n\n    invalidateMissionCache() {\n        this.memory.transportAnalysis = undefined;\n        if (Math.random() < 0.01) this.memory.maxHitsToBuild = undefined;\n    }\n\n    private builderActions(builder: Agent) {\n\n        this.registerPrespawn(builder);\n\n        let hasLoad = builder.hasLoad() || this.supplyCarts.length > 0;\n        if (!hasLoad) {\n            builder.procureEnergy();\n            return;\n        }\n\n        // repair the rampart you just built\n        if (this.memory.rampartPos) {\n            let rampart = helper.deserializeRoomPosition(this.memory.rampartPos).lookForStructure(STRUCTURE_RAMPART);\n            if (rampart && rampart.hits < 10000) {\n                if (rampart.pos.inRangeTo(builder, 3)) {\n                    builder.repair(rampart);\n                }\n                else {\n                    builder.travelTo(rampart);\n                }\n                return;\n            }\n            else {\n                this.memory.rampartPos = undefined;\n            }\n        }\n\n        // has energy\n        let closest;\n        if (this.prioritySites.length > 0) {\n            closest = builder.pos.findClosestByRange(this.prioritySites);\n        } else {\n            closest = builder.pos.findClosestByRange(this.sites);\n        }\n\n        if (!closest) {\n            this.buildWalls(builder);\n            return;\n        }\n\n        // has target\n        let range = builder.pos.getRangeTo(closest);\n        if (range <= 3) {\n            let outcome = builder.build(closest);\n            if (outcome === OK) {\n                builder.yieldRoad(closest);\n            }\n            if (outcome === OK && closest.structureType === STRUCTURE_RAMPART) {\n                this.memory.rampartPos = closest.pos;\n            }\n\n            // standing on top of target\n            if (range === 0) {\n                builder.travelTo(this.flag);\n            }\n        }\n        else {\n            builder.travelTo(closest);\n        }\n    }\n\n    private buildWalls(builder: Agent) {\n        let target = this.findMasonTarget(builder);\n        if (!target) {\n            if (builder.room.controller && builder.room.controller.level < 8) {\n                this.upgradeController(builder);\n            }\n            else {\n                builder.idleOffRoad(this.flag);\n            }\n            return;\n        }\n\n        if (builder.pos.inRangeTo(target, 3)) {\n            let outcome = builder.repair(target);\n            if (outcome === OK) {\n                builder.yieldRoad(target);\n            }\n        }\n        else {\n            builder.travelTo(target);\n        }\n    }\n\n    private findMasonTarget(builder: Agent): Structure {\n        let manualTarget = this.findManualTarget();\n        if (manualTarget) return manualTarget;\n\n        if (this.room.hostiles.length > 0 && this.room.hostiles[0].owner.username !== \"Invader\") {\n            if (!this.walls) {\n                this.walls = _(this.room.findStructures(STRUCTURE_RAMPART).concat(this.room.findStructures(STRUCTURE_WALL)))\n                    .filter((s: Structure)=>s.hits)\n                    .sortBy(\"hits\")\n                    .value() as Structure[];\n            }\n            let lowest = this.walls[0];\n            _.pull(this.walls, lowest);\n            if (builder.memory.emergencyRepairId) {\n                let structure = Game.getObjectById(builder.memory.emergencyRepairId) as Structure;\n                if (structure && !builder.pos.inRangeTo(lowest, 3)) {\n                    return structure;\n                }\n                else {\n                    builder.memory.emergencyRepairId = undefined;\n                }\n            }\n            return lowest;\n        }\n\n        if (builder.memory.wallId) {\n            let wall = Game.getObjectById(builder.memory.wallId) as Structure;\n            if (wall && wall.hits < this.memory.maxHitsToBuild) {\n                return wall;\n            }\n            else {\n                builder.memory.wallId = undefined;\n                return this.findMasonTarget(builder);\n            }\n        }\n        else {\n            // look for ramparts under maxHitsToBuild\n            let structures = _.filter(this.room.findStructures(STRUCTURE_RAMPART),\n                (s: Structure) => s.hits < this.memory.maxHitsToBuild * .9);\n            // look for walls under maxHitsToBuild\n            if (structures.length === 0) {\n                structures = _.filter(this.room.findStructures(STRUCTURE_WALL),\n                    (s: Structure) => s.hits < this.memory.maxHitsToBuild * .9);\n            }\n\n            if (structures.length === 0) {\n                // increase maxHitsToBuild if there are walls/ramparts in missionRoom and re-call function\n                if (this.room.findStructures(STRUCTURE_RAMPART).concat(this.room.findStructures(STRUCTURE_WALL).filter((s: Structure)=>s.hits)).length > 0) {\n                    // TODO: seems to produce some pretty uneven walls, find out why\n                    this.memory.maxHitsToBuild += Math.pow(10, Math.floor(Math.log(this.memory.maxHitsToBuild) / Math.log(10)));\n                    return this.findMasonTarget(builder);\n                }\n                // do nothing if there are no walls/ramparts in missionRoom\n            }\n\n            let closest = builder.pos.findClosestByRange(structures) as Structure;\n            if (closest) {\n                builder.memory.wallId = closest.id;\n                return closest;\n            }\n        }\n    }\n\n    private findManualTarget() {\n        if (this.memory.manualTargetId) {\n            let target = Game.getObjectById(this.memory.manualTargetId) as Structure;\n            if (target && target.hits < this.memory.manualTargetHits) {\n                return target;\n            }\n            else {\n                this.memory.manualTargetId = undefined;\n                this.memory.manualTargetHits = undefined;\n            }\n        }\n    }\n\n    private upgradeController(builder: Agent) {\n        if (builder.pos.inRangeTo(builder.room.controller, 3)) {\n            builder.upgradeController(builder.room.controller);\n            builder.yieldRoad(builder.room.controller);\n        }\n        else {\n            builder.travelTo(builder.room.controller);\n        }\n    }\n\n    private findBuilderPotency() {\n        if (this.room.storage) {\n            if (this.room.storage.store.energy < 50000) {\n                return 1;\n            } else {\n                return Math.min(Math.floor(this.room.storage.store.energy / 7500), 10);\n            }\n        } else {\n           return this.room.find(FIND_SOURCES).length * 2\n        }\n    }\n\n    private builderCartActions(cart: Agent) {\n\n        let suppliedAgent = _.head(this.builders);\n        if (!suppliedAgent) {\n            cart.idleOffRoad(this.flag);\n            return;\n        }\n\n        let hasLoad = cart.hasLoad();\n        if (!hasLoad) {\n            cart.procureEnergy(suppliedAgent);\n            return;\n        }\n\n        let rangeToBuilder = cart.pos.getRangeTo(suppliedAgent);\n        if (rangeToBuilder > 3) {\n            cart.travelTo(suppliedAgent);\n            return;\n        }\n\n        let overCapacity = cart.carry.energy > suppliedAgent.carryCapacity - suppliedAgent.carry.energy;\n        if (suppliedAgent.carry.energy > suppliedAgent.carryCapacity * .5 && overCapacity) {\n            cart.yieldRoad(suppliedAgent);\n            return;\n        }\n\n        if (rangeToBuilder > 1) {\n            cart.travelTo(suppliedAgent);\n            return;\n        }\n\n        cart.transfer(suppliedAgent.creep, RESOURCE_ENERGY);\n        if (!overCapacity && this.room.storage) {\n            cart.travelTo(this.room.storage)\n        }\n    }\n\n    get analysis(): TransportAnalysis {\n        if (!this._analysis) {\n            let potency = this.findBuilderPotency();\n            let distance = 20;\n            if (this.room.storage) {\n                distance = 10;\n            }\n            this._analysis = this.cacheTransportAnalysis(distance, potency * 5);\n        }\n        return this._analysis;\n    }\n}\n","import {TransportAnalysis} from \"../../interfaces\";\nimport {Operation} from \"../operations/Operation\";\nimport {Mission} from \"./Mission\";\nimport {LOADAMOUNT_MINERAL} from \"../../config/constants\";\nimport {helper} from \"../../helpers/helper\";\nimport {Agent} from \"./Agent\";\nimport {empire} from \"../../helpers/loopHelper\";\nexport class GeologyMission extends Mission {\n\n    geologists: Agent[];\n    carts: Agent[];\n    repairers: Agent[];\n    paver: Agent;\n    mineral: Mineral;\n    store: StructureStorage | StructureTerminal;\n    analysis: TransportAnalysis;\n    container: StructureContainer;\n\n    memory: {\n        distanceToStorage: number;\n        distanceToSpawn: number;\n        builtExtractor: boolean;\n        bestBody: string[];\n        roadRepairIds: string[];\n        storageId: string;\n        transportAnalysis: TransportAnalysis;\n        containerPosition: RoomPosition;\n        cartWaitPosition: RoomPosition;\n    };\n\n    constructor(operation: Operation, storeStructure?: StructureStorage | StructureTerminal) {\n        super(operation, \"geology\");\n        this.store = storeStructure;\n    }\n\n    initMission() {\n        if (!this.hasVision) return;\n\n        this.mineral = this.room.find<Mineral>(FIND_MINERALS)[0];\n        if (!this.store) this.store = this.getStorage(this.mineral.pos);\n        if (!this.store) return;\n        this.mineralStats();\n\n        if ((!this.room.controller || this.room.controller.level >= 7) && !this.memory.builtExtractor) {\n            let extractor = this.mineral.pos.lookForStructure(STRUCTURE_EXTRACTOR);\n            if (!extractor) {\n                this.mineral.pos.createConstructionSite(STRUCTURE_EXTRACTOR);\n            }\n            this.memory.builtExtractor = true;\n        }\n\n        this.distanceToSpawn = this.findDistanceToSpawn(this.mineral.pos);\n\n        if (!this.memory.bestBody) {\n            this.memory.bestBody = this.calculateBestBody();\n        }\n\n        if (this.mineral.mineralAmount === 0 && this.mineral.ticksToRegeneration > 1000 &&\n            this.mineral.ticksToRegeneration < MINERAL_REGEN_TIME - 1000) {\n            return; // early\n        }\n\n        this.container = this.mineral.findMemoStructure(STRUCTURE_CONTAINER, 1) as StructureContainer;\n        if (!this.container && this.memory.builtExtractor &&\n            (this.mineral.ticksToRegeneration < 1000 || this.mineral.mineralAmount > 0)) {\n            this.buildContainer();\n        }\n        this.analysis = this.cacheTransportAnalysis(this.memory.distanceToStorage, LOADAMOUNT_MINERAL);\n    }\n\n    private geoBody = () => {\n        if (this.room.controller && this.room.controller.my) {\n            return this.memory.bestBody;\n        } else {\n            return this.workerBody(33, 0, 17);\n        }\n    };\n\n    private getMaxGeo = () => {\n        if (this.hasVision && this.container && this.mineral.mineralAmount > 0 && this.memory.builtExtractor) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    };\n\n    private getMaxCarts = () => this.getMaxGeo() > 0 && this.analysis.cartsNeeded ? 1 : 0;\n    private getMaxRepairers = () => {\n        if (this.mineral.mineralAmount > 5000 && this.container && this.container.hits < 50000) {\n            return 1;\n        } else {\n            return 0;\n        }\n    };\n\n    public roleCall() {\n\n        this.geologists = this.headCount(\"geologist\", this.geoBody, this.getMaxGeo, {prespawn: this.distanceToSpawn});\n\n        this.carts = this.headCount(\"geologyCart\",\n            () => this.workerBody(0, this.analysis.carryCount, this.analysis.moveCount),\n            this.getMaxCarts, {prespawn: this.distanceToSpawn});\n\n        let maxRepairers =\n        this.repairers = this.headCount(\"repairer\", () => this.workerBody(5, 15, 10), this.getMaxRepairers);\n\n        if (this.memory.roadRepairIds) {\n            this.paver = this.spawnPaver();\n        }\n    }\n\n    missionActions() {\n        for (let geologist of this.geologists) {\n            this.geologistActions(geologist);\n        }\n\n        for (let cart of this.carts) {\n            if (this.mineral.mineralAmount > 0) {\n                this.cartActions(cart);\n            }\n            else {\n                this.cleanupCartActions(cart);\n            }\n        }\n\n        for (let repairer of this.repairers) {\n            this.repairActions(repairer);\n        }\n\n        if (this.paver) {\n            this.paverActions(this.paver);\n        }\n\n        if (this.memory.builtExtractor) {\n            let distance = this.pavePath(this.store, this.mineral, 2);\n            if (distance) {\n                this.memory.distanceToStorage = distance;\n            }\n        }\n    }\n\n    finalizeMission() {\n    }\n\n    invalidateMissionCache() {\n        if (Math.random() < .01) {\n            this.memory.storageId = undefined;\n            this.memory.transportAnalysis = undefined;\n            this.memory.distanceToStorage = undefined;\n            this.memory.builtExtractor = undefined;\n            this.memory.distanceToSpawn = undefined;\n        }\n    }\n\n    private calculateBestBody() {\n        let bestMineAmount = 0;\n        let bestMovePartsCount = 0;\n        let bestWorkPartsCount = 0;\n\n        for (let i = 1; i < 50; i++) {\n            let movePartsCount = i;\n            let workPartsCount = MAX_CREEP_SIZE - movePartsCount;\n            let ticksPerMove = Math.ceil(1 / (movePartsCount * 2 / workPartsCount));\n            let minePerTick = workPartsCount;\n            let travelTime = ticksPerMove * this.distanceToSpawn;\n            let mineTime = CREEP_LIFE_TIME - travelTime;\n            let mineAmount = minePerTick * mineTime;\n\n            if (mineAmount > bestMineAmount) {\n                bestMineAmount = mineAmount;\n                bestMovePartsCount = movePartsCount;\n                bestWorkPartsCount = workPartsCount;\n            }\n        }\n\n        return this.workerBody(bestWorkPartsCount, 0, bestMovePartsCount);\n    }\n\n    private geologistActions(geologist: Agent) {\n\n        let fleeing = geologist.fleeHostiles();\n        if (fleeing) return; // early\n\n        if (!this.container) {\n            if (!geologist.pos.isNearTo(this.flag)) {\n                geologist.travelTo(this.flag);\n            }\n            return; // early\n        }\n\n        if (!geologist.pos.inRangeTo(this.container, 0)) {\n            geologist.moveItOrLoseIt(this.container.pos, \"geologist\");\n            return; // early\n        }\n\n        if (this.mineral.mineralAmount === 0) {\n            if (this.container.store[this.mineral.mineralType] === 0) {\n                // break down container\n                geologist.dismantle(this.container);\n            }\n            return; // early\n        }\n\n        if (!this.container.store[this.mineral.mineralType] ||\n            this.container.store[this.mineral.mineralType] < this.container.storeCapacity - 33) {\n            if (Game.time % 6 === 0) geologist.harvest(this.mineral);\n        }\n\n    }\n\n    private cleanupCartActions(cart: Agent) {\n\n        let fleeing = cart.fleeHostiles();\n        if (fleeing) return; // early\n\n        if (_.sum(cart.carry) === cart.carryCapacity) {\n            if (cart.pos.isNearTo(this.store)) {\n                cart.transferEverything(this.store);\n            }\n            else {\n                cart.travelTo(this.store);\n            }\n            return; // early;\n        }\n\n        if (this.container && _.sum(this.container.store) > 0) {\n            if (cart.pos.isNearTo(this.container)) {\n                if (this.container.store.energy > 0) {\n                    cart.withdraw(this.container, RESOURCE_ENERGY);\n                }\n                else if (this.container.store[this.mineral.mineralType] > 0) {\n                    cart.withdraw(this.container, this.mineral.mineralType);\n                }\n            }\n            else {\n                cart.travelTo(this.container);\n            }\n        }\n        else {\n            if (_.sum(cart.carry) > 0) {\n                if (cart.pos.isNearTo(this.store)) {\n                    cart.transferEverything(this.store);\n                }\n                else {\n                    cart.travelTo(this.store);\n                }\n                return; // early;\n            }\n\n            let spawn = this.spawnGroup.spawns[0];\n            if (cart.pos.isNearTo(spawn)) {\n                spawn.recycleCreep(cart.creep);\n                let witness = this.room.find<Creep>(FIND_MY_CREEPS)[0];\n                if (witness) {\n                    witness.say(\"valhalla!\");\n                }\n            }\n            else {\n                cart.travelTo(spawn);\n            }\n            return; // early\n        }\n    }\n\n    private buildContainer() {\n        if (this.mineral.pos.findInRange(FIND_CONSTRUCTION_SITES, 1).length === 0) {\n            let ret = empire.traveler.findTravelPath(this.mineral, this.store);\n            if (ret.incomplete) {\n                console.log(`MINER: bad path for finding container position ${this.flag.pos.roomName}`);\n                return;\n            }\n            console.log(\"GEO: building container in\", this.operation.name);\n            ret.path[0].createConstructionSite(STRUCTURE_CONTAINER);\n        }\n    }\n\n    private cartActions(cart: Agent) {\n\n        let fleeing = cart.fleeHostiles();\n        if (fleeing) return; // early\n\n        let hasLoad = cart.hasLoad();\n        if (!hasLoad) {\n            if (!this.container) {\n                if (!cart.pos.isNearTo(this.flag)) {\n                    cart.travelTo(this.flag);\n                }\n                return;\n            }\n\n            if (_.sum(this.container.store) < cart.carryCapacity &&\n                this.container.pos.lookFor(LOOK_CREEPS).length === 0) {\n                cart.idleNear(this.container, 3);\n                return;\n            }\n\n            if (cart.pos.isNearTo(this.container)) {\n                if (this.container.store.energy > 0) {\n                    cart.withdraw(this.container, RESOURCE_ENERGY);\n                }\n                else {\n                    let outcome = cart.withdrawIfFull(this.container, this.mineral.mineralType);\n                    if (outcome === OK && this.container.store[this.mineral.mineralType] >= cart.carryCapacity) {\n                        cart.travelTo(this.store);\n                    }\n                }\n            }\n            else {\n                cart.travelTo(this.container);\n            }\n            return; // early\n        }\n\n        if (cart.pos.isNearTo(this.store)) {\n            let outcome = cart.transferEverything(this.store);\n            if (outcome === OK && cart.ticksToLive < this.analysis.distance) {\n                cart.suicide();\n            }\n            else if (outcome === OK) {\n                cart.travelTo(this.container);\n            }\n\n        }\n        else {\n            cart.travelTo(this.store);\n        }\n    }\n\n    private repairActions(repairer: Agent) {\n        let fleeing = repairer.fleeHostiles();\n        if (fleeing) return;\n\n        if (repairer.room.name !== this.flag.pos.roomName || repairer.pos.isNearExit(0)) {\n            repairer.travelTo(this.flag);\n            return;\n        }\n\n        let hasLoad = repairer.hasLoad();\n        if (!hasLoad) {\n            repairer.procureEnergy(this.container);\n            return;\n        }\n\n        if (!this.container || this.container.hits === this.container.hitsMax) {\n            repairer.idleOffRoad(this.flag);\n            return;\n        }\n\n        if (repairer.pos.inRangeTo(this.container, 3)) {\n            repairer.repair(this.container);\n            repairer.yieldRoad(this.container);\n        }\n        else {\n            repairer.travelTo(this.container);\n        }\n    }\n\n    mineralStats() {\n        if (!Game.cache[this.mineral.mineralType]) Game.cache[this.mineral.mineralType] = 0;\n        Game.cache[this.mineral.mineralType]++;\n    }\n}","import {Mission} from \"./Mission\";\nimport {Operation} from \"../operations/Operation\";\nimport {TransportAnalysis} from \"../../interfaces\";\nimport {helper} from \"../../helpers/helper\";\nimport {empire} from \"../../helpers/loopHelper\";\nimport {RESERVE_AMOUNT, NEED_ENERGY_THRESHOLD, SUPPLY_ENERGY_THRESHOLD} from \"../../config/constants\";\nimport {Agent} from \"./Agent\";\nexport class UpgradeMission extends Mission {\n\n    linkUpgraders: Agent[];\n    batterySupplyCarts: Agent[];\n    influxCarts: Agent[];\n    paver: Agent;\n\n    battery: StructureContainer | StructureStorage | StructureLink;\n    boost: boolean;\n    allowUnboosted: boolean;\n    remoteSpawning: boolean;\n\n    memory: {\n        batteryPosition: RoomPosition\n        cartCount: number\n        positionCount: number\n        roadRepairIds: string[]\n        transportAnalysis: TransportAnalysis\n        potency: number\n        max: number\n    };\n    private _potencyPerCreep: number;\n\n    /**\n     * Controller upgrading. Will look for a suitable controller battery (StructureContainer, StructureStorage,\n     * StructureLink) and if one isn't found it will spawn SupplyMission to bring energy to upgraders\n     * @param operation\n     * @param boost\n     * @param allowSpawn\n     * @param allowUnboosted\n     */\n\n    constructor(operation: Operation, boost: boolean, allowSpawn = true, allowUnboosted = true) {\n        super(operation, \"upgrade\", allowSpawn);\n        this.boost = boost;\n        this.allowUnboosted = allowUnboosted;\n    }\n\n    initMission() {\n        if (!this.memory.cartCount) { this.memory.cartCount = 0; }\n        if (this.spawnGroup.room !== this.room) {\n            this.remoteSpawning = true;\n            this.distanceToSpawn = Game.map.getRoomLinearDistance(this.spawnGroup.room.name, this.room.name);\n        }\n        else {\n            this.distanceToSpawn = this.findDistanceToSpawn(this.room.controller.pos);\n        }\n        this.battery = this.findControllerBattery();\n    }\n\n    linkUpgraderBody = () => {\n\n        if (this.memory.max !== undefined) {\n            return this.workerBody(30, 4, 15);\n        }\n\n        if (this.remoteSpawning) {\n            return this.workerBody(this.potencyPerCreep, 4, this.potencyPerCreep);\n        }\n\n        if (this.spawnGroup.maxSpawnEnergy < 800) {\n            return this.bodyRatio(2, 1, 1, 1);\n        }\n        else {\n            return this.workerBody(this.potencyPerCreep, 4, Math.ceil(this.potencyPerCreep / 2));\n        }\n    };\n\n    getMax = () => this.findMaxUpgraders(this.totalPotency, this.potencyPerCreep);\n\n    roleCall() {\n\n        // memory\n        let memory;\n        if (this.boost) { //|| empire.network.hasAbundance(RESOURCE_CATALYZED_GHODIUM_ACID)) {\n            memory = {boosts: [RESOURCE_CATALYZED_GHODIUM_ACID], allowUnboosted: this.allowUnboosted};\n        }\n\n        if (this.battery instanceof StructureContainer) {\n            let analysis = this.cacheTransportAnalysis(25, this.totalPotency);\n            this.batterySupplyCarts = this.headCount(\"upgraderCart\",\n                () => this.workerBody(0, analysis.carryCount, analysis.moveCount),\n                () => Math.min(analysis.cartsNeeded, 3), { prespawn: this.distanceToSpawn,});\n        }\n\n        this.linkUpgraders = this.headCount(\"upgrader\", this.linkUpgraderBody, this.getMax, {\n            prespawn: this.distanceToSpawn,\n            memory: memory\n        } );\n\n        if (this.memory.roadRepairIds && !this.remoteSpawning) {\n            this.paver = this.spawnPaver();\n        }\n\n        let maxInfluxCarts = 0;\n        let influxMemory;\n        if (this.remoteSpawning) {\n            if (this.room.storage && this.room.storage.store.energy < NEED_ENERGY_THRESHOLD\n                && this.spawnGroup.room.storage && this.spawnGroup.room.storage.store.energy > SUPPLY_ENERGY_THRESHOLD) {\n                maxInfluxCarts = 10;\n                influxMemory = { originId: this.spawnGroup.room.storage.id };\n            }\n        }\n        let influxCartBody = () => this.workerBody(0,25,25);\n        this.influxCarts = this.headCount(\"influxCart\", influxCartBody, () => maxInfluxCarts,\n            { memory: influxMemory, skipMoveToRoom: true });\n    }\n\n    missionActions() {\n        let index = 0;\n        for (let upgrader of this.linkUpgraders) {\n            this.linkUpgraderActions(upgrader, index);\n            index++;\n        }\n\n        if (this.paver) {\n            this.paverActions(this.paver);\n        }\n\n        if (this.batterySupplyCarts) {\n            for (let cart of this.batterySupplyCarts) {\n                this.batterySupplyCartActions(cart);\n            }\n        }\n\n        for (let influxCart of this.influxCarts) {\n            this.influxCartActions(influxCart);\n        }\n\n        if (this.battery) {\n            let startingPosition: {pos: RoomPosition} = this.room.storage;\n            if (!startingPosition) {\n                startingPosition = this.room.find<StructureSpawn>(FIND_MY_SPAWNS)[0];\n            }\n            if (startingPosition) {\n                this.pavePath(startingPosition, this.battery, 1, true);\n            }\n        }\n    }\n\n    finalizeMission() {\n    }\n\n    invalidateMissionCache() {\n        if (Math.random() < .01) this.memory.positionCount = undefined;\n        if (Math.random() < .1) this.memory.transportAnalysis = undefined;\n    }\n\n    private linkUpgraderActions(upgrader: Agent, index: number) {\n\n        let battery = this.room.controller.getBattery();\n        if (!battery) {\n            upgrader.idleOffRoad(this.flag);\n            return; // early\n        }\n\n        let outcome;\n        if (battery instanceof StructureContainer && battery.hits < battery.hitsMax * 0.8) {\n            outcome = upgrader.repair(battery);\n        }\n        else {\n            outcome = upgrader.upgradeController(this.room.controller);\n        }\n        let myPosition = this.room.controller.getUpgraderPositions()[index];\n        if (myPosition) {\n            let range = upgrader.pos.getRangeTo(myPosition);\n            if (range > 0) {\n                upgrader.travelTo(myPosition, {range: 0});\n            }\n        }\n        else {\n            if (upgrader.pos.inRangeTo(battery, 3)) {\n                upgrader.yieldRoad(battery);\n            }\n            else {\n                upgrader.travelTo(battery);\n            }\n        }\n\n        if (upgrader.carry[RESOURCE_ENERGY] < upgrader.carryCapacity / 4) {\n            upgrader.withdraw(battery, RESOURCE_ENERGY);\n        }\n    }\n\n    private findControllerBattery() {\n        let battery = this.room.controller.getBattery();\n\n        if (battery instanceof StructureContainer && this.room.controller.level >= 5) {\n            battery.destroy();\n            return;\n        }\n\n        if (battery instanceof StructureLink && this.room.controller.level < 5) {\n            battery.destroy();\n            return;\n        }\n\n        if (!battery) {\n            let spawn = this.room.find<StructureSpawn>(FIND_MY_SPAWNS)[0];\n            if (!spawn) return;\n            if (!this.memory.batteryPosition) {\n                this.memory.batteryPosition = this.findBatteryPosition(spawn);\n                if (!this.memory.batteryPosition) return;\n            }\n            let structureType = STRUCTURE_LINK;\n            if (this.room.controller.level < 5) {\n                structureType = STRUCTURE_CONTAINER;\n            }\n            let position = helper.deserializeRoomPosition(this.memory.batteryPosition);\n            if (position.lookFor(LOOK_CONSTRUCTION_SITES).length > 0) return;\n            let outcome = position.createConstructionSite(structureType);\n            console.log(`UPGRADE: placing battery in ${this.operation.name}, outcome: ${outcome}, ${position}`);\n        }\n\n        return battery;\n    }\n\n    private findBatteryPosition(spawn: StructureSpawn): RoomPosition {\n        let path = this.findPavedPath(spawn.pos, this.room.controller.pos, 1);\n        let positionsInRange = this.room.controller.pos.findInRange(path, 3);\n        positionsInRange = _.sortBy(positionsInRange, (pos: RoomPosition) => pos.getRangeTo(spawn.pos));\n\n        let mostSpots = 0;\n        let bestPositionSoFar;\n        for (let position of positionsInRange) {\n            let sourcesInRange = position.findInRange(FIND_SOURCES, 2);\n            if (sourcesInRange.length > 0) continue;\n            let openSpotCount = _.filter(position.openAdjacentSpots(true),\n                (pos: RoomPosition) => pos.getRangeTo(this.room.controller) <= 3).length;\n            if (openSpotCount >= 5) return position;\n            else if (openSpotCount > mostSpots) {\n                mostSpots = openSpotCount;\n                bestPositionSoFar = position;\n            }\n        }\n\n        if (bestPositionSoFar) {\n            return bestPositionSoFar;\n        }\n        else {\n            console.log(`couldn't find controller battery position in ${this.operation.name}`);\n        }\n    }\n\n    private batterySupplyCartActions(cart: Agent) {\n        let controllerBattery = this.battery as StructureContainer;\n        let hasLoad = cart.hasLoad();\n        if (!hasLoad) {\n            cart.procureEnergy(controllerBattery);\n            return;\n        }\n\n        let rangeToBattery = cart.pos.getRangeTo(controllerBattery);\n        if (rangeToBattery > 3) {\n            cart.travelTo(controllerBattery);\n            return;\n        }\n\n        if (controllerBattery.store.energy === controllerBattery.storeCapacity) {\n            cart.yieldRoad(controllerBattery);\n            return;\n        }\n\n        if (rangeToBattery > 1) {\n            cart.travelTo(controllerBattery);\n            return;\n        }\n\n        cart.transfer(controllerBattery, RESOURCE_ENERGY);\n    }\n\n    private influxCartActions(influxCart: Agent) {\n\n        let originStorage = Game.getObjectById<StructureStorage>(influxCart.memory.originId);\n        if (!originStorage) {\n            influxCart.idleOffRoad(this.flag);\n            return;\n        }\n\n        let hasLoad = influxCart.hasLoad();\n        if (!hasLoad) {\n            if (influxCart.pos.isNearTo(originStorage)) {\n                influxCart.withdraw(originStorage, RESOURCE_ENERGY);\n                influxCart.travelTo(this.room.storage, {ignoreRoads: true});\n            }\n            else {\n                influxCart.travelTo(originStorage, {ignoreRoads: true});\n            }\n            return;\n        }\n\n        if (influxCart.pos.isNearTo(this.room.storage)) {\n            influxCart.transfer(this.room.storage, RESOURCE_ENERGY);\n            influxCart.travelTo(originStorage, {ignoreRoads: true});\n        }\n        else {\n            influxCart.travelTo(this.room.storage, {ignoreRoads: true});\n        }\n    }\n\n    private findMaxUpgraders(totalPotency: number, potencyPerCreep: number): number {\n        if (!this.battery) return 0;\n\n        if (this.memory.max !== undefined) {\n            console.log(`overriding max in ${this.operation.name}`);\n            return this.memory.max;\n        }\n\n        let max = Math.min(Math.floor(totalPotency / potencyPerCreep), 5);\n        if (this.room.controller.getUpgraderPositions()) {\n            max = Math.min(this.room.controller.getUpgraderPositions().length, max)\n        }\n\n        return max\n    }\n\n    get potencyPerCreep(): number {\n        if (!this._potencyPerCreep) {\n            let potencyPerCreep;\n            if (this.remoteSpawning) {\n                potencyPerCreep = Math.min(this.totalPotency, 23)\n            }\n            else {\n                let unitCost = 125;\n                potencyPerCreep = Math.min(Math.floor((this.spawnGroup.maxSpawnEnergy - 200) / unitCost), 30, this.totalPotency);\n            }\n            this._potencyPerCreep = potencyPerCreep;\n        }\n        return this._potencyPerCreep;\n    }\n\n    get totalPotency(): number {\n        if (!this.battery || this.room.hostiles.length > 0) return 0;\n\n        if (!this.memory.potency || Game.time % 10 === 0) {\n            if (this.room.controller.level === 8) {\n                if (this.room.storage && this.room.storage.store.energy > NEED_ENERGY_THRESHOLD) {\n                    return 15;\n                }\n                else {\n                    return 1;\n                }\n            }\n\n            if (this.room.find(FIND_MY_CONSTRUCTION_SITES).length > 0 &&\n                (!this.room.storage || this.room.storage.store.energy < 50000)) {\n                return 1;\n            }\n\n            let storageCapacity;\n            if (this.room.storage) {\n                storageCapacity = Math.floor(this.room.storage.store.energy / 1500);\n            }\n\n            if (this.battery instanceof StructureLink && this.room.storage) {\n                let cooldown = this.battery.pos.getRangeTo(this.room.storage) + 3;\n                let linkCount = this.room.storage.pos.findInRange(this.room.findStructures<StructureLink>(STRUCTURE_LINK), 2).length;\n                return Math.min(Math.floor(((LINK_CAPACITY * .97) * linkCount) / cooldown), storageCapacity);\n            }\n            else if (this.battery instanceof StructureContainer) {\n                if (this.room.storage) return storageCapacity;\n                return this.room.find(FIND_SOURCES).length * 10;\n            }\n            else {\n                console.log(`unrecognized controller battery type in ${this.operation.name}, ${this.battery.structureType}`);\n                return 0;\n            }\n        }\n\n        return this.memory.potency;\n    }\n}\n","import {SeedData, SeedSelection, Coord} from \"../interfaces\";\r\nimport {helper} from \"../helpers/helper\";\r\nexport class SeedAnalysis {\r\n\r\n    data: SeedData;\r\n    room: Room;\r\n\r\n    constructor(room: Room, seedData: SeedData) {\r\n        this.data = seedData;\r\n        this.room = room;\r\n    }\r\n\r\n    run(staticStructures?: {[structureType: string]: Coord[]}, layoutType?: string): SeedSelection {\r\n\r\n        let layoutTypes;\r\n        if (layoutType) {\r\n            layoutTypes = [layoutType];\r\n        }\r\n        else {\r\n            layoutTypes = [\"quad\", \"flex\"];\r\n        }\r\n\r\n        for (let type of layoutTypes) {\r\n            if (!this.data.seedScan[type]) {\r\n                this.findSeeds(type);\r\n            }\r\n\r\n            if (this.data.seedScan[type].length > 0) {\r\n                if (staticStructures) {\r\n                    let result = this.findByStructures(type, staticStructures);\r\n                    if (result) return result;\r\n                }\r\n                else {\r\n                    return this.selectSeed(type, this.data.seedScan[type]);\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(`No viable seeds in ${this.room.name}`)\r\n    }\r\n\r\n    private findSeeds(seedType: string) {\r\n\r\n        let radius;\r\n        let wallMargin;\r\n        let taper;\r\n        if (seedType === \"quad\") {\r\n            radius = 6;\r\n            wallMargin = 0;\r\n            taper = 1;\r\n        }\r\n        else if (seedType === \"flex\") {\r\n            radius = 4;\r\n            wallMargin = 1;\r\n            taper = 4;\r\n        }\r\n\r\n        let requiredWallOffset = 2;\r\n        let totalMargin = requiredWallOffset + radius + wallMargin;\r\n        if (!this.data.seedScan[seedType]) {\r\n            console.log(`AUTO: initiating seed scan: ${seedType}`);\r\n            this.data.seedScan[seedType] = [];\r\n        }\r\n\r\n        let indexX = totalMargin;\r\n        while (indexX <= 49 - totalMargin) {\r\n            let indexY = totalMargin;\r\n            while (indexY <= 49 - totalMargin) {\r\n                let area = this.room.lookForAtArea(LOOK_TERRAIN,\r\n                    indexY - radius, indexX - radius, indexY + radius, indexX + radius) as LookAtResultMatrix;\r\n\r\n                let foundSeed = this.checkArea(indexX, indexY, radius, taper, area);\r\n                if (foundSeed) {\r\n                    this.data.seedScan[seedType].push({x: indexX, y: indexY});\r\n                }\r\n                indexY++;\r\n            }\r\n            indexX++;\r\n        }\r\n\r\n        console.log(`found ${this.data.seedScan[seedType].length} ${seedType} seeds`);\r\n        if (this.data.seedScan[seedType].length > 0) {\r\n            this.data.seedScan[seedType] = _.sortBy(this.data.seedScan[seedType], (c: Coord) => {\r\n                // sort by distance to controller\r\n                return this.room.controller.pos.getRangeTo(new RoomPosition(c.x, c.y, this.room.name));\r\n            });\r\n        }\r\n    }\r\n\r\n    checkArea(xOrigin: number, yOrigin: number, radius: number, taper: number, area: LookAtResultMatrix) {\r\n        for (let xDelta = -radius; xDelta <= radius; xDelta++) {\r\n            for (let yDelta = -radius; yDelta <= radius; yDelta++) {\r\n                if (Math.abs(xDelta) + Math.abs(yDelta) > radius * 2 - taper) continue;\r\n                if (area[yOrigin + yDelta][xOrigin + xDelta][0] === \"wall\") {\r\n                    console.log(`x: ${xOrigin} y: ${yOrigin} disqualified due to wall at ${xOrigin + xDelta}, ${yOrigin + yDelta}`);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // check source proximity\r\n        let originPosition = new RoomPosition(xOrigin, yOrigin, this.room.name);\r\n        for (let source of this.room.find<Source>(FIND_SOURCES)) {\r\n            if (originPosition.inRangeTo(source, radius + 2)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private selectSeed(seedType: string, seeds: Coord[]): SeedSelection {\r\n        let storageDelta;\r\n        if (seedType === \"quad\") {\r\n            storageDelta = {x: 0, y: 4}\r\n        }\r\n        else if (seedType === \"flex\") {\r\n            storageDelta = {x: 0, y: -3}\r\n        }\r\n        else {\r\n            console.log(\"unrecognized seed type\");\r\n            return;\r\n        }\r\n\r\n        if (!this.data.seedSelectData) {\r\n            this.data.seedSelectData = {\r\n                index: 0,\r\n                rotation: 0,\r\n                best: { seedType: seedType, origin: undefined, rotation: undefined, energyPerDistance: 0 }\r\n            }\r\n        }\r\n\r\n        let data = this.data.seedSelectData;\r\n        if (data.rotation > 3) {\r\n            data.index++;\r\n            data.rotation = 0;\r\n        }\r\n\r\n        if (data.index >= seeds.length) {\r\n            if (data.best.origin) {\r\n                console.log(`${this.room.name} determined best seed, ${data.best.seedType} at ${data.best.origin.x},${data.best.origin.y} with rotation ${data.rotation}`);\r\n                this.data.seedSelectData = undefined;\r\n                return data.best;\r\n            }\r\n            else {\r\n                console.log(`unable to find suitable seed selection in ${this.room.name}`);\r\n            }\r\n        }\r\n\r\n        let storagePosition = helper.coordToPosition(storageDelta,\r\n            new RoomPosition(seeds[data.index].x, seeds[data.index].y, this.room.name), data.rotation);\r\n        let energyPerDistance = 0;\r\n        for (let sourceDatum of this.data.sourceData) {\r\n            let sourcePosition = helper.deserializeRoomPosition(sourceDatum.pos);\r\n            let ret = PathFinder.search(storagePosition, [{pos: sourcePosition, range: 1}], {\r\n                swampCost: 1,\r\n                maxOps: 4000,\r\n            });\r\n\r\n            let pathLength = 100;\r\n            if (!ret.incomplete) {\r\n                pathLength = Math.max(ret.path.length, 50);\r\n            }\r\n\r\n            energyPerDistance += sourceDatum.amount / pathLength;\r\n        }\r\n\r\n        if (energyPerDistance > data.best.energyPerDistance) {\r\n            console.log(`${this.room.name} found better seed, energyPerDistance: ${energyPerDistance}`);\r\n            data.best = { seedType: seedType, origin: seeds[data.index], rotation: data.rotation,\r\n                energyPerDistance: energyPerDistance}\r\n        }\r\n\r\n        // update rotation for next tick\r\n        data.rotation++\r\n    }\r\n\r\n    private findBySpawn(seedType: string, spawn: StructureSpawn): SeedSelection {\r\n        let spawnCoords: Coord[];\r\n        if (seedType === \"quad\") {\r\n            spawnCoords = [{x: 2, y: 0}, {x: 0, y: -2}, {x: -2, y: 0}];\r\n        }\r\n        else { // seedType === \"flex\"\r\n            spawnCoords = [{x: -2, y: 1}, {x: -1, y: 2}, {x: 0, y: 3}];\r\n        }\r\n\r\n        let seeds = this.data.seedScan[seedType];\r\n        for (let seed of seeds) {\r\n            let centerPosition = new RoomPosition(seed.x, seed.y, this.room.name);\r\n            for (let coord of spawnCoords) {\r\n                for (let rotation = 0; rotation <= 3; rotation++) {\r\n                    let testPosition = helper.coordToPosition(coord, centerPosition, rotation);\r\n                    if (spawn.pos.inRangeTo(testPosition, 0)) {\r\n                        console.log(`seed: ${JSON.stringify(seed)}, centerPos: ${centerPosition}, rotation: ${rotation},` +\r\n                            `\\ncoord: ${JSON.stringify(coord)} testPos: ${testPosition}, spawnPos: ${spawn.pos}`);\r\n                        return { seedType: seedType, origin: seed, rotation: rotation, energyPerDistance: undefined }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private findByStructures(seedType: string, staticStructures: {[structureType: string]: Coord[]}): SeedSelection {\r\n\r\n        let mostHits = 0;\r\n        let bestSeed;\r\n        let bestRotation;\r\n\r\n        let seeds = this.data.seedScan[seedType];\r\n        for (let seed of seeds) {\r\n            let centerPosition = new RoomPosition(seed.x, seed.y, this.room.name);\r\n            for (let rotation = 0; rotation <= 3; rotation++) {\r\n\r\n                let structureHits = 0;\r\n\r\n                for (let structureType of [STRUCTURE_SPAWN, STRUCTURE_STORAGE, STRUCTURE_LAB, STRUCTURE_TERMINAL]) {\r\n                    let coords = staticStructures[structureType];\r\n                    for (let coord of coords) {\r\n                        let testPosition = helper.coordToPosition(coord, centerPosition, rotation);\r\n                        if (testPosition.lookForStructure(structureType)) {\r\n                            structureHits++;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (structureHits > mostHits) {\r\n                    mostHits = structureHits;\r\n                    bestSeed = seed;\r\n                    bestRotation = rotation;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (mostHits > 0) {\r\n            return { seedType: seedType, origin: bestSeed, rotation: bestRotation, energyPerDistance: undefined }\r\n        }\r\n    }\r\n}\r\n","import {Operation} from \"../operations/Operation\";\nimport {SpawnGroup} from \"../SpawnGroup\";\n\nexport abstract class Guru {\n\n    protected flag: Flag;\n    protected operation: Operation;\n    protected memory: any;\n    protected room: Room;\n    protected spawnGroup: SpawnGroup;\n\n    constructor(operation: Operation, name: string) {\n        this.operation = operation;\n        this.flag = operation.flag;\n        this.room = operation.room;\n        this.spawnGroup = operation.spawnGroup;\n        if (!operation.memory[name]) { operation.memory[name] = {}; }\n        this.memory = operation.memory[name];\n    }\n\n    observeRoom(roomName: string): Room {\n        let room = Game.rooms[roomName];\n        if (room) return room;\n        let observer = this.spawnGroup.room.findStructures<StructureObserver>(STRUCTURE_OBSERVER)[0];\n        if (!observer) { return; }\n        observer.observeRoom(this.flag.pos.roomName);\n    }\n\n    static deserializePositions(stringified: string, roomName: string): RoomPosition[] {\n        let roomPositions = [];\n        if (!roomName) return;\n        for (let i = 0; i < stringified.length; i += 4) {\n            let x = parseInt(stringified.substr(i, 2));\n            let y = parseInt(stringified.substr(i + 2, 2));\n            roomPositions.push(new RoomPosition(x, y, roomName));\n        }\n        return roomPositions;\n    }\n\n    static deserializePositionWithIndex(stringified: string, roomName: string, index: number): RoomPosition {\n        let x = parseInt(stringified.substr(index, 2));\n        let y = parseInt(stringified.substr(index + 2, 2));\n        return new RoomPosition(x, y, roomName);\n    }\n\n    static serializePositions(positions: RoomPosition[]): string {\n        let stringified = \"\";\n        for (let position of positions) {\n            let x = position.x > 9 ? position.x.toString() : \"0\" + position.x;\n            let y = position.y > 9 ? position.y.toString() : \"0\" + position.y;\n            stringified += x + y;\n        }\n        return stringified;\n    }\n}","import {Mission} from \"./Mission\";\nimport {Operation} from \"../operations/Operation\";\nimport {Agent} from \"./Agent\";\nimport {DefenseGuru} from \"../operations/DefenseGuru\";\nimport {Guru} from \"./Guru\";\n\nconst SANDBAG_THRESHOLD = 1000000;\n\nexport class MasonMission extends Mission {\n\n    public masons: Agent[];\n    public carts: Agent[];\n    public defenseGuru: DefenseGuru;\n\n    private _sandbags: RoomPosition[];\n\n    constructor(operation: Operation, defenseGuru: DefenseGuru) {\n        super(operation, \"mason\");\n        this.defenseGuru = defenseGuru;\n    }\n\n    public initMission() {\n    }\n\n    public maxMasons = () => {\n        return this.needMason ? Math.ceil(this.room.storage.store.energy / 500000) : 0;\n    };\n\n    public maxCarts = () => {\n        if (this.needMason && this.defenseGuru.hostiles.length > 0) { return 1; }\n        else { return 0; }\n    };\n\n    public roleCall() {\n        let boosts;\n        let allowUnboosted = true;\n        if (this.defenseGuru.hostiles.length > 0) {\n            boosts = [RESOURCE_CATALYZED_LEMERGIUM_ACID];\n            allowUnboosted = !(this.room.terminal && this.room.terminal.store[RESOURCE_CATALYZED_LEMERGIUM_ACID] > 1000);\n        }\n        this.masons = this.headCount(\"mason\", () => this.workerBody(16, 8, 12), this.maxMasons, {\n            boosts: boosts,\n            allowUnboosted: allowUnboosted,\n            prespawn: 1\n        });\n        this.carts = this.headCount(\"masonCart\", () => this.workerBody(0, 4, 2), this.maxCarts);\n    }\n\n    public missionActions() {\n\n        for (let mason of this.masons) {\n            if (this.defenseGuru.hostiles.length > 0) {\n                this.sandbagActions(mason);\n            }\n            else {\n                this.masonActions(mason);\n            }\n        }\n\n        for (let cart of this.carts) {\n            this.masonCartActions(cart);\n        }\n    }\n\n    public finalizeMission() {\n    }\n\n    public invalidateMissionCache() {\n        this.memory.needMason = undefined;\n    }\n\n    private masonActions(agent: Agent) {\n\n        let rampart = this.getRampart(agent);\n        if (!rampart) {\n            agent.idleOffRoad();\n            return;\n        }\n\n        agent.creep.repair(rampart);\n\n        let stolen = false;\n        if (!agent.isFull(200)) {\n            stolen = agent.stealNearby(STRUCTURE_EXTENSION) === OK;\n        }\n\n        if (agent.isFull(300) || stolen) {\n            agent.idleNear(rampart, 3, true);\n            return;\n        } else {\n            let extension = this.getExtension(agent, rampart);\n            let outcome = agent.retrieve(extension, RESOURCE_ENERGY);\n            if (outcome === OK && !agent.creep.pos.inRangeTo(rampart, 3)) {\n                agent.travelTo(rampart);\n            }\n        }\n    }\n\n    private sandbagActions(agent: Agent) {\n\n        if (agent.creep.ticksToLive > 400 &&\n            !agent.creep.body.find((p: BodyPartDefinition) => p.boost === RESOURCE_CATALYZED_LEMERGIUM_ACID)) {\n            if (this.room.terminal && this.room.terminal.store[RESOURCE_CATALYZED_LEMERGIUM_ACID] > 1000) {\n                agent.resetPrep();\n            }\n        }\n\n        let construction = this.findConstruction(agent);\n        if (construction) {\n            agent.travelToAndBuild(construction);\n            return;\n        }\n\n        let emergencySandbag = this.getEmergencySandbag(agent);\n        if (emergencySandbag) {\n            if (agent.pos.inRangeTo(emergencySandbag, 3)) {\n                agent.creep.repair(emergencySandbag);\n            }\n            else {\n                agent.travelTo(emergencySandbag);\n            }\n        }\n    }\n\n    private masonCartActions(agent: Agent) {\n\n        let lowestMason = _(this.masons).sortBy((a: Agent) => a.creep.carry.energy).head();\n        if (!lowestMason || !this.room.storage) {\n            agent.idleOffRoad();\n            return;\n        }\n\n        if (agent.isFull()) {\n            let outcome = agent.deliver(lowestMason.creep, RESOURCE_ENERGY);\n            if (outcome === OK) {\n                agent.travelTo(this.room.storage)\n            }\n        }\n        else {\n            let outcome = agent.retrieve(this.room.storage, RESOURCE_ENERGY);\n            if (outcome === OK) {\n                agent.travelTo(lowestMason);\n            }\n        }\n    }\n\n    get needMason() {\n        if (!this.memory.needMason) {\n            if (this.room.controller.level < 8) {\n                this.memory.needMason = false;\n            }\n            else {\n                const MIN_RAMPART_HITS = 50000000;\n                let lowestRampart = _(this.room.findStructures<Structure>(STRUCTURE_RAMPART)).sortBy(\"hits\").head();\n                this.memory.needMason = lowestRampart && lowestRampart.hits < MIN_RAMPART_HITS;\n            }\n        }\n        return this.memory.needMason;\n    }\n\n    get sandbags(): RoomPosition[] {\n        if (!this._sandbags) {\n            if (!this.memory.sandbags) {\n                let sandbags = this.findSandbags();\n                this.memory.sandbags = Guru.serializePositions(sandbags);\n            }\n            this._sandbags = Guru.deserializePositions(this.memory.sandbags, this.room.name);\n        }\n        return this._sandbags;\n    }\n\n    getEmergencySandbag(agent: Agent): Structure {\n\n        let emergencyThreshold = SANDBAG_THRESHOLD / 10;\n\n        let nextConstruction: RoomPosition[] = [];\n        for (let sandbag of this.sandbags) {\n            let rampart = sandbag.lookForStructure(STRUCTURE_RAMPART);\n            if (rampart && rampart.hits < emergencyThreshold) {\n                return rampart;\n            }\n            if (!rampart) {\n                nextConstruction.push(sandbag);\n            }\n        }\n\n        if (this.room.find(FIND_CONSTRUCTION_SITES).length > 0) { return; }\n\n        let bestPosition = agent.pos.findClosestByRange(this.defenseGuru.hostiles).pos.findClosestByRange(nextConstruction);\n        if (bestPosition) {\n            bestPosition.createConstructionSite(STRUCTURE_RAMPART);\n        }\n    }\n\n    private findSandbags(): RoomPosition[] {\n\n        let leftBound = 50;\n        let rightBound = 0;\n        let topBound = 50;\n        let bottomBound = 0;\n        let wallRamparts = [];\n        for (let rampart of this.room.findStructures<Structure>(STRUCTURE_RAMPART)) {\n            if (rampart.pos.lookForStructure(STRUCTURE_ROAD)) continue;\n            if (rampart.pos.lookForStructure(STRUCTURE_EXTENSION)) continue;\n            wallRamparts.push(rampart);\n            if (rampart.pos.x < leftBound) { leftBound = rampart.pos.x; }\n            if (rampart.pos.x > rightBound) { rightBound = rampart.pos.x; }\n            if (rampart.pos.y < topBound) { topBound = rampart.pos.y; }\n            if (rampart.pos.y > bottomBound) { bottomBound = rampart.pos.y; }\n        }\n\n        console.log(leftBound, rightBound, topBound, bottomBound);\n\n        let sandbags = [];\n        for (let structure of this.room.find<Structure>(FIND_STRUCTURES)) {\n            if (structure.structureType === STRUCTURE_RAMPART) continue;\n            if (structure.pos.lookForStructure(STRUCTURE_RAMPART)) continue;\n            let nearbyRampart = structure.pos.findInRange(wallRamparts, 2)[0];\n            if (!nearbyRampart) continue;\n            if (structure.pos.x < leftBound || structure.pos.x > rightBound) continue;\n            if (structure.pos.y < topBound || structure.pos.y > bottomBound) continue;\n            sandbags.push(structure.pos);\n        }\n\n        return sandbags;\n    }\n\n    getRampart(agent: Agent): Structure {\n        let findRampart = () => {\n            let lowestHits = 100000;\n            let lowestRampart = _(this.room.findStructures<Structure>(STRUCTURE_RAMPART)).sortBy(\"hits\").head();\n            if (lowestRampart) {\n                lowestHits = lowestRampart.hits;\n            }\n            let myRampart = _(this.room.findStructures<Structure>(STRUCTURE_RAMPART))\n                .filter((s: Structure) => s.hits < lowestHits + 100000)\n                .sortBy((s: Structure) => agent.pos.getRangeTo(s))\n                .head();\n            if (myRampart) return myRampart;\n        };\n        let forgetRampart = (s: Structure) => agent.creep.ticksToLive % 500 === 0;\n        return agent.rememberStructure(findRampart, forgetRampart, \"rampartId\") as Structure;\n    }\n\n    getExtension(agent: Agent, rampart: Structure): StructureExtension | StructureStorage {\n        let fullExtensions = _.filter(this.room.findStructures<StructureExtension>(STRUCTURE_EXTENSION),\n            (e: StructureExtension) => e.energy > 0);\n        let extension = rampart.pos.findClosestByRange<StructureExtension>(fullExtensions);\n        return agent.pos.findClosestByRange([this.room.storage, extension])\n    }\n\n    findConstruction(agent: Agent): ConstructionSite {\n        return agent.pos.findClosestByRange<ConstructionSite>(FIND_MY_CONSTRUCTION_SITES);\n    }\n}","import {Mission} from \"./Mission\";\nimport {Operation} from \"../operations/Operation\";\nimport {Agent} from \"./Agent\";\nimport {InvaderGuru} from \"./InvaderGuru\";\nexport class BodyguardMission extends Mission {\n\n    defenders: Agent[];\n    hostiles: Creep[];\n\n    memory: {}\n\n    private invaderGuru: InvaderGuru;\n\n    /**\n     * Remote defense for non-owned rooms. If boosted invaders are likely, use EnhancedBodyguardMission\n     * @param operation\n     * @param invaderGuru\n     * @param allowSpawn\n     */\n\n    constructor(operation: Operation, invaderGuru?: InvaderGuru, allowSpawn = true) {\n        super(operation, \"bodyguard\", allowSpawn);\n        this.invaderGuru = invaderGuru;\n    }\n\n    initMission() {\n        if (!this.hasVision) return; // early\n        this.hostiles = this.room.hostiles;\n    }\n\n    getBody = () => {\n        let unit = this.configBody({\n            tough: 1,\n            move: 5,\n            attack: 3,\n            heal: 1\n        });\n        let potency = Math.min(this.spawnGroup.maxUnits(unit, 1), 3);\n        return this.configBody({\n            tough: potency,\n            move: potency * 5,\n            attack: potency * 3,\n            heal: potency\n        });\n    };\n\n    maxDefenders = () => {\n        let maxDefenders = 0;\n        if (this.invaderGuru && this.invaderGuru.invaderProbable) {\n            maxDefenders = 1;\n        }\n        if (this.hasVision) {\n            if (this.hostiles.length > 0) {\n                maxDefenders = Math.ceil(this.hostiles.length / 2);\n            }\n            if (this.operation.type !== \"mining\" && this.room.findStructures(STRUCTURE_TOWER).length === 0) {\n                maxDefenders = 1;\n            }\n        }\n        return maxDefenders;\n    };\n\n    roleCall() {\n\n\n        this.defenders = this.headCount(\"leeroy\", this.getBody, this.maxDefenders, { prespawn: 50 } );\n    }\n\n    missionActions() {\n\n        for (let defender of this.defenders) {\n            this.defenderActions(defender);\n        }\n    }\n\n    finalizeMission() {\n    }\n\n    invalidateMissionCache() {\n    }\n\n    private defenderActions(defender: Agent) {\n        if (!this.hasVision || this.hostiles.length === 0) {\n            if (defender.hits < defender.hitsMax) {\n                defender.heal(defender);\n            }\n            else {\n                this.medicActions(defender);\n            }\n            return; // early\n        }\n\n        let attacking = false;\n        let closest: Structure | Creep = defender.pos.findClosestByRange(this.hostiles);\n        if (closest) {\n            let range = defender.pos.getRangeTo(closest);\n            if (range > 1) {\n                defender.travelTo(closest);\n            }\n            else {\n                attacking = defender.attack(closest) === OK;\n                defender.move(defender.pos.getDirectionTo(closest));\n            }\n        }\n        else {\n            defender.travelTo(this.hostiles[0]);\n        }\n\n        if (!attacking && defender.hits < defender.hitsMax) {\n            defender.heal(defender);\n        }\n    }\n}","import {Mission} from \"./Mission\";\nimport {Operation} from \"../operations/Operation\";\nimport {Agent} from \"./Agent\";\nexport class RemoteBuildMission extends Mission {\n\n    builders: Agent[];\n    construction: ConstructionSite[];\n    recycleWhenDone: boolean;\n    private boost: boolean;\n\n    /**\n     * Builds construction in remote locations, can recycle self when finished\n     * @param operation\n     * @param recycleWhenDone - recycles creep in spawnroom if there are no available construction sites\n     * @param allowSpawn\n     */\n\n    constructor(operation: Operation, recycleWhenDone: boolean, allowSpawn = true) {\n        super(operation, \"remoteBuild\");\n        this.recycleWhenDone = recycleWhenDone;\n        this.allowSpawn = allowSpawn;\n    }\n\n    initMission() {\n        if (!this.hasVision) {\n            return; // early\n        }\n\n        this.construction = this.room.find<ConstructionSite>(FIND_MY_CONSTRUCTION_SITES);\n    }\n\n    roleCall() {\n        let maxBuilders = () => this.construction && this.construction.length > 0 ? 1 : 0;\n        let getBody = () => {\n            return this.bodyRatio(1, 1, 1, .8, 10);\n        };\n        let memory;\n        if (this.memory.activateBoost || (this.room.controller && this.room.controller.my)) {\n            memory = { boosts: [RESOURCE_CATALYZED_LEMERGIUM_ACID], allowUnboosted: true};\n        }\n        this.builders = this.headCount(\"remoteBuilder\", getBody, maxBuilders, {memory: memory});\n    }\n\n    missionActions() {\n        for (let builder of this.builders) {\n            if (!this.waypoints && this.recycleWhenDone && this.construction.length === 0) {\n                this.recycleBuilder(builder);\n            }\n            else {\n                this.builderActions(builder);\n            }\n        }\n    }\n\n    finalizeMission() {\n    }\n\n    invalidateMissionCache() {\n    }\n\n    private builderActions(builder: Agent) {\n\n        let fleeing = builder.fleeHostiles();\n        if (fleeing) return; // early\n\n        if (!this.hasVision) {\n            if (!builder.pos.isNearTo(this.flag)) {\n                builder.travelTo(this.flag);\n            }\n            return; // early\n        }\n\n        builder.stealNearby(\"creep\");\n\n        let hasLoad = builder.hasLoad();\n        if (!hasLoad) {\n            builder.procureEnergy(undefined, true, true);\n            return; // early\n        }\n\n        let closest = this.findConstruction(builder);\n        if (!closest) {\n            builder.idleNear(this.flag);\n            return; // early\n        }\n\n        if (builder.pos.inRangeTo(closest, 3)) {\n            builder.build(closest);\n            builder.yieldRoad(closest);\n        }\n        else {\n            builder.travelTo(closest);\n        }\n    }\n\n    private recycleBuilder(builder: Agent) {\n        let spawn = this.spawnGroup.spawns[0];\n        if (builder.carry.energy > 0 && spawn.room.storage) {\n            if (builder.pos.isNearTo(spawn.room.storage)) {\n                builder.transfer(spawn.room.storage, RESOURCE_ENERGY);\n            }\n            else {\n                builder.travelTo(spawn.room.storage);\n            }\n        }\n        else {\n            let spawn = this.spawnGroup.spawns[0];\n            if (builder.pos.isNearTo(spawn)) {\n                spawn.recycleCreep(builder.creep);\n            }\n            else {\n                builder.travelTo(spawn);\n            }\n        }\n    }\n\n    private findConstruction(builder: Agent): ConstructionSite {\n        if (builder.memory.siteId) {\n            let site = Game.getObjectById<ConstructionSite>(builder.memory.siteId)\n            if (site) {\n                return site;\n            } else {\n                delete builder.memory.siteId;\n                return this.findConstruction(builder);\n            }\n        } else {\n            let site = builder.pos.findClosestByRange<ConstructionSite>(this.construction);\n            if (site) {\n                builder.memory.siteId = site.id;\n                return site;\n            }\n        }\n    }\n}","import {Mission} from \"./Mission\";\nimport {Agent} from \"./Agent\";\nexport class ScoutMission extends Mission {\n\n    scouts: Agent[];\n\n    constructor(operation) {\n        super(operation, \"scout\");\n    }\n\n    initMission() {\n    }\n\n    roleCall() {\n        let maxScouts = () => this.hasVision ? 0 : 1;\n        this.scouts = this.headCount(this.name, () => this.workerBody(0, 0, 1), maxScouts, {blindSpawn: true});\n    }\n\n    missionActions() {\n        for (let scout of this.scouts) {\n\n            if (!scout.pos.isNearTo(this.flag)) {\n                scout.avoidSK(this.flag);\n            }\n        }\n    }\n\n    finalizeMission() {\n    }\n\n    invalidateMissionCache() {\n    }\n}","import {Mission} from \"./Mission\";\nimport {Operation} from \"../operations/Operation\";\nimport {Agent} from \"./Agent\";\nexport class ClaimMission extends Mission {\n\n    claimers: Agent[];\n    controller: StructureController;\n\n    constructor(operation: Operation) {\n        super(operation, \"claimer\");\n    }\n\n    initMission() {\n        //if (!this.hasVision) return; // early\n        if(this.room) {\n            this.controller = this.room.controller;\n        }\n    }\n\n    getMax = () => (this.controller && !this.controller.my) || !this.hasVision ? 1 : 0;\n\n    roleCall() {\n        this.claimers = this.headCount(\"claimer\", () => [CLAIM, MOVE], this.getMax, { blindSpawn: true });\n    }\n\n    missionActions() {\n\n        for (let claimer of this.claimers) {\n            this.claimerActions(claimer);\n        }\n    }\n\n    finalizeMission() {\n    }\n\n    invalidateMissionCache() {\n    }\n\n    private claimerActions(claimer: Agent) {\n\n        console.log(`ey`);\n        if (!this.controller) {\n            claimer.idleOffRoad();\n            return; // early\n        }\n\n        if (claimer.pos.isNearTo(this.controller)) {\n            claimer.claimController(this.controller);\n        }\n        else {\n            claimer.travelTo(this.controller);\n        }\n    }\n}","import {SurveyMission} from \"./SurveyMission\";\nimport {helper} from \"../../helpers/helper\";\nimport {Empire} from \"../Empire\";\nimport {SpawnGroup} from \"../SpawnGroup\";\nimport {notifier} from \"../../notifier\";\nimport {Mission} from \"./Mission\";\nimport {empire} from \"../../helpers/loopHelper\";\nimport {WorldMap, ROOMTYPE_ALLEY, ROOMTYPE_SOURCEKEEPER} from \"../WorldMap\";\nimport {Traveler} from \"../Traveler\";\nimport {USERNAME} from \"../../config/constants\";\n\ninterface SurveyData {\n    danger: boolean;\n    mineralType?: string;\n    sourceCount?: number;\n    averageDistance?: number;\n    owner?: string;\n    lastCheckedOwner?: number;\n    hasWalls?: boolean;\n}\n\nexport class SurveyAnalyzer {\n\n    private room: Room;\n    private spawnGroup: SpawnGroup;\n    private opName: string;\n    private memory: {\n        chosenRoom: string;\n        nextAnalysis: number;\n        surveyRooms: {[roomName: string]: SurveyData};\n        dataComplete: boolean;\n    };\n\n    constructor(mission: SurveyMission) {\n        this.room = mission.room;\n        this.spawnGroup = mission.spawnGroup;\n        this.memory = mission.memory as any;\n        this.opName = mission.operation.name;\n    }\n\n    public run(): string {\n\n        // place flag in chosen missionRoom\n        if (Game.time < this.memory.nextAnalysis) { return; }\n        if (this.memory.chosenRoom) {\n            let room = Game.rooms[this.memory.chosenRoom];\n            if (room) {\n                this.placeFlag(room);\n                delete this.memory.chosenRoom;\n                if (Object.keys(this.memory.surveyRooms).length === 0) {\n                    notifier.log(`SURVEY: no more rooms to evaluate in ${this.room.name}`);\n                }\n                else {\n                    this.memory.nextAnalysis = Game.time + 1000;\n                }\n            }\n            return this.memory.chosenRoom;\n        }\n\n        // analyze rooms\n        let exploreRoomName;\n        if (!this.memory.surveyRooms) { this.memory.surveyRooms = this.initSurveyData(); }\n        exploreRoomName = this.completeSurveyData(this.memory.surveyRooms);\n        if (exploreRoomName) return exploreRoomName;\n        exploreRoomName = this.updateOwnershipData();\n        if (exploreRoomName) return;\n\n        let chosenRoom;\n        let readyList = this.checkReady();\n        if (readyList && Object.keys(readyList).length > 0) {\n            chosenRoom = this.chooseRoom(readyList);\n        }\n        if (chosenRoom) {\n            this.memory.chosenRoom = chosenRoom;\n        }\n        else if (this.memory.nextAnalysis < Game.time) {\n            this.memory.nextAnalysis = Game.time + 1000;\n        }\n\n    }\n\n    private initSurveyData(): {[roomName: string]: SurveyData} {\n        let data: {[roomName: string]: SurveyData} = {};\n\n        // find core\n        let roomCoords = WorldMap.getRoomCoordinates(this.room.name);\n        let coreX = \"\" + Math.floor(roomCoords.x / 10) + 5;\n        let coreY = \"\" + Math.floor(roomCoords.y / 10) + 5;\n        let nearestCore = roomCoords.xDir + coreX + roomCoords.yDir + coreY;\n        if (Game.map.getRoomLinearDistance(this.room.name, nearestCore) <= 2 &&\n            this.spawnGroup.averageAvailability > 1.5) {\n            data[nearestCore] = { danger: true };\n        }\n\n        let adjacentRoomNames = this.findAdjacentRooms(this.room.name, 1, [ROOMTYPE_ALLEY]);\n        for (let roomName of adjacentRoomNames) {\n\n            let noSafePath = false;\n            let roomsInPath = empire.traveler.findRoute(this.room.name, roomName,\n                { allowHostile: true, restrictDistance: 1 });\n            if (roomsInPath) {\n                for (let roomName in roomsInPath) {\n                    if (Traveler.checkOccupied(roomName)) {\n                        noSafePath = true;\n                    }\n                }\n            }\n            else {\n                noSafePath = true;\n            }\n\n            let type = WorldMap.roomTypeFromName(roomName);\n            if (type === ROOMTYPE_SOURCEKEEPER || noSafePath) {\n                data[roomName] = { danger: true };\n            }\n            else {\n                data[roomName] = { danger: false };\n            }\n        }\n\n        return data;\n    }\n\n\n    findAdjacentRooms(startRoomName: string, distance = 1, filterOut: number[] = []): string[] {\n        let alreadyChecked: {[roomName: string]: boolean } = { [startRoomName]: true };\n        let adjacentRooms: string[] = [];\n        let testRooms: string[] = [startRoomName];\n        while (testRooms.length > 0) {\n            let testRoom = testRooms.pop();\n            alreadyChecked[testRoom] = true;\n            for (let value of _.values<string>(Game.map.describeExits(testRoom))) {\n                if (alreadyChecked[value]) continue;\n                if (Game.map.getRoomLinearDistance(startRoomName, value) > distance) continue;\n                if (_.includes(filterOut, WorldMap.roomTypeFromName(value))) continue;\n                adjacentRooms.push(value);\n                testRooms.push(value);\n                alreadyChecked[value] = true;\n            }\n        }\n        return adjacentRooms;\n    }\n\n    private completeSurveyData(surveyRooms: {[roomName: string]: SurveyData}): string {\n\n        for (let roomName in surveyRooms) {\n            let data = surveyRooms[roomName];\n            if (data.sourceCount) continue;\n            let room = Game.rooms[roomName];\n            if (room) {\n                this.analyzeRoom(room, data);\n                continue;\n            }\n            if (!data.danger) {\n                return roomName;\n            }\n            else {\n                if (this.room.controller.level < 8) continue;\n                return roomName;\n            }\n        }\n    }\n\n    private analyzeRoom(room: Room, data: SurveyData) {\n\n        // mineral\n        if (!room.controller) {\n            data.mineralType = room.find<Mineral>(FIND_MINERALS)[0].mineralType;\n        }\n\n        // owner\n        data.owner = this.checkOwnership(room);\n        data.lastCheckedOwner = Game.time;\n        if (data.owner === USERNAME) {\n            delete this.memory.surveyRooms[room.name];\n            return;\n        }\n\n        // source info\n        let roomDistance = Game.map.getRoomLinearDistance(this.room.name, room.name);\n        let sources = room.find<Source>(FIND_SOURCES);\n        let roomType = WorldMap.roomTypeFromName(room.name);\n        let distances = [];\n        data.sourceCount = sources.length;\n        for (let source of sources) {\n            let ret = PathFinder.search(this.room.storage.pos, { pos: source.pos, range: 1}, {\n                swampCost: 1,\n                plainCost: 1,\n                roomCallback: (roomName: string) => {\n                    if (Game.map.getRoomLinearDistance(this.room.name, roomName) > roomDistance) {\n                        return false;\n                    }\n                }\n            });\n            if (ret.incomplete) {\n                notifier.log(`SURVEY: Incomplete path from ${this.room.storage.pos} to ${source.pos}`);\n            }\n\n            let distance = ret.path.length;\n            distances.push(distance);\n            let cartsNeeded = Mission.analyzeTransport(distance, Mission.loadFromSource(source), 12900).cartsNeeded;\n\n            // disqualify due to source distance\n            if (cartsNeeded > data.sourceCount){\n                notifier.log(`SURVEY: disqualified ${room.name} due to distance to source: ${cartsNeeded}`);\n                delete this.memory.surveyRooms[room.name];\n                return;\n            }\n        }\n        data.averageDistance = _.sum(distances) / distances.length;\n\n        // walls\n        data.hasWalls = room.findStructures(STRUCTURE_WALL).length > 0;\n    }\n\n    private checkOwnership(room: Room): string {\n        let flags = room.find<Flag>(FIND_FLAGS);\n        for (let flag of flags) {\n            if (flag.name.indexOf(\"mining\") >= 0 || flag.name.indexOf(\"keeper\") >= 0) {\n                return USERNAME;\n            }\n        }\n\n        if (room.controller) {\n            if (room.controller.reservation) {\n                return room.controller.reservation.username;\n            }\n            else if (room.controller.owner) {\n                return room.controller.owner.username;\n            }\n        }\n        else {\n            for (let source of room.find<Source>(FIND_SOURCES)) {\n                let nearbyCreeps = _.filter(source.pos.findInRange<Creep>(FIND_CREEPS, 1),\n                    (c: Creep) => !c.owner || c.owner.username !== \"Source Keeper\");\n                if (nearbyCreeps.length === 0) { continue; }\n                return nearbyCreeps[0].owner.username;\n            }\n        }\n    }\n\n    private updateOwnershipData(): string {\n\n        for (let roomName in this.memory.surveyRooms) {\n            let data = this.memory.surveyRooms[roomName];\n            // owner\n            if (Game.time > data.lastCheckedOwner + 10000) {\n                let room = Game.rooms[roomName];\n                if (room) {\n                    data.owner = this.checkOwnership(room);\n                    if (data.owner === USERNAME) {\n                        delete this.memory.surveyRooms[room.name];\n                    }\n                    else {\n                        data.lastCheckedOwner = Game.time;\n                    }\n                }\n                else {\n                    return roomName;\n                }\n            }\n        }\n    }\n\n    private checkReady(): {[roomName: string]: SurveyData} {\n\n        if (!empire.underCPULimit()) {\n            notifier.log(`SURVEY: avoiding placement, cpu is over limit`);\n            this.memory.nextAnalysis = Game.time + 10000;\n            return;\n        }\n\n\n\n        let readyList = {};\n\n        for (let roomName in this.memory.surveyRooms) {\n            let data = this.memory.surveyRooms[roomName];\n            // owner\n            if (!data.sourceCount ) { continue; }\n            // don't claim rooms if any nearby rooms with another owner\n            if (data.owner) {\n                return;\n            }\n\n            // spawning availability\n            let availabilityRequired = this.spawnGroup.spawns.length / 3;\n            if (Game.map.getRoomLinearDistance(this.room.name, roomName) > 1) { availabilityRequired = 1.2; }\n            if (this.spawnGroup.averageAvailability < availabilityRequired) { continue; }\n            readyList[roomName] = data;\n        }\n\n        return readyList;\n    }\n\n    private chooseRoom(readySurveyRooms: {[roomName: string]: SurveyData}): string {\n\n        let bestScore = 0;\n        let bestChoice;\n        for (let roomName in readySurveyRooms) {\n            let data = readySurveyRooms[roomName];\n            let score = data.sourceCount * 1000 - data.averageDistance;\n            if (score > bestScore) {\n                bestChoice = roomName;\n                bestScore = score;\n            }\n        }\n\n        return bestChoice;\n    }\n\n    private placeFlag(room: Room) {\n        let direction = WorldMap.findRelativeRoomDir(this.room.name, room.name);\n        let opName = this.opName.substr(0, this.opName.length - 1) + direction;\n        if (Game.map.getRoomLinearDistance(this.room.name, room.name ) > 1) {\n            opName += direction;\n        }\n        let opType = \"mining\";\n        if (room.roomType === ROOMTYPE_SOURCEKEEPER) {\n            opType = \"keeper\";\n        }\n        let flagName = `${opType}_${opName}`;\n        helper.pathablePosition(room.name).createFlag(flagName, COLOR_GREY);\n        notifier.log(`SURVEY: created new operation in ${room.name}: ${flagName}`);\n        delete this.memory.surveyRooms[room.name];\n    }\n}","import {Mission} from \"./Mission\";\nimport {Operation} from \"../operations/Operation\";\nimport {helper} from \"../../helpers/helper\";\nimport {SurveyAnalyzer} from \"./SurveyAnalyzer\";\nimport {empire} from \"../../helpers/loopHelper\";\nimport {Agent} from \"./Agent\";\n\nexport class SurveyMission extends Mission {\n\n    surveyors: Agent[];\n    needsVision: string;\n    chosenRoom: {roomName: string, orderDemolition: boolean};\n    memory: {\n        surveyComplete: boolean;\n    };\n\n    constructor(operation: Operation) {\n        super(operation, \"survey\");\n    }\n\n    initMission() {\n        if (this.memory.surveyComplete) { return; }\n        let analyzer = new SurveyAnalyzer(this);\n        this.needsVision = analyzer.run();\n    }\n\n    maxSurveyors = () => {\n        if (this.needsVision && !this.room.findStructures(STRUCTURE_OBSERVER)[0] || this.chosenRoom) {\n            return 1;\n        } else {\n            return 0;\n        }\n    };\n\n    roleCall() {\n\n\n        this.surveyors = this.headCount(\"surveyor\", () => this.workerBody(0, 0, 1), this.maxSurveyors);\n    }\n\n    missionActions() {\n\n        for (let surveyor of this.surveyors) {\n            if (this.needsVision) {\n                this.explorerActions(surveyor);\n            }\n        }\n\n        if (this.needsVision) {\n            let observer = this.room.findStructures<StructureObserver>(STRUCTURE_OBSERVER)[0];\n            if (!observer) { return; }\n            observer.observeRoom(this.needsVision);\n        }\n    }\n\n    finalizeMission() {\n    }\n\n    invalidateMissionCache() {\n    }\n\n    explorerActions(explorer: Agent) {\n        if (this.needsVision) {\n            explorer.travelTo({pos: helper.pathablePosition(this.needsVision)});\n        }\n    }\n}","import {Mission} from \"./Mission\";\nimport {Operation} from \"../operations/Operation\";\nimport {Agent} from \"./Agent\";\nexport class DefenseMission extends Mission {\n\n    refillCarts: Agent[];\n    defenders: Agent[];\n\n    towers: StructureTower[];\n    empties: StructureTower[];\n    closestHostile: Creep;\n    healedDefender: Agent;\n\n    playerThreat: boolean;\n    attackedCreep: Creep;\n    enhancedBoost: boolean;\n    likelyTowerDrainAttempt: boolean;\n\n    healers: Creep[] = [];\n    attackers: Creep[] = [];\n\n    wallRamparts: Structure[];\n    jonRamparts: Structure[];\n\n    enemySquads = [];\n\n    memory: {\n        idlePosition: RoomPosition;\n        unleash: boolean;\n        disableSafeMode: boolean;\n        wallCount: number;\n        closestWallId: string;\n        preSpawn: boolean\n        lastCheckedTowers: number;\n    };\n\n    constructor(operation: Operation) {\n        super(operation, \"defense\");\n    }\n\n    initMission() {\n        this.towers = this.room.findStructures<StructureTower>(STRUCTURE_TOWER);\n\n        this.analyzePlayerThreat();\n\n        // nuke detection\n        if (Game.time % 1000 === 1) {\n            let nukes = this.room.find(FIND_NUKES) as Nuke[];\n            for (let nuke of nukes) {\n                console.log(`DEFENSE: nuke landing at ${this.operation.name} in ${nuke.timeToLand}`);\n            }\n        }\n\n        // only gets triggered if a wall is breached\n        this.triggerSafeMode();\n    }\n\n    getMaxDefenders = () => this.playerThreat ? Math.max(this.enemySquads.length, 1) : 0;\n    getMaxRefillers = () => this.playerThreat ? 1 : 0;\n\n    defenderBody = () => {\n        if (this.enhancedBoost) {\n            let bodyUnit = this.configBody({[TOUGH]: 1, [ATTACK]: 3, [MOVE]: 1});\n            let maxUnits = Math.min(this.spawnGroup.maxUnits(bodyUnit), 8);\n            return this.configBody({[TOUGH]: maxUnits, [ATTACK]: maxUnits * 3, [RANGED_ATTACK]: 1, [MOVE]: maxUnits + 1});\n        }\n        else {\n            let bodyUnit = this.configBody({[TOUGH]: 1, [ATTACK]: 5, [MOVE]: 6});\n            let maxUnits = Math.min(this.spawnGroup.maxUnits(bodyUnit), 4);\n            return this.configBody({[TOUGH]: maxUnits, [ATTACK]: maxUnits * 5, [MOVE]: maxUnits * 6});\n        }\n    };\n\n    roleCall() {\n\n        this.refillCarts = this.headCount(\"towerCart\", () => this.bodyRatio(0, 2, 1, 1, 4), this.getMaxRefillers);\n\n        let memory = { boosts: [RESOURCE_CATALYZED_KEANIUM_ALKALIDE, RESOURCE_CATALYZED_GHODIUM_ALKALIDE,\n            RESOURCE_CATALYZED_UTRIUM_ACID], allowUnboosted: !this.enhancedBoost };\n\n        if (this.enhancedBoost) {\n            memory.boosts.push(RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE);\n        }\n\n        this.defenders = this.headCount(\"defender\", this.defenderBody, this.getMaxDefenders, {prespawn: 1, memory: memory});\n    }\n\n    missionActions() {\n\n        let order = 0;\n        for (let defender of this.defenders) {\n            this.defenderActions(defender, order);\n            order++;\n        }\n\n        this.towerTargeting(this.towers);\n\n        for (let cart of this.refillCarts) {\n            this.towerCartActions(cart);\n        }\n    }\n\n    finalizeMission() {\n    }\n\n    invalidateMissionCache() {\n    }\n\n    towerCartActions(cart: Agent) {\n\n        let hasLoad = cart.hasLoad();\n        if (!hasLoad) {\n            cart.procureEnergy(this.findLowestEmpty(cart), true);\n            return;\n        }\n\n        let target = this.findLowestEmpty(cart);\n        if (!target) {\n            cart.memory.hasLoad = cart.carry.energy === cart.carryCapacity;\n            cart.yieldRoad(this.flag);\n            return;\n        }\n\n        // has target\n        if (!cart.pos.isNearTo(target)) {\n            cart.travelTo(target);\n            return;\n        }\n\n        // is near to target\n        let outcome = cart.transfer(target, RESOURCE_ENERGY);\n        if (outcome === OK && cart.carry.energy >= target.energyCapacity) {\n            target = this.findLowestEmpty(cart, target);\n            if (target && !cart.pos.isNearTo(target)) {\n                cart.travelTo(target);\n            }\n        }\n    }\n\n    findLowestEmpty(cart: Agent, pullTarget?: StructureTower): StructureTower {\n        if (!this.empties) {\n            this.empties = _(this.towers)\n                .filter((s: StructureTower) => s.energy < s.energyCapacity)\n                .sortBy(\"energy\")\n                .value() as StructureTower[];\n        }\n\n        if (pullTarget) {\n            _.pull(this.empties, pullTarget);\n        }\n\n        return this.empties[0];\n    }\n\n    private defenderActions(defender: Agent, order: number) {\n        if (this.enemySquads.length === 0) {\n            defender.idleOffRoad();\n            defender.say(\"none :(\");\n            return; // early\n        }\n\n        // movement\n        let dangerZone = false;\n        if (this.memory.unleash) {\n            let closest = defender.pos.findClosestByRange(this.room.hostiles);\n            if (defender.pos.isNearTo(closest)) {\n                if (defender.attack(closest) === OK) {\n                    this.attackedCreep = closest;\n                }\n            }\n            else {\n                let outcome = defender.travelTo(closest);\n            }\n        }\n        else {\n\n            let target = defender.pos.findClosestByRange(this.enemySquads[order % this.enemySquads.length]) as Creep;\n            if (!target) {\n                console.log(\"no target\");\n                return;\n            }\n\n            let closestRampart = target.pos.findClosestByRange(this.jonRamparts) as Structure;\n            if (closestRampart) {\n                let currentRampart = defender.pos.lookForStructure(STRUCTURE_RAMPART) as Structure;\n                if (currentRampart && currentRampart.pos.getRangeTo(target) <= closestRampart.pos.getRangeTo(target)) {\n                    closestRampart = currentRampart;\n                }\n                _.pull(this.jonRamparts, closestRampart);\n                defender.travelTo(closestRampart, { roomCallback: this.preferRamparts });\n            }\n            else {\n                defender.idleOffRoad(this.flag);\n            }\n\n            // attack\n            if (defender.pos.isNearTo(target)) {\n                 if (defender.attack(target) === OK) {\n                     if (!this.attackedCreep || target.hits < this.attackedCreep.hits) {\n                         this.attackedCreep = this.closestHostile;\n                     }\n                 }\n            }\n            else {\n                let closeCreep = defender.pos.findInRange(this.room.hostiles, 1)[0] as Creep;\n                if (closeCreep) {\n                    if (defender.attack(closeCreep) === OK) {\n                        this.attackedCreep = closeCreep;\n                    }\n                }\n            }\n        }\n\n        // heal\n        if (defender.hits < defender.hitsMax && (!this.healedDefender || defender.hits < this.healedDefender.hits)) {\n            this.healedDefender = defender;\n        }\n    }\n\n    private towerTargeting(towers: StructureTower[]) {\n        if (!towers || towers.length === 0) return;\n\n        for (let tower of this.towers) {\n\n            let target = this.closestHostile;\n\n            // kill jon snows target\n            if (this.attackedCreep) {\n                target = this.attackedCreep;\n            }\n\n            // healing as needed\n            if (this.healedDefender) {\n                tower.heal(this.healedDefender.creep);\n            }\n\n            // the rest attack\n            tower.attack(target);\n        }\n    }\n\n    private triggerSafeMode() {\n        if (this.playerThreat && !this.memory.disableSafeMode) {\n            let wallCount = this.room.findStructures(STRUCTURE_WALL).concat(this.room.findStructures(STRUCTURE_RAMPART)).length;\n            if (this.memory.wallCount && wallCount < this.memory.wallCount) {\n                this.room.controller.activateSafeMode();\n                this.memory.unleash = true;\n            }\n            this.memory.wallCount = wallCount;\n        }\n        else {\n            this.memory.wallCount = undefined;\n        }\n    }\n\n    preferRamparts = (roomName: string, matrix: CostMatrix) => {\n        if (roomName === this.room.name) {\n\n            // block off hostiles and adjacent squares\n            for (let hostile of this.room.hostiles) {\n                matrix.set(hostile.pos.x, hostile.pos.y, 0xff);\n                for (let i = 1; i <= 8; i++) {\n                    let position = hostile.pos.getPositionAtDirection(i);\n                    matrix.set(position.x, position.y, 0xff);\n                }\n            }\n\n            // set rampart costs to same as road\n            for (let rampart of this.wallRamparts) {\n                matrix.set(rampart.pos.x, rampart.pos.y, 1);\n            }\n            return matrix;\n        }\n    };\n\n    private closeToWall(creep: Creep): boolean {\n        let wall = Game.getObjectById(this.memory.closestWallId) as Structure;\n        if (wall && creep.pos.isNearTo(wall)) {\n            return true;\n        }\n        else {\n            let walls = this.room.findStructures(STRUCTURE_RAMPART) as Structure[];\n            for (let wall of walls) {\n                if (creep.pos.isNearTo(wall)) {\n                    this.memory.closestWallId = wall.id;\n                    return true;\n                }\n            }\n        }\n    }\n\n    private analyzePlayerThreat() {\n        if (this.towers.length > 0 && this.room.hostiles.length > 0) {\n            this.closestHostile = this.towers[0].pos.findClosestByRange(this.room.hostiles);\n        }\n\n        let playerCreeps = _.filter(this.room.hostiles, (c: Creep) => {\n            return c.owner.username !== \"Invader\" && c.body.length >= 40 && _.filter(c.body, part => part.boost).length > 0;\n        }) as Creep[];\n\n        this.playerThreat = playerCreeps.length > 1 || this.memory.preSpawn;\n\n        if (this.playerThreat) {\n            if (!Memory.roomAttacks) Memory.roomAttacks = {};\n            Memory.roomAttacks[playerCreeps[0].owner.username] = Game.time;\n\n            if (Game.time % 10 === 5) {\n                console.log(\"DEFENSE: \" + playerCreeps.length + \" non-ally hostile creep in owned missionRoom: \" + this.flag.pos.roomName);\n            }\n\n            for (let creep of this.room.hostiles) {\n                if (creep.partCount(HEAL) > 12) {\n                    this.healers.push(creep);\n                }\n                else {\n                    this.attackers.push(creep);\n                }\n            }\n\n            this.likelyTowerDrainAttempt = this.attackers.length === 0;\n            this.wallRamparts = _.filter(this.room.findStructures(STRUCTURE_RAMPART), (r: Structure) => {\n                return _.filter(r.pos.lookFor(LOOK_STRUCTURES), (s: Structure) => {\n                        return s.structureType !== STRUCTURE_ROAD;\n                    }).length === 1;\n            }) as Structure[];\n            this.jonRamparts = this.wallRamparts.slice(0);\n\n            // find squads\n            let attackers = _.sortBy(this.attackers, (c: Creep) => { this.towers[0].pos.getRangeTo(c); });\n            while (attackers.length > 0) {\n                let squad = attackers[0].pos.findInRange(attackers, 5);\n                let nearbyRamparts = attackers[0].pos.findInRange(this.wallRamparts, 10);\n                if (this.enemySquads.length === 0 || nearbyRamparts.length > 0) {\n                    this.enemySquads.push(squad);\n                }\n                attackers = _.difference(attackers, squad);\n            }\n\n            this.enhancedBoost = this.room.terminal && this.room.terminal.store[RESOURCE_CATALYZED_ZYNTHIUM_ALKALIDE] > 1000;\n        }\n    }\n}\n","import {Guru} from \"../missions/Guru\";\nimport {Operation} from \"./Operation\";\nexport class DefenseGuru extends Guru {\n\n    _hostiles: Creep[];\n\n    constructor(operation: Operation) {\n        super(operation, \"defenseGuru\")\n    }\n\n    get hostiles(): Creep[] {\n        if (!this._hostiles) {\n            this._hostiles = _.filter(this.room.hostiles, (c: Creep) => {\n                return c.owner.username !== \"Invader\" && c.body.length >= 40 && _.filter(c.body, part => part.boost).length > 0;\n            });\n\n            let fauxHostiles = _.filter(this.room.find(FIND_FLAGS), (f: Flag) => f.name.indexOf(\"faux\") >= 0);\n            if (fauxHostiles.length > 0) {\n                this._hostiles = fauxHostiles as Creep[];\n            }\n        }\n        return this._hostiles;\n    }\n}","import {Operation} from \"./Operation\";\r\nimport {EmergencyMinerMission} from \"../missions/EmergencyMission\";\r\nimport {RefillMission} from \"../missions/RefillMission\";\r\nimport {LinkMiningMission} from \"../missions/LinkMiningMission\";\r\nimport {MiningMission} from \"../missions/MiningMission\";\r\nimport {BuilderMission} from \"../missions/BuilderMission\";\r\nimport {GeologyMission} from \"../missions/GeologyMission\";\r\nimport {UpgradeMission} from \"../missions/UpgradeMission\";\r\nimport {Coord, SeedData} from \"../../interfaces\";\r\nimport {helper} from \"../../helpers/helper\";\r\nimport {SeedAnalysis} from \"../SeedAnalysis\";\r\nimport {SpawnGroup} from \"../SpawnGroup\";\r\nimport {Empire} from \"../Empire\";\r\nimport {MasonMission} from \"../missions/MasonMission\";\r\nimport {OperationPriority} from \"../../config/constants\";\r\nimport {BodyguardMission} from \"../missions/BodyguardMission\";\r\nimport {RemoteBuildMission} from \"../missions/RemoteBuildMission\";\r\nimport {Profiler} from \"../../Profiler\";\r\nimport {ScoutMission} from \"../missions/ScoutMission\";\r\nimport {ClaimMission} from \"../missions/ClaimMission\";\r\nimport {notifier} from \"../../notifier\";\r\nimport {SurveyMission} from \"../missions/SurveyMission\";\r\nimport {DefenseMission} from \"../missions/DefenseMission\";\r\nimport {DefenseGuru} from \"./DefenseGuru\";\r\nimport {empire} from \"../../helpers/loopHelper\";\r\n\r\nexport abstract class ControllerOperation extends Operation {\r\n\r\n    constructor(flag: Flag, name: string, type: string) {\r\n        super(flag, name, type);\r\n        this.priority = OperationPriority.OwnedRoom;\r\n        if (this.flag.room && this.flag.room.controller.level < 6) {\r\n            this.priority = OperationPriority.VeryHigh;\r\n        }\r\n    }\r\n\r\n    memory: {\r\n        powerMining: boolean\r\n        noMason: boolean\r\n        masonPotency: number\r\n        builderPotency: number\r\n        wallBoost: boolean\r\n        mason: { activateBoost: boolean }\r\n        network: { scanData: { roomNames: string[]} }\r\n        centerPosition: RoomPosition;\r\n        centerPoint: Coord;\r\n        rotation: number\r\n        repairIndices: {[structureType: string]: number}\r\n        temporaryPlacement: {[level: number]: boolean}\r\n        checkLayoutIndex: number\r\n        layoutMap: {[structureType: string]: Coord[]}\r\n        radius: number\r\n        seedData: SeedData\r\n        lastChecked: {[structureType: string]: number }\r\n        spawnRooms: string[]\r\n\r\n        // deprecated values\r\n        flexLayoutMap: {[structureType: string]: Coord[]}\r\n        flexRadius: number\r\n    };\r\n\r\n    staticStructures: {[structureType: string]: Coord[]};\r\n\r\n    protected abstract initAutoLayout();\r\n    protected abstract temporaryPlacement(controllerLevel: number);\r\n\r\n    initOperation() {\r\n        this.autoLayout();\r\n\r\n        this.spawnGroup = empire.getSpawnGroup(this.flag.pos.roomName);\r\n        this.initRemoteSpawn(8, 8);\r\n\r\n        let remoteSpawning = false;\r\n        if (!this.spawnGroup) {\r\n            remoteSpawning = true;\r\n\r\n            if (!this.remoteSpawn) {\r\n                console.log(`${this.name} is unable to spawn, no local or remote spawnGroup`);\r\n                return;\r\n            }\r\n\r\n            this.spawnGroup = this.remoteSpawn.spawnGroup;\r\n            this.addMission(new ScoutMission(this));\r\n            this.addMission(new ClaimMission(this));\r\n            if (!this.hasVision || this.room.controller.level === 0) return; // vision can be assumed after this point\r\n        }\r\n\r\n        this.addMission(new RemoteBuildMission(this, false, remoteSpawning));\r\n        if (this.room.controller.level < 3 && this.room.findStructures(STRUCTURE_TOWER).length === 0 && remoteSpawning) {\r\n            this.addMission(new BodyguardMission(this));\r\n        }\r\n\r\n        if (this.flag.room.findStructures(STRUCTURE_SPAWN).length > 0) {\r\n            // spawn emergency miner if needed\r\n            this.addMission(new EmergencyMinerMission(this));\r\n            // refill spawning energy - will spawn small spawnCart if needed\r\n            this.addMission(new RefillMission(this));\r\n        }\r\n\r\n        let defenseGuru = new DefenseGuru(this);\r\n        this.addMission(new DefenseMission(this));\r\n        //this.addMission(new PowerMission(this));\r\n\r\n        // energy network\r\n        if (this.flag.room.terminal && this.flag.room.storage && this.flag.room.controller.level >= 6) {\r\n            //this.addMission(new TerminalNetworkMission(this));\r\n            //this.addMission(new IgorMission(this));\r\n        }\r\n\r\n        // harvest energy\r\n        for (let i = 0; i < this.sources.length; i++) {\r\n            if (this.sources[i].pos.lookFor(LOOK_FLAGS).length > 0) continue;\r\n            let source = this.sources[i];\r\n            if (this.flag.room.controller.level === 8 && this.flag.room.storage) {\r\n                let link = source.findMemoStructure(STRUCTURE_LINK, 2, true) as StructureLink;\r\n                if (link) {\r\n                    this.addMission(new LinkMiningMission(this, \"miner\" + i, source, link));\r\n                    continue;\r\n                } else {\r\n                    this.placeLink(source);\r\n                }\r\n            }\r\n            this.addMission(new MiningMission(this, \"miner\" + i, source));\r\n        }\r\n\r\n        // build construction\r\n        let buildMission = new BuilderMission(this, defenseGuru);\r\n        this.addMission(buildMission);\r\n\r\n        if (this.flag.room.storage) {\r\n            // use link array near storage to fire energy at controller link (pre-rcl8)\r\n            // this.addMission(new LinkNetworkMission(this));\r\n            // mine minerals\r\n            this.addMission(new GeologyMission(this));\r\n            // scout and place harvest flags\r\n            this.addMission(new SurveyMission(this));\r\n            // repair walls\r\n            this.addMission(new MasonMission(this, defenseGuru));\r\n        }\r\n\r\n        // upgrader controller\r\n        let boostUpgraders = this.flag.room.controller.level < 8;\r\n        let upgradeMission = new UpgradeMission(this, boostUpgraders);\r\n        this.addMission(upgradeMission);\r\n\r\n        // upkeep roads and walls\r\n        this.towerRepair();\r\n    }\r\n\r\n    finalizeOperation() {\r\n    }\r\n\r\n    invalidateOperationCache() {\r\n    }\r\n\r\n    public nuke(x: number, y: number, roomName: string): string {\r\n        let nuker = _.head(this.flag.room.find(FIND_MY_STRUCTURES, {filter: {structureType: STRUCTURE_NUKER}})) as StructureNuker;\r\n        let outcome = nuker.launchNuke(new RoomPosition(x, y, roomName));\r\n        if (outcome === OK) {\r\n            empire.map.addNuke({tick: Game.time, roomName: roomName});\r\n            return \"NUKER: Bombs away! \\\\o/\";\r\n        }\r\n        else {\r\n            return `NUKER: error: ${outcome}`;\r\n        }\r\n    }\r\n\r\n    public moveLayout(x: number, y: number, rotation: number): string {\r\n        this.memory.centerPosition = new RoomPosition(x, y, this.flag.pos.roomName);\r\n        this.memory.rotation = rotation;\r\n        this.memory.layoutMap = undefined;\r\n        this.showLayout(false);\r\n\r\n        return `moving layout, run command ${this.name}.showLayout(true) to display`\r\n    }\r\n\r\n    public showLayout(show: boolean, type = \"all\"): string {\r\n        if (!this.memory.rotation === undefined || !this.memory.centerPosition) {\r\n            return \"No layout defined\";\r\n        }\r\n\r\n        if (!show) {\r\n            for (let flagName in Game.flags) {\r\n                let flag = Game.flags[flagName];\r\n                if (flag.name.indexOf(`${this.name}_layout`) >= 0) { flag.remove(); }}\r\n            return \"removing layout flags\";\r\n        }\r\n\r\n        for (let structureType of Object.keys(CONSTRUCTION_COST)) {\r\n            if (type == \"all\" || type == structureType ) {\r\n               let coords = this.layoutCoords(structureType);\r\n                let order = 0;\r\n                for (let coord of coords) {\r\n                    let flagName = `${this.name}_layout_${structureType}_${order++}`;\r\n                    let flag = Game.flags[flagName];\r\n                    if (flag) {\r\n                        flag.setPosition(coord.x, coord.y);\r\n                        continue;\r\n                    }\r\n\r\n                    let position = helper.coordToPosition(coord, this.memory.centerPosition, this.memory.rotation);\r\n                    let color = COLOR_WHITE;\r\n                    if (structureType === STRUCTURE_EXTENSION || structureType === STRUCTURE_SPAWN\r\n                        || structureType === STRUCTURE_STORAGE || structureType === STRUCTURE_NUKER) {\r\n                        color = COLOR_YELLOW;\r\n                    }\r\n                    else if (structureType === STRUCTURE_TOWER) {\r\n                        color = COLOR_BLUE;\r\n                    }\r\n                    else if (structureType === STRUCTURE_LAB || structureType === STRUCTURE_TERMINAL) {\r\n                        color = COLOR_CYAN;\r\n                    }\r\n                    else if (structureType === STRUCTURE_POWER_SPAWN) {\r\n                        color = COLOR_RED;\r\n                    }\r\n                    else if (structureType === STRUCTURE_OBSERVER) {\r\n                        color = COLOR_BROWN;\r\n                    }\r\n                    else if (structureType === STRUCTURE_ROAD) {\r\n                        color = COLOR_GREY;\r\n                    }\r\n                    else if (structureType === STRUCTURE_RAMPART) {\r\n                        color = COLOR_GREEN;\r\n                    }\r\n                    position.createFlag(flagName, color);\r\n                }\r\n            }\r\n        }\r\n\r\n        return `showing layout flags for: ${type}`\r\n    }\r\n\r\n    private autoLayout() {\r\n\r\n        this.initWithSpawn();\r\n        if (!this.memory.centerPosition || this.memory.rotation === undefined ) return;\r\n        this.initAutoLayout();\r\n        this.buildLayout();\r\n    }\r\n\r\n    private buildLayout() {\r\n\r\n        if (!this.flag.room) return;\r\n        let structureTypes = Object.keys(CONSTRUCTION_COST);\r\n        if (this.memory.checkLayoutIndex === undefined || this.memory.checkLayoutIndex >= structureTypes.length) {\r\n            this.memory.checkLayoutIndex = 0;\r\n        }\r\n        let structureType = structureTypes[this.memory.checkLayoutIndex++];\r\n\r\n        this.fixedPlacement(structureType);\r\n        this.temporaryPlacement(this.flag.room.controller.level);\r\n    }\r\n\r\n    private fixedPlacement(structureType: string) {\r\n        let controllerLevel = this.flag.room.controller.level;\r\n        let constructionPriority = Math.max(controllerLevel * 10, 40);\r\n        if (controllerLevel === 1) {\r\n            constructionPriority = 90;\r\n        }\r\n        if (Object.keys(Game.constructionSites).length > constructionPriority) return;\r\n        if (structureType === STRUCTURE_RAMPART && controllerLevel < 5) return;\r\n        if (!this.memory.lastChecked) this.memory.lastChecked = {};\r\n        if (Game.time - this.memory.lastChecked[structureType] < 1000) return;\r\n\r\n        let coords = this.layoutCoords(structureType);\r\n        let allowedCount = this.allowedCount(structureType, controllerLevel);\r\n\r\n        for (let i = 0; i < coords.length; i++) {\r\n            if (i >= allowedCount) break;\r\n\r\n            let coord = coords[i];\r\n            let position = helper.coordToPosition(coord, this.memory.centerPosition, this.memory.rotation);\r\n            let structure = position.lookForStructure(structureType);\r\n            if (structure) {\r\n                this.repairLayout(structure);\r\n                continue;\r\n            }\r\n            let hasConstruction = position.lookFor(LOOK_CONSTRUCTION_SITES)[0];\r\n            if (hasConstruction) continue;\r\n\r\n            let outcome = position.createConstructionSite(structureType);\r\n            if (outcome === OK) {\r\n                console.log(`LAYOUT: placing ${structureType} at ${position} (${this.name})`);\r\n            }\r\n            else {\r\n                // console.log(`LAYOUT: bad construction placement: ${outcome}, ${structureType}, ${position} (${this.name})`);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.memory.lastChecked[structureType] = Game.time;\r\n    }\r\n\r\n    private recalculateLayout(layoutType?: string) {\r\n\r\n        if (!this.memory.seedData) {\r\n            let sourceData = [];\r\n            for (let source of this.flag.room.find<Source>(FIND_SOURCES)) {\r\n                sourceData.push({pos: source.pos, amount: 3000 })\r\n            }\r\n            this.memory.seedData = {\r\n                sourceData: sourceData,\r\n                seedScan: {},\r\n                seedSelectData: undefined\r\n            }\r\n        }\r\n\r\n        let analysis = new SeedAnalysis(this.flag.room, this.memory.seedData);\r\n        let results = analysis.run(this.staticStructures, layoutType);\r\n        if (results) {\r\n            let centerPosition = new RoomPosition(results.origin.x, results.origin.y, this.flag.room.name);\r\n            if (results.seedType === this.type) {\r\n                console.log(`${this.name} found best seed of type ${results.seedType}, initiating auto-layout`);\r\n                this.memory.centerPosition = centerPosition;\r\n                this.memory.rotation = results.rotation;\r\n            }\r\n            else {\r\n                console.log(`${this.name} found best seed of another type, replacing operation`);\r\n                let flagName = `${results.seedType}_${this.name}`;\r\n                Memory.flags[flagName] = { centerPosition: centerPosition, rotation: results.rotation };\r\n                this.flag.pos.createFlag(flagName, COLOR_GREY);\r\n                this.flag.remove();\r\n            }\r\n            this.memory.seedData = undefined; // clean-up memory\r\n        }\r\n        else {\r\n            console.log(`${this.name} could not find a suitable auto-layout, consider using another spawn location or room`);\r\n        }\r\n    }\r\n\r\n    protected allowedCount(structureType: string, level: number): number {\r\n        if (level < 5 && (structureType === STRUCTURE_RAMPART || structureType === STRUCTURE_WALL\r\n            || structureType === STRUCTURE_ROAD)) {\r\n            return 0;\r\n        }\r\n\r\n        return Math.min(CONTROLLER_STRUCTURES[structureType][level], this.layoutCoords(structureType).length)\r\n    }\r\n\r\n    protected layoutCoords(structureType: string): Coord[] {\r\n        if (this.staticStructures[structureType]) {\r\n            return this.staticStructures[structureType]\r\n        }\r\n        else if (this.memory.layoutMap && this.memory.layoutMap[structureType]) {\r\n            return this.memory.layoutMap[structureType];\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    private initWithSpawn() {\r\n\r\n        if (!this.flag.room) return;\r\n        if (!this.memory.centerPosition || this.memory.rotation === undefined) {\r\n            let structureCount = this.flag.room.find(FIND_STRUCTURES).length;\r\n            if (structureCount === 1) {\r\n                this.recalculateLayout();\r\n            }\r\n            else if (structureCount > 1) {\r\n                this.recalculateLayout(this.type)\r\n            }\r\n            return;\r\n        }\r\n    }\r\n\r\n    protected towerRepair() {\r\n\r\n        if (this.flag.room.hostiles.length > 0) return;\r\n\r\n        let structureType = STRUCTURE_RAMPART;\r\n        if (Game.time % 2 === 0) {\r\n            structureType = STRUCTURE_ROAD;\r\n        }\r\n\r\n        let coords = this.layoutCoords(structureType);\r\n        if (!this.memory.repairIndices) { this.memory.repairIndices = {} }\r\n        if (this.memory.repairIndices[structureType] === undefined ||\r\n            this.memory.repairIndices[structureType] >= coords.length) {\r\n            this.memory.repairIndices[structureType] = 0;\r\n        }\r\n\r\n        let coord = coords[this.memory.repairIndices[structureType]++];\r\n        //FIXME this check is for a room with a failed layout\r\n        if (this.memory.centerPosition) {\r\n            let position = helper.coordToPosition(coord, this.memory.centerPosition, this.memory.rotation);\r\n            let structure = position.lookForStructure(structureType);\r\n            if (structure) {\r\n                this.repairLayout(structure);\r\n            }\r\n        }\r\n    }\r\n\r\n    // deprecated\r\n    private findRemoteSpawn(distanceLimit: number, levelRequirement = 8): SpawnGroup {\r\n        let remoteSpawn = _(empire.spawnGroups)\r\n            .filter((s: SpawnGroup) => {\r\n                return Game.map.getRoomLinearDistance(this.flag.pos.roomName, s.room.name) <= distanceLimit\r\n                    && s.room.controller.level >= levelRequirement\r\n                    && s.averageAvailability > .3\r\n                    && s.isAvailable\r\n            })\r\n            .sortBy((s: SpawnGroup) => {\r\n                return Game.map.getRoomLinearDistance(this.flag.pos.roomName, s.room.name)\r\n            })\r\n            .head();\r\n        return remoteSpawn;\r\n    }\r\n\r\n    private repairLayout(structure: Structure) {\r\n\r\n        let repairsNeeded = Math.floor((structure.hitsMax - structure.hits) / 800);\r\n        if (structure.structureType === STRUCTURE_RAMPART) {\r\n            if (structure.hits >= 100000) { return; }\r\n        }\r\n        else {\r\n            if (repairsNeeded === 0) { return; }\r\n        }\r\n\r\n        let towers = this.flag.room.findStructures<StructureTower>(STRUCTURE_TOWER);\r\n\r\n        for (let tower of towers) {\r\n            if (repairsNeeded === 0) { return; }\r\n            if (tower.alreadyFired) { continue; }\r\n            if (!tower.pos.inRangeTo(structure, Math.max(5, this.memory.radius - 3))) { continue; }\r\n            let outcome = tower.repair(structure);\r\n            repairsNeeded--;\r\n        }\r\n\r\n        if (repairsNeeded > 0 && towers.length > 0) {\r\n            structure.pos.findClosestByRange<StructureTower>(towers).repair(structure);\r\n        }\r\n    }\r\n\r\n    private placeLink(source: Source) {\r\n        if (source.pos.findInRange(FIND_CONSTRUCTION_SITES, 2).length > 0) return;\r\n        if (source.pos.findInRange(source.room.findStructures<StructureLink>(STRUCTURE_LINK), 2).length > 0) return;\r\n\r\n        let positions: RoomPosition[] = [];\r\n        let ret = empire.traveler.findTravelPath(this.room.storage, source);\r\n        if (ret.incomplete) { console.log(`LINKMINER: Path to source incomplete ${this.flag.pos.roomName}`); }\r\n        let minerPos = _.last(ret.path);\r\n        for (let position of minerPos.openAdjacentSpots(true)) {\r\n            if (!position.isPassible(true)) { continue; }\r\n            if (position.findInRange([this.room.controller], 3).length > 0) { continue; }\r\n            if (position.findInRange(FIND_SOURCES, 2).length > 1) { continue; }\r\n            if (position.findInRange(ret.path, 0).length > 0) {continue; }\r\n            positions.push(position);\r\n        }\r\n        if (positions.length === 0) {\r\n            console.log(`LINKMINER: no suitable position for link ${this.flag.pos.roomName}`);\r\n        }\r\n\r\n        positions = _.sortBy(positions, (p: RoomPosition) => p.getRangeTo(this.flag.room.storage));\r\n        positions[0].createConstructionSite(STRUCTURE_LINK);\r\n        notifier.log(`placed link ${this.flag.room.name}`);\r\n\r\n    }\r\n}\r\n","import {DefenseMission} from \"../missions/DefenseMission\";\nimport {Coord} from \"../../interfaces\";\nimport {ControllerOperation} from \"./ControllerOperation\";\nimport {helper} from \"../../helpers/helper\";\n\nconst QUAD_RADIUS = 6;\n\nexport class QuadOperation extends ControllerOperation {\n\n    /**\n     * Manages the activities of an owned room, assumes bonzaiferroni's build spec\n     * @param flag\n     * @param name\n     * @param type\n     * @param empire\n     */\n\n    protected initAutoLayout() {\n        if(!this.memory.layoutMap) {\n            this.memory.layoutMap = {};\n            this.memory.radius = QUAD_RADIUS;\n        }\n    }\n\n    protected temporaryPlacement(level: number) {\n        if (!this.memory.temporaryPlacement) this.memory.temporaryPlacement = {};\n        if (!this.memory.temporaryPlacement[level]) {\n\n            let actions: {actionType: string, structureType: string, coord: Coord}[] = [];\n\n            // links\n            if (level === 5) {\n                actions.push({actionType: \"place\", structureType: STRUCTURE_LINK, coord: {x: 2, y: 2}});\n            }\n            if (level === 6) {\n                actions.push({actionType: \"place\", structureType: STRUCTURE_LINK, coord: {x: 2, y: 3}});\n            }\n            if (level === 7) {\n                actions.push({actionType: \"place\", structureType: STRUCTURE_LINK, coord: {x: 2, y: 4}});\n            }\n            if (level === 8) {\n                actions.push({actionType: \"remove\", structureType: STRUCTURE_LINK, coord: {x: 2, y: 3}});\n                actions.push({actionType: \"remove\", structureType: STRUCTURE_LINK, coord: {x: 2, y: 4}});\n            }\n\n            for (let action of actions) {\n                let outcome;\n                let position = helper.coordToPosition(action.coord, this.memory.centerPosition, this.memory.rotation);\n                if (action.actionType === \"place\") {\n                    outcome = position.createConstructionSite(action.structureType);\n                }\n                else {\n                    let structure = position.lookForStructure(action.structureType);\n                    if (structure) {\n                        outcome = structure.destroy();\n                    }\n                    else {\n                        outcome = \"noStructure\";\n                    }\n                }\n\n                if (outcome === OK) {\n                    console.log(`LAYOUT: ${action.actionType}d temporary ${action.structureType} (${this.name}, level: ${level})`)\n                }\n                else {\n                    console.log(`LAYOUT: problem with temp placement, please follow up in ${this.name}`);\n                    console.log(`tried to ${action.actionType} ${action.structureType} at level ${level}, outcome: ${outcome}`);\n                }\n            }\n\n            this.memory.temporaryPlacement[level] = true;\n        }\n    }\n\n    staticStructures = {\n        [STRUCTURE_SPAWN]: [{x: 2, y: 0}, {x: 0, y: -2}, {x: -2, y: 0}],\n        [STRUCTURE_TOWER]: [\n            {x: 1, y: -1}, {x: -1, y: -1}, {x: 0, y: 1}, {x: 1, y: 0}, {x: 0, y: -1}, {x: -1, y: 0}],\n        [STRUCTURE_EXTENSION]: [\n            {x: 3, y: -1}, {x: 2, y: -2}, {x: 1, y: -3}, {x: 3, y: -2}, {x: 2, y: -3},\n            {x: 0, y: -4}, {x: -1, y: -3}, {x: -2, y: -2}, {x: -3, y: -1}, {x: -3, y: -2},\n            {x: -2, y: -3}, {x: -2, y: -4}, {x: 4, y: 0}, {x: -4, y: 0}, {x: -3, y: 1},\n            {x: -1, y: 1}, {x: 3, y: 1}, {x: 4, y: -2}, {x: 3, y: -3}, {x: 2, y: -4},\n            {x: -3, y: -3}, {x: -4, y: -2}, {x: 5, y: -3}, {x: 4, y: -4}, {x: 3, y: -5},\n            {x: -3, y: -5}, {x: -4, y: -4}, {x: -5, y: -3}, {x: 3, y: 2}, {x: 3, y: 3},\n            {x: 4, y: 2}, {x: 3, y: 5}, {x: 4, y: 4}, {x: 5, y: 3}, {x: 5, y: 1},\n            {x: 5, y: 0}, {x: 5, y: -1}, {x: 5, y: -4}, {x: 5, y: -5}, {x: 4, y: -5},\n            {x: 1, y: -5}, {x: 0, y: -5}, {x: -1, y: -5}, {x: -4, y: -5}, {x: -5, y: -5},\n            {x: -5, y: -4}, {x: -5, y: -1}, {x: -5, y: 0}, {x: -5, y: 1}, {x: 4, y: 5},\n            {x: 5, y: 4}, {x: 5, y: 5}, {x: -6, y: 2}, {x: -6, y: -2}, {x: -2, y: -6},\n            {x: 2, y: 4}, {x: 2, y: -6}, {x: 6, y: -2}, {x: 6, y: 2}, {x: 2, y: 3}, ],\n        [STRUCTURE_STORAGE]: [{x: 0, y: 4}],\n        [STRUCTURE_TERMINAL]: [{x: -2, y: 2}],\n        [STRUCTURE_NUKER]: [{x: 0, y: 6}],\n        [STRUCTURE_POWER_SPAWN]: [{x: 0, y: 2}],\n        [STRUCTURE_OBSERVER]: [{x: -5, y: 5}],\n        [STRUCTURE_LAB]: [\n            {x: -2, y: 4}, {x: -3, y: 3}, {x: -4, y: 2}, {x: -3, y: 5}, {x: -4, y: 4},\n            {x: -5, y: 3}, {x: -2, y: 3}, {x: -3, y: 2}, {x: -4, y: 5}, {x: -5, y: 4}],\n        [STRUCTURE_ROAD]: [\n\n            // diamond (n = 12)\n            {x: 3, y: 0}, {x: 2, y: -1}, {x: 1, y: -2}, {x: 0, y: -3}, {x: -1, y: -2},\n            {x: -2, y: -1}, {x: -3, y: 0}, {x: -2, y: 1}, {x: -1, y: 2}, {x: 0, y: 3},\n            {x: 1, y: 2}, {x: 2, y: 1},\n\n            // x-pattern (n = 24)\n            {x: 4, y: -1}, {x: 5, y: -2}, {x: 4, y: -3},\n            {x: 3, y: -4}, {x: 2, y: -5}, {x: 1, y: -4}, {x: -1, y: -4}, {x: -2, y: -5},\n            {x: -3, y: -4}, {x: -4, y: -3}, {x: -5, y: -2}, {x: -4, y: -1}, {x: -4, y: 1},\n            {x: -5, y: 2}, {x: -4, y: 3}, {x: -3, y: 4}, {x: -2, y: 5}, {x: -1, y: 4},\n            {x: 1, y: 4}, {x: 2, y: 5}, {x: 3, y: 4}, {x: 4, y: 3}, {x: 5, y: 2},\n            {x: 4, y: 1},\n\n            // outside (n = 33)\n            {x: 6, y: -3}, {x: 6, y: -4}, {x: 6, y: -5}, {x: 5, y: -6},\n            {x: 4, y: -6}, {x: 3, y: -6}, {x: 1, y: -6}, {x: 0, y: -6}, {x: -1, y: -6},\n            {x: -3, y: -6}, {x: -4, y: -6}, {x: -5, y: -6}, {x: -6, y: -5}, {x: -6, y: -4},\n            {x: -6, y: -3}, {x: -6, y: -1}, {x: -6, y: 0}, {x: -6, y: 1}, {x: -6, y: 3},\n            {x: -6, y: 4}, {x: -6, y: 5}, {x: -5, y: 6}, {x: -4, y: 6}, {x: -3, y: 6},\n            {x: 3, y: 6}, {x: 4, y: 6}, {x: 5, y: 6}, {x: 6, y: 5}, {x: 6, y: 4},\n            {x: 6, y: 3}, {x: 6, y: 1}, {x: 6, y: 0}, {x: 6, y: -1},\n        ],\n        [STRUCTURE_RAMPART]: [\n            // top wall (n = 12)\n            {x: -5, y: -6}, {x: -4, y: -6}, {x: -3, y: -6}, {x: -2, y: -6}, {x: -1, y: -6},\n            {x: 0, y: -6}, {x: 1, y: -6}, {x: 2, y: -6}, {x: 3, y: -6}, {x: 4, y: -6},\n            {x: 5, y: -6}, {x: 5, y: -5},\n\n            // right wall (n = 12)\n            {x: 6, y: -5}, {x: 6, y: -4}, {x: 6, y: -3}, {x: 6, y: -2}, {x: 6, y: -1},\n            {x: 6, y: 0}, {x: 6, y: 1}, {x: 6, y: 2}, {x: 6, y: 3}, {x: 6, y: 4},\n            {x: 6, y: 5}, {x: 5, y: 5},\n\n            // bottom wall (n = 12)\n            {x: 5, y: 6}, {x: 4, y: 6}, {x: 3, y: 6}, {x: 2, y: 6}, {x: 1, y: 6},\n            {x: 0, y: 6}, {x: -1, y: 6}, {x: -2, y: 6}, {x: -3, y: 6}, {x: -4, y: 6},\n            {x: -5, y: 6}, {x: -5, y: 5},\n\n            // left wall (n = 12)\n            {x: -6, y: 5}, {x: -6, y: 4}, {x: -6, y: 3}, {x: -6, y: 2}, {x: -6, y: 1},\n            {x: -6, y: 0}, {x: -6, y: -1}, {x: -6, y: -2}, {x: -6, y: -3}, {x: -6, y: -4},\n            {x: -6, y: -5}, {x: -5, y: -5},\n\n            // storage (n = 1)\n            {x: 0, y: 4},\n\n            // labs (n = 8)\n            {x: -4, y: 5}, {x: -5, y: 4}, {x: -5, y: 3}, {x: -4, y: 4}, {x: -3, y: 5},\n            {x: -4, y: 2}, {x: -3, y: 3}, {x: -2, y: 4},\n        ]\n\n    };\n}","import {Coord} from \"../interfaces\";\nimport {helper} from \"../helpers/helper\";\nexport class FlexGenerator {\n\n    leftMost = 0;\n    rightMost = 0;\n    topMost = 0;\n    bottomMost = 0;\n\n    radius = 0;\n    centerPosition: RoomPosition;\n    rotation: number;\n\n    coreStructureCoordinates: {[structureType: string]: Coord[]};\n    remaining = {\n        [STRUCTURE_TOWER]: 6,\n        [STRUCTURE_EXTENSION]: 60,\n        [STRUCTURE_OBSERVER]: 1,\n    };\n\n    roomName: string;\n    map: {[x: number]: {[y: number]: string }} = {};\n\n    roadPositions: RoomPosition[] = [];\n    noRoadAccess: Coord[] = [];\n    wallCount: number;\n    recheckCount = 0;\n\n    constructor(centerPosition: RoomPosition, rotation: number, staticStructures: {[structureType: string]: Coord[]}) {\n        if (!(centerPosition instanceof RoomPosition)) {\n            centerPosition = helper.deserializeRoomPosition(centerPosition);\n        }\n\n        this.centerPosition = centerPosition;\n        this.roomName = centerPosition.roomName;\n        this.rotation = rotation;\n        this.leftMost = centerPosition.x;\n        this.rightMost = centerPosition.x;\n        this.topMost = centerPosition.y;\n        this.bottomMost = centerPosition.y;\n\n        this.coreStructureCoordinates = staticStructures;\n    }\n\n    generate(): {[structureType: string]: Coord[]} {\n\n        this.addFixedStructuresToMap();\n        this.addUsingExpandingRadius();\n        this.addWalls();\n        this.removeStragglingRoads();\n        return this.generateCoords();\n    }\n\n    private addFixedStructuresToMap() {\n\n        this.coreStructureCoordinates[STRUCTURE_ROAD] = [\n            {x: 0, y: 0}, {x: 1, y: 1}, {x: 2, y: 2}, {x: -1, y: -1}, {x: -2, y: -2},\n            {x: -2, y: 0}, {x: 0, y: -2}, {x: 0, y: -4}, {x: 1, y: -3}, {x: 2, y: -2},\n            {x: 3, y: -1}, {x: 4, y: 0}, {x: 3, y: 1}, {x: 1, y: 3}, {x: 0, y: 4},\n            {x: -1, y: 3}, {x: -3, y: 1}, {x: -4, y: 0}, {x: -3, y: -1}, {x: -1, y: -3},\n        ];\n\n        this.coreStructureCoordinates[\"empty\"] = [\n            {x: -1, y: -2}, {x: 1, y: -2}, {x: 2, y: -1}\n        ];\n\n        for (let structureType in this.coreStructureCoordinates) {\n            let coords = this.coreStructureCoordinates[structureType];\n            for (let coord of coords) {\n                let position = helper.coordToPosition(coord, this.centerPosition, this.rotation);\n                this.addStructurePosition(position, structureType);\n            }\n        }\n    }\n\n    addUsingExpandingRadius() {\n        let iterations = 0;\n        while (_.sum(this.remaining) > 0 && iterations < 100) {\n            iterations++;\n            for (let xDelta = -this.radius; xDelta <= this.radius; xDelta++) {\n                let x = this.centerPosition.x + xDelta;\n                if (x < 3 || x > 46) { continue; }\n\n                for (let yDelta = -this.radius; yDelta <= this.radius; yDelta++) {\n                    // only consider points on perimeter of gradually expanding rectangle\n                    if (Math.abs(yDelta) !== this.radius && Math.abs(xDelta) !== this.radius) continue;\n\n                    let y = this.centerPosition.y + yDelta;\n                    if (y < 3 || y > 46) { continue; }\n\n                    let position = new RoomPosition(x, y, this.roomName);\n                    if (position.lookFor(LOOK_TERRAIN)[0] === \"wall\") continue;\n\n                    this.addRemaining(xDelta, yDelta);\n                }\n            }\n            this.radius++;\n        }\n\n        if (iterations === 100) {\n            console.log(\"WARNING: layout process entered endless loop, life is terrible, give up all hope\");\n        }\n    }\n\n    addRemaining(xDelta: number, yDelta: number, save = true): boolean {\n\n        let x = this.centerPosition.x + xDelta;\n        let y = this.centerPosition.y + yDelta;\n        let alreadyUsed = this.checkIfUsed(x, y);\n        console.log(`alreadyUsed: ${alreadyUsed} x: ${xDelta}, y: ${yDelta}`);\n        if (alreadyUsed) return;\n\n        let position = new RoomPosition(x, y, this.roomName);\n        if (Game.rooms[this.roomName]) {\n            if (position.inRangeTo(position.findClosestByRange<Source>(FIND_SOURCES), 2)) return;\n            if (position.inRangeTo(Game.rooms[this.roomName].controller, 3)) return;\n        }\n\n        let foundRoad = false;\n        for (let roadPos of this.roadPositions) {\n            if (position.isNearTo(roadPos)) {\n                let structureType = this.findStructureType(xDelta, yDelta);\n                console.log(\"findStructureType: \" + structureType)\n                if (structureType) {\n                    this.addStructurePosition(position, structureType);\n                    this.remaining[structureType]--;\n                    foundRoad = true;\n                    break;\n                }\n            }\n        }\n\n        if (!foundRoad && save) {\n            this.noRoadAccess.push({x: xDelta, y: yDelta});\n        }\n    }\n\n    private recheckNonAccess() {\n        // if (this.recheckCount > 100) return;\n        this.recheckCount++;\n        if (this.recheckCount > 100) throw \"too fucking long\";\n        console.log(\"rechecking \" + this.recheckCount, this.noRoadAccess.length);\n        this.noRoadAccess = _.filter(this.noRoadAccess, (c: Coord) => !this.checkIfUsed(c.x, c.y));\n        for (let coord of this.noRoadAccess) {\n            this.addRemaining(coord.x, coord.y, false);\n        }\n    }\n\n    checkIfUsed(x: number, y: number): boolean {\n        return this.map[x] !== undefined && this.map[x][y] !== undefined;\n    }\n\n    addStructurePosition(pos: RoomPosition, structureType: string, overwrite = false) {\n        if (!this.map[pos.x]) this.map[pos.x] = {};\n        let existingStructureType = this.map[pos.x][pos.y];\n        if (existingStructureType) {\n            if (overwrite) { this.remaining[existingStructureType]++; }\n            else { return; }\n        }\n\n        this.map[pos.x][pos.y] = structureType;\n\n        if (structureType === STRUCTURE_ROAD) {\n            console.log(\"foundRoad, add pos and recheck: \" + pos);\n            this.roadPositions.push(pos);\n            this.recheckNonAccess()\n        }\n        else if (structureType !== STRUCTURE_RAMPART && structureType !== STRUCTURE_WALL) {\n            if (pos.x < this.leftMost) { this.leftMost = pos.x; }\n            if (pos.x > this.rightMost) { this.rightMost = pos.x; }\n            if (pos.y < this.topMost) { this.topMost = pos.y; }\n            if (pos.y > this.bottomMost) { this.bottomMost = pos.y; }\n        }\n    }\n\n    private findStructureType(xDelta: number, yDelta: number): string {\n        let isRoadCoord = this.checkValidRoadCoord(xDelta, yDelta);\n\n        if (isRoadCoord) {\n            return STRUCTURE_ROAD;\n        }\n        else {\n            for (let structureType in this.remaining) {\n                if (this.remaining[structureType]) {\n                    return structureType;\n                }\n            }\n        }\n    }\n\n    addWalls() {\n        // push edge by 1 to make room for walls\n        let leftWall = this.leftMost - 1;\n        let rightWall = this.rightMost + 1;\n        let topWall = this.topMost - 1;\n        let bottomWall = this.bottomMost + 1;\n        let allWallPositions: RoomPosition[] = [];\n        let validWallPositions: RoomPosition[] = [];\n\n        console.log(leftWall, rightWall, topWall, bottomWall);\n\n        // mark off matrix, natural walls are impassible, all other tiles get 1\n        let exitPositions: RoomPosition[] = [];\n        let matrix = new PathFinder.CostMatrix();\n        let lastPositionWasExit = { left: false, right: false, top: false, bottom: false };\n        for (let x = 0; x < 50; x++) {\n            for (let y = 0; y < 50; y++) {\n                let currentBorder;\n                if (x === 0) currentBorder = \"left\";\n                else if (x === 49) currentBorder = \"right\";\n                else if (y === 0) currentBorder = \"top\";\n                else if (y === 49) currentBorder = \"bottom\";\n\n                let position = new RoomPosition(x, y, this.roomName);\n                if (position.lookFor(LOOK_TERRAIN)[0] === \"wall\") {\n                    matrix.set(x, y, 0xff);\n                    if (currentBorder) {\n                        lastPositionWasExit[currentBorder] = false;\n                    }\n                }\n                else {\n                    matrix.set(x, y, 1);\n                    if (currentBorder) {\n                        if (!lastPositionWasExit[currentBorder]) {\n                            exitPositions.push(position);\n                        }\n                        lastPositionWasExit[currentBorder] = true;\n                    }\n                }\n            }\n        }\n\n        console.log(`LAYOUT: found ${exitPositions.length} exits to path from`);\n\n        // start with every wall position being valid around the border\n        for (let x = leftWall; x <= rightWall; x++) {\n            for (let y = topWall; y <= bottomWall; y++) {\n                if (x !== leftWall && x !== rightWall && y !== topWall && y !== bottomWall) continue;\n\n                let position = new RoomPosition(x, y, this.roomName);\n                if (position.lookFor(LOOK_TERRAIN)[0] === \"wall\") continue;\n                allWallPositions.push(position);\n                matrix.set(x, y, 0xff);\n            }\n        }\n\n        // send theoretical invaders at the center from each exit and remove the walls that don't make a\n        // difference on whether they reach the center\n        let centerPosition = new RoomPosition(this.centerPosition.x, this.centerPosition.y, this.roomName);\n        for (let wallPosition of allWallPositions) {\n            let breach = false;\n            matrix.set(wallPosition.x, wallPosition.y, 1);\n            for (let exitPosition of exitPositions) {\n                let ret = PathFinder.search(exitPosition, [{pos: centerPosition, range: 0}], {\n                    maxRooms: 1,\n                    roomCallback: (roomName: string): CostMatrix => {\n                        if (roomName === this.roomName) {\n                            return matrix;\n                        }\n                    }});\n                if (!ret.incomplete && ret.path[ret.path.length - 1].inRangeTo(centerPosition, 0)) {\n                    breach = true;\n                    break;\n                }\n            }\n            if (breach) {\n                validWallPositions.push(wallPosition);\n                matrix.set(wallPosition.x, wallPosition.y, 0xff);\n            }\n            else {\n\n            }\n        }\n\n        for (let position of validWallPositions) {\n            this.addStructurePosition(position, STRUCTURE_RAMPART, true);\n        }\n        this.wallCount = validWallPositions.length;\n    }\n\n    private generateCoords(): {[structureType: string]: Coord[]} {\n        let roomPositions = {};\n\n        for (let x in this.map) {\n            for (let y in this.map[x]) {\n                let structureType = this.map[x][y];\n                if (structureType !== STRUCTURE_ROAD && _.includes(Object.keys(this.coreStructureCoordinates), structureType)) continue;\n                if (!roomPositions[structureType]) roomPositions[structureType] = [];\n                roomPositions[structureType].push(new RoomPosition(Number.parseInt(x), Number.parseInt(y), this.roomName));\n            }\n        }\n\n        let flexLayoutMap = {};\n        let centerPosition = new RoomPosition(this.centerPosition.x, this.centerPosition.y, this.roomName);\n        for (let structureType in roomPositions) {\n            let sortedByDistance = _.sortBy(roomPositions[structureType], (pos: RoomPosition) => pos.getRangeTo(centerPosition) );\n            flexLayoutMap[structureType] = [];\n            for (let position of sortedByDistance) {\n                let coord = helper.positionToCoord(position, this.centerPosition, this.rotation);\n                flexLayoutMap[structureType].push(coord);\n            }\n        }\n\n        return flexLayoutMap;\n    }\n\n    private checkValidRoadCoord(xDelta: number, yDelta: number): boolean {\n        // creates the 5-cluster pattern for extensions/roads that you can see in my rooms\n        let combinedDeviance = Math.abs(xDelta) + Math.abs(yDelta);\n        if (combinedDeviance % 2 !== 0 ) {\n            return false;\n        }\n        else if (xDelta % 2 === 0 && combinedDeviance % 4 !== 0) {\n            let pos = helper.coordToPosition({x: xDelta, y: yDelta}, this.centerPosition);\n\n            // check narrow passage due to natural walls\n            for (let direction = 2; direction <= 8; direction += 2) {\n                if (pos.getPositionAtDirection(direction).lookFor(LOOK_TERRAIN)[0] === \"wall\") {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    private removeStragglingRoads() {\n        for (let x in this.map) {\n            for (let y in this.map[x]) {\n                let xInt = Number.parseInt(x);\n                let yInt = Number.parseInt(y);\n                if (xInt < this.leftMost - 1 || xInt > this.rightMost + 1\n                    || yInt < this.topMost - 1 || yInt > this.bottomMost + 1) {\n                    this.map[x][y] = undefined;\n                }\n            }\n        }\n    }\n}","import {ControllerOperation} from \"./ControllerOperation\";\nimport {FlexGenerator} from \"../FlexGenerator\";\nimport {DefenseMission} from \"../missions/DefenseMission\";\nimport {Coord} from \"../../interfaces\";\nimport {helper} from \"../../helpers/helper\";\n\n\nexport class FlexOperation extends ControllerOperation {\n\n    protected temporaryPlacement(level: number) {\n        if (!this.memory.temporaryPlacement) this.memory.temporaryPlacement = {};\n        if (!this.memory.temporaryPlacement[level]) {\n\n            let actions: {actionType: string, structureType: string, coord: Coord}[] = [];\n\n            // links\n            if (level === 5) {\n                actions.push({actionType: \"place\", structureType: STRUCTURE_LINK, coord: {x: 2, y: -1}});\n            }\n            if (level === 6) {\n                actions.push({actionType: \"place\", structureType: STRUCTURE_LINK, coord: {x: 1, y: -1}});\n            }\n            if (level === 7) {\n                actions.push({actionType: \"place\", structureType: STRUCTURE_LINK, coord: {x: 0, y: -1}});\n            }\n            if (level === 8) {\n                actions.push({actionType: \"remove\", structureType: STRUCTURE_LINK, coord: {x: 1, y: -1}});\n                actions.push({actionType: \"remove\", structureType: STRUCTURE_LINK, coord: {x: 0, y: -1}});\n            }\n\n            for (let action of actions) {\n                let outcome;\n                let position = helper.coordToPosition(action.coord, this.memory.centerPosition, this.memory.rotation);\n                if (action.actionType === \"place\") {\n                    outcome = position.createConstructionSite(action.structureType);\n                }\n                else {\n                    let structure = position.lookForStructure(action.structureType);\n                    if (structure) {\n                        outcome = structure.destroy();\n                    }\n                    else {\n                        outcome = \"noStructure\";\n                    }\n                }\n\n                if (outcome === OK) {\n                    console.log(`LAYOUT: ${action.actionType}d temporary ${action.structureType} (${this.name}, level: ${level})`)\n                }\n                else {\n                    console.log(`LAYOUT: problem with temp placement, please follow up in ${this.name}`);\n                    console.log(`tried to ${action.actionType} ${action.structureType} at level ${level}, outcome: ${outcome}`);\n                }\n            }\n\n            this.memory.temporaryPlacement[level] = true;\n        }\n    }\n\n    protected initAutoLayout() {\n        if(!this.memory.layoutMap) {\n\n            if (this.memory.flexLayoutMap) {\n                // temporary patch for variable identifier change\n                this.memory.layoutMap = this.memory.flexLayoutMap;\n                this.memory.radius = this.memory.flexRadius;\n            }\n            else {\n                let map = new FlexGenerator(this.memory.centerPosition, this.memory.rotation, this.staticStructures);\n                this.memory.layoutMap = map.generate();\n                this.memory.radius = map.radius + 1;\n            }\n        }\n    }\n\n    staticStructures = {\n        [STRUCTURE_STORAGE]: [{x: 0, y: -3}],\n        [STRUCTURE_TERMINAL]: [{x: -2, y: -1}],\n        [STRUCTURE_SPAWN]: [{x: -2, y: 1}, {x: -1, y: 2}, {x: 0, y: 3}],\n        [STRUCTURE_NUKER]: [{x: 3, y: 0}],\n        [STRUCTURE_POWER_SPAWN]: [{x: -3, y: 0}],\n        [STRUCTURE_LAB]: [\n            {x: 1, y: 0}, {x: 2, y: 1}, {x: 0, y: 1},\n            {x: 1, y: 2}, {x: 2, y: 0}, {x: 0, y: 2},\n            {x: 0, y: -1}, {x: -1, y: 0}, {x: 1, y: -1}, {x: -1, y: 1},],\n    };\n}","import {Empire} from \"../ai/Empire\";\r\nimport {Operation} from \"../ai/operations/Operation\";\r\nimport {helper} from \"./helper\";\r\nimport {empire} from \"./loopHelper\";\r\nimport {WorldMap} from \"../ai/WorldMap\";\r\n\r\ndeclare var emp: Empire;\r\n\r\nexport var consoleCommands = {\r\n\r\n    /**\r\n     * Remove construction sites from a missionRoom\r\n     * @param roomName\r\n     * @param leaveProgressStarted - leave sites already started\r\n     * @param structureType\r\n     */\r\n\r\n    removeConstructionSites(roomName: string, leaveProgressStarted = true, structureType?: string) {\r\n        Game.rooms[roomName].find(FIND_MY_CONSTRUCTION_SITES).forEach( (site: ConstructionSite) => {\r\n            if ((!structureType || site.structureType === structureType) &&(!leaveProgressStarted || site.progress === 0)) {\r\n                site.remove();\r\n            }\r\n        })\r\n    },\r\n    // shorthand\r\n    rc(roomName: string, leaveProgressStarted: boolean, structureType: string) {\r\n        this.removeConstructionSites(roomName, leaveProgressStarted, structureType);\r\n    },\r\n\r\n    /**\r\n     * Remove all flags that contain a substring in the name, good for wiping out a previously used operation\r\n     * @param substr\r\n     */\r\n\r\n    removeFlags(substr: string) {\r\n      _.forEach(Game.flags, (flag) => {\r\n          if (_.includes(flag.name, substr) ) {\r\n              console.log(`removing flag ${flag.name} in ${flag.pos.roomName}`);\r\n              flag.remove();\r\n          }\r\n      });\r\n    },\r\n    // shorthand\r\n    rf(substr: string) {\r\n        this.removeFlags(substr);\r\n    },\r\n\r\n\r\n\r\n    /**\r\n     * remove most memory while leaving more important stuff intact, strongly not recommended unless you know what you are\r\n     * doing\r\n     */\r\n\r\n    wipeMemory() {\r\n        for (let flagName in Memory.flags) {\r\n            let flag = Game.flags[flagName];\r\n            if (flag) {\r\n                for (let propertyName of Object.keys(flag.memory)) {\r\n                    if (propertyName === \"power\") continue;\r\n                    if (propertyName === \"centerPosition\") continue;\r\n                    if (propertyName === \"rotation\") continue;\r\n                    if (propertyName === \"radius\") continue;\r\n                    if (propertyName === \"layoutMap\") continue;\r\n                    delete flag.memory[propertyName];\r\n                }\r\n            }\r\n            else {\r\n                delete Memory.flags[flagName];\r\n            }\r\n        }\r\n\r\n        for (let creepName in Memory.creeps) {\r\n            let creep = Game.creeps[creepName];\r\n            if (!creep) {\r\n                delete Memory.creeps[creepName];\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * remove old properties in memory that are no longer being used by the AI\r\n     */\r\n\r\n    removeUnusedProperties() {\r\n\r\n        let hostiles = false;\r\n        if (Memory.empire[\"hostileRooms\"]) {\r\n            hostiles = true;\r\n            delete Memory.empire[\"hostileRooms\"];\r\n        }\r\n\r\n        let radarCount = 0;\r\n        let spawnCount = 0;\r\n        let analCount = 0;\r\n        let flagCount = 0;\r\n        for (let flagName in Memory.flags) {\r\n            let flag = Game.flags[flagName];\r\n            if (flag) {\r\n                let flagMemory = Memory.flags[flagName];\r\n                for (let missionName in flagMemory) {\r\n                    if (!flagMemory.hasOwnProperty(missionName)) { continue; }\r\n                    let missionMemory = flagMemory[missionName];\r\n                    if (missionName === \"radar\") {\r\n                        radarCount++;\r\n                        delete flagMemory[missionName];\r\n                    }\r\n                    if (missionMemory[\"spawn\"]) {\r\n                        spawnCount++;\r\n                        delete missionMemory[\"spawn\"];\r\n                    }\r\n                    if (missionMemory[\"anal\"]) { // :)\r\n                        analCount++;\r\n                        delete missionMemory[\"anal\"];\r\n                    }\r\n                    if (missionName === \"bodyguard\" || missionName === \"defense\") {\r\n                        delete missionMemory[\"invaderProbable\"];\r\n                        delete missionMemory[\"invaderTrack\"];\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                flagCount++;\r\n                delete Memory.flags[flagName];\r\n            }\r\n        }\r\n\r\n        let creepCount = 0;\r\n        for (let creepName in Memory.creeps) {\r\n            let creep = Game.creeps[creepName];\r\n            if (!creep) {\r\n                creepCount++;\r\n                delete Memory.creeps[creepName];\r\n            }\r\n        }\r\n\r\n        return `gc Creeps: ${creepCount}, gc flags: ${flagCount}, spawn: ${spawnCount}, radar: ${radarCount}\\n` +\r\n                `analysis: ${analCount}, hostileRooms: ${hostiles}`\r\n    },\r\n\r\n    removeMissionData(missionName: string) {\r\n        for (let flagName in Memory.flags) {\r\n            delete Memory.flags[flagName][missionName];\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * Empty resources from a terminal, will only try to send one resource each tick so this must be called repeatedly\r\n     * on multiple ticks with the same arguments to completely empty a terminal\r\n     * @param origin\r\n     * @param destination\r\n     * @returns {any}\r\n     */\r\n\r\n    emptyTerminal(origin: string, destination: string) {\r\n        let originTerminal = Game.rooms[origin].terminal;\r\n        let outcome;\r\n        for (let resourceType in originTerminal.store) {\r\n            if (!originTerminal.store.hasOwnProperty(resourceType)) continue;\r\n            let amount = originTerminal.store[resourceType];\r\n            if (amount >= 100) {\r\n                if (resourceType !== RESOURCE_ENERGY) {\r\n                    outcome = originTerminal.send(resourceType, amount, destination);\r\n                    break;\r\n                }\r\n                else if (Object.keys(originTerminal.store).length === 1 ) {\r\n                    let distance = Game.map.getRoomLinearDistance(origin, destination, true);\r\n                    let stored = originTerminal.store.energy;\r\n                    let amountSendable = Math.floor(stored / (1 + 0.1 * distance));\r\n                    console.log(\"sending\", amountSendable, \"out of\", stored);\r\n                    outcome = originTerminal.send(RESOURCE_ENERGY, amountSendable, destination);\r\n                }\r\n            }\r\n\r\n        }\r\n        return outcome;\r\n    },\r\n\r\n    /**\r\n     * Changes the name of an operation, giving it a new flag. May result in some unintended consequences\r\n     * @param opName\r\n     * @param newOpName\r\n     * @returns {any}\r\n     */\r\n\r\n    changeOpName(opName: string, newOpName: string) {\r\n        let operation = Game.operations[opName] as Operation;\r\n        if (!operation) return \"you don't have an operation by that name\";\r\n\r\n        let newFlagName = operation.type + \"_\" + newOpName;\r\n        let outcome = operation.flag.pos.createFlag(newFlagName, operation.flag.color, operation.flag.secondaryColor);\r\n        if (_.isString(outcome)) {\r\n            Memory.flags[newFlagName] = operation.memory;\r\n            operation.flag.remove();\r\n            return `success, changed ${opName} to ${newOpName} (removing old flag)`;\r\n        }\r\n        else {\r\n            return \"error changing name: \" + outcome;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Place an order for a resource to be sent to any missionRoom. Good for making one-time deals.\r\n     * @param resourceType\r\n     * @param amount\r\n     * @param roomName\r\n     * @param efficiency - the number of terminals that should send the resource per tick, use a lower number to only send\r\n     * from the nearest terminals\r\n     * @returns {any}\r\n     */\r\n\r\n    order(resourceType: string, amount: number, roomName: string, efficiency = 10 ) {\r\n        if (!(amount > 0)) {\r\n            return \"usage: order(resourceType, amount, roomName, efficiency?)\";\r\n        }\r\n\r\n        if (Game.map.getRoomLinearDistance(\"E0S0\", roomName) < 0) {\r\n            return \"usage: order(resourceType, amount, roomName, efficiency?)\";\r\n        }\r\n\r\n        if (efficiency <= 0) {\r\n            return \"efficiency must be >= 1\";\r\n        }\r\n\r\n        Memory.resourceOrder[Game.time] = { resourceType: resourceType, amount: amount, roomName: roomName,\r\n            efficiency: efficiency, amountSent: 0};\r\n        return \"TRADE: scheduling \" + amount + \" \" + resourceType + \" to be sent to \" + roomName;\r\n    },\r\n\r\n    /**\r\n     * One-time send resource from all terminals to a specific missionRoom. For more control use cc.order()\r\n     * @param resourceType\r\n     * @param amount\r\n     * @param roomName\r\n     */\r\n\r\n    sendFromAll(resourceType: string, amount: number, roomName: string) {\r\n        _.forEach(Game.rooms, (room: Room) => {\r\n            if (room.controller && room.controller.level > 6 && room.terminal && room.terminal.my) {\r\n                let outcome = room.terminal.send(resourceType, amount, roomName)\r\n                console.log(room.name, \" sent \",amount,\" to \",roomName);\r\n            }\r\n        })\r\n    },\r\n\r\n    patchTraderMemory() {\r\n        for (let username in Memory.traders) {\r\n            let data = Memory.traders[username] as any;\r\n            if (data.recieved) {\r\n                for (let resourceType in data.recieved) {\r\n                    let amount = data.recieved[resourceType];\r\n                    if (data[resourceType] === undefined) data[resourceType] = 0;\r\n                    data[resourceType] += amount;\r\n                }\r\n            }\r\n            if (data.sent) {\r\n                for (let resourceType in data.sent) {\r\n                    let amount = data.sent[resourceType];\r\n                    if (data[resourceType] === undefined) data[resourceType] = 0;\r\n                    data[resourceType] -= amount;\r\n                }\r\n            }\r\n            delete data.recieved;\r\n            delete data.sent;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * If this looks silly it is because it is, I used to it go from one naming convention to another\r\n     * @param opName\r\n     * @returns {any}\r\n     */\r\n\r\n    roomConvention(opName: string, alternate?: string): string {\r\n        let controllerOp = Game.operations[opName + 0];\r\n        if (!controllerOp) {\r\n            return \"owned missionRoom doesn't exist\";\r\n        }\r\n\r\n        for (let direction = 1; direction <= 8; direction++) {\r\n            let tempName = opName + \"temp\" + direction;\r\n            if (!Game.operations[tempName]) continue;\r\n            console.log(`found temp ${tempName}`);\r\n            let desiredName = opName + direction;\r\n            let currentOp = Game.operations[desiredName];\r\n            if (currentOp) {\r\n                console.log(`current op with that name, changing name to temp`);\r\n                let tempDir = WorldMap.findRelativeRoomDir(controllerOp.flag.room.name, currentOp.flag.room.name);\r\n                return this.changeOpName(desiredName, opName + \"temp\" + tempDir);\r\n            }\r\n            console.log(`no temp conflicts`);\r\n            return this.changeOpName(tempName, desiredName);\r\n        }\r\n\r\n        for (let direction = 1; direction <= 9; direction++) {\r\n            let testOpName = opName + direction;\r\n            let testOp = Game.operations[testOpName];\r\n            if (!testOp && alternate) {\r\n                testOp = Game.operations[alternate + direction];\r\n                if (testOp) {\r\n                    testOpName = alternate + direction;\r\n                }\r\n            }\r\n            if (!testOp) { continue; }\r\n            let correctDir = WorldMap.findRelativeRoomDir(controllerOp.flag.room.name, testOp.flag.room.name);\r\n            if (correctDir === direction) { continue; }\r\n            let correctOpName = opName + correctDir;\r\n            console.log(`inconsistent name (${testOpName} at dir ${correctDir} should be ${correctOpName})`);\r\n            let currentOp = Game.operations[correctOpName];\r\n            if (currentOp) {\r\n                console.log(`current op with that name, changing name to temp`);\r\n                let tempDir = WorldMap.findRelativeRoomDir(controllerOp.flag.room.name, currentOp.flag.room.name);\r\n                return this.changeOpName(correctOpName, opName + \"temp\" + tempDir);\r\n            }\r\n            else {\r\n                console.log(`no current op with that name`);\r\n                return this.changeOpName(testOpName, correctOpName);\r\n            }\r\n        }\r\n\r\n        return `all flags consistent`;\r\n    },\r\n\r\n    test(from: string, to: string) {\r\n        let fromPos = helper.pathablePosition(from);\r\n        let toPos = helper.pathablePosition(to);\r\n        let consideredRooms = {};\r\n        let firstCPU = Game.cpu.getUsed();\r\n        let ret = PathFinder.search(fromPos, toPos, {\r\n            maxOps: 20000,\r\n            roomCallback: (roomName) => consideredRooms[roomName] = true\r\n        });\r\n        firstCPU = Game.cpu.getUsed() - firstCPU;\r\n        let consideredRooms2 = {};\r\n        let secondCPU = Game.cpu.getUsed();\r\n        let range = Game.map.getRoomLinearDistance(from, to);\r\n        let ret2 = PathFinder.search(fromPos, toPos, {\r\n            maxOps: 20000,\r\n            roomCallback: (roomName) => {\r\n                if (Game.map.getRoomLinearDistance(roomName, to) > range) {\r\n                    return false;\r\n                }\r\n                consideredRooms2[roomName] = true;\r\n            }\r\n        });\r\n        secondCPU = Game.cpu.getUsed() - secondCPU;\r\n        return `First path:\\n` +\r\n            `considered ${Object.keys(consideredRooms)}\\n` +\r\n            `searched ${Object.keys(consideredRooms).length} rooms\\n` +\r\n            `opsUsed ${ret.ops}\\n` +\r\n            `incomplete ${ret.incomplete}\\n` +\r\n            `path length ${ret.path.length}\\n` +\r\n            `cpu: ${firstCPU}` + `Second path:\\n` +\r\n            `considered ${Object.keys(consideredRooms2)}\\n` +\r\n            `searched ${Object.keys(consideredRooms2).length} rooms\\n` +\r\n            `opsUsed ${ret2.ops}\\n` +\r\n            `incomplete ${ret2.incomplete}\\n` +\r\n            `path length ${ret2.path.length}\\n` +\r\n            `cpu: ${secondCPU}`;\r\n    },\r\n\r\n    testCPU() {\r\n        let iterations = 1000;\r\n        let cpu = Game.cpu.getUsed();\r\n        for (let i = 0; i < iterations; i++) {\r\n            // nothing\r\n        }\r\n        let baseline = Game.cpu.getUsed() - cpu;\r\n        cpu = Game.cpu.getUsed();\r\n        for (let i = 0; i < iterations; i++) {\r\n            Game.map.getRoomLinearDistance(\"W25S25\", \"E25S25\");\r\n        }\r\n        return `cpu: ${Game.cpu.getUsed() - cpu - baseline} ${Game.cpu.getUsed() - cpu} ${baseline}`;\r\n    },\r\n\r\n    resetPathCPU() {\r\n        let count = 0;\r\n        for (let creepName in Game.creeps) {\r\n            let creep = Game.creeps[creepName];\r\n            if (creep.memory._travel) {\r\n                count++;\r\n                creep.memory._travel.cpu = 0;\r\n            }\r\n        }\r\n        return `reset cpu for ${count} creeps`\r\n    },\r\n};\r\n","import {Empire} from \"../ai/Empire\";\r\nimport {notifier} from \"../notifier\";\r\nimport {Operation} from \"../ai/operations/Operation\";\r\nimport {helper} from \"./helper\";\r\nimport {QuadOperation} from \"../ai/operations/QuadOperation\";\r\nimport {FlexOperation} from \"../ai/operations/FlexOperation\";\r\nimport {CACHE_INVALIDATION_FREQUENCY, CACHE_INVALIDATION_PERIOD} from \"../config/constants\";\r\nimport { consoleCommands } from \"./consoleCommands\";\r\n\r\nconst OPERATION_CLASSES = {\r\n    flex: FlexOperation,\r\n    quad: QuadOperation,\r\n};\r\n\r\nexport var empire: Empire;\r\n\r\nexport var loopHelper = {\r\n\r\n    initEmpire: function() {\r\n        empire = new Empire();\r\n        global.emp = empire;\r\n        empire.init();\r\n    },\r\n\r\n    getOperations: function(empire: Empire): Operation[] {\r\n\r\n        // gather flag data, instantiate operations\r\n        let operationList: {[operationName: string]: Operation} = {};\r\n        for (let flagName in Game.flags) {\r\n            for (let typeName in OPERATION_CLASSES) {\r\n                if (!OPERATION_CLASSES.hasOwnProperty(typeName)) continue;\r\n                if (flagName.substring(0, typeName.length) === typeName) {\r\n                    let operationClass = OPERATION_CLASSES[typeName];\r\n                    let flag = Game.flags[flagName];\r\n                    let name = flagName.substring(flagName.indexOf(\"_\") + 1);\r\n\r\n                    if (operationList.hasOwnProperty(name)) {\r\n                        console.log(`operation with name ${name} already exists (type: ${operationList[name].type}), please use a different name`);\r\n                        continue;\r\n                    }\r\n\r\n                    let operation;\r\n                    try {\r\n                        operation = new operationClass(flag, name, typeName, empire);\r\n                    }\r\n                    catch (e) {\r\n                        console.log(\"error parsing flag name and bootstrapping operation\");\r\n                        console.log(e);\r\n                    }\r\n\r\n                    operationList[name] = operation;\r\n                    global[name] = operation;\r\n                }\r\n            }\r\n        }\r\n\r\n        Game.operations = operationList;\r\n\r\n        return _.sortBy(operationList, (operation: Operation) => operation.priority);\r\n    },\r\n\r\n    initMemory: function() {\r\n        _.defaultsDeep(Memory, {\r\n            stats: {},\r\n            temp: {},\r\n            playerConfig: {\r\n                terminalNetworkRange: 6,\r\n                muteSpawn: false,\r\n                enableStats: false,\r\n                creditReserveAmount: Number.MAX_VALUE,\r\n                powerMinimum: 9000,\r\n            },\r\n            profiler: {},\r\n            traders: {},\r\n            powerObservers: {},\r\n            notifier: [],\r\n            cpu: {\r\n                history: [],\r\n                average: Game.cpu.getUsed(),\r\n            },\r\n            hostileMemory: {}\r\n        });\r\n    },\r\n\r\n    scavangeResources: function() {\r\n        for (let v in Game.rooms) {\r\n            let room = Game.rooms[v];\r\n            let resources = room.find(FIND_DROPPED_RESOURCES) as Resource[];\r\n            for (let resource of resources) {\r\n                if (resource.amount > 10) {\r\n                    let creep = resource.pos.lookFor(LOOK_CREEPS)[0] as Creep;\r\n                    if (creep && creep.my && creep.memory.scavanger === resource.resourceType\r\n                        && (!creep.carry[resource.resourceType] || creep.carry[resource.resourceType] < creep.carryCapacity)) {\r\n                        let outcome = creep.pickup(resource);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    invalidateCache: Game.time % CACHE_INVALIDATION_FREQUENCY < CACHE_INVALIDATION_PERIOD,\r\n\r\n\r\n\r\n    initConsoleCommands: function() {\r\n        // command functions found in consoleCommands.ts can be executed from the game console\r\n        // example: cc.minv()\r\n        global.cc = consoleCommands;\r\n        global.note = notifier;\r\n        global.helper = helper;\r\n    },\r\n\r\n    garbageCollection: function() {\r\n\r\n        if (Game.time < Memory.nextGC) { return; }\r\n\r\n        for (let id in Memory.hostileMemory) {\r\n            let creep = Game.getObjectById<Creep>(id);\r\n            if (!creep) { delete Memory.hostileMemory[id]; }\r\n        }\r\n\r\n        Memory.nextGC = Game.time += helper.randomInterval(100);\r\n    }\r\n};\r\n","import {helper} from \"../helpers/helper\";\r\nimport {empire} from \"../helpers/loopHelper\";\r\nimport {ROOMTYPE_SOURCEKEEPER, ROOMTYPE_CORE, ROOMTYPE_CONTROLLER, ROOMTYPE_ALLEY, WorldMap} from \"../ai/WorldMap\";\r\nimport {Agent} from \"../ai/missions/Agent\";\r\n\r\nexport function initRoomPrototype() {\r\n    Object.defineProperty(Room.prototype, \"hostiles\", {\r\n        get: function myProperty() {\r\n            if (!Game.cache.hostiles[this.name]) {\r\n                let hostiles = this.find(FIND_HOSTILE_CREEPS) as Creep[];\r\n                let filteredHostiles = [];\r\n                for (let hostile of hostiles) {\r\n                    let username = hostile.owner.username;\r\n                    let isEnemy = empire.diplomat.checkEnemy(username, this.name);\r\n                    if (isEnemy) {\r\n                        filteredHostiles.push(hostile);\r\n                    }\r\n                }\r\n                Game.cache.hostiles[this.name] = filteredHostiles;\r\n            }\r\n            return Game.cache.hostiles[this.name];\r\n        }\r\n    });\r\n\r\n    // deprecated\r\n    Object.defineProperty(Room.prototype, \"hostilesAndLairs\", {\r\n        get: function myProperty() {\r\n            if (!Game.cache.hostilesAndLairs[this.name]) {\r\n                let lairs = _.filter(this.findStructures(STRUCTURE_KEEPER_LAIR), (lair: StructureKeeperLair) => {\r\n                    return !lair.ticksToSpawn || lair.ticksToSpawn < 10;\r\n                });\r\n                Game.cache.hostilesAndLairs[this.name] = lairs.concat(this.hostiles);\r\n            }\r\n            return Game.cache.hostilesAndLairs[this.name];\r\n        }\r\n    });\r\n\r\n    Object.defineProperty(Room.prototype, \"roomType\", {\r\n        get: function myProperty(): number {\r\n            if (!this.memory.roomType) {\r\n\r\n                // source keeper\r\n                let lairs = this.findStructures(STRUCTURE_KEEPER_LAIR);\r\n                if (lairs.length > 0) {\r\n                    this.memory.roomType = ROOMTYPE_SOURCEKEEPER;\r\n                }\r\n\r\n                // core\r\n                if (!this.memory.roomType) {\r\n                    let sources = this.find(FIND_SOURCES);\r\n                    if (sources.length === 3) {\r\n                        this.memory.roomType = ROOMTYPE_CORE;\r\n                    }\r\n                }\r\n\r\n                // controller rooms\r\n                if (!this.memory.roomType) {\r\n                    if (this.controller) {\r\n                        this.memory.roomType = ROOMTYPE_CONTROLLER;\r\n                    }\r\n                    else {\r\n                        this.memory.roomType = ROOMTYPE_ALLEY;\r\n                    }\r\n                }\r\n            }\r\n            return this.memory.roomType;\r\n        }\r\n    });\r\n\r\n    Object.defineProperty(Room.prototype, \"structures\", {\r\n        get: function myProperty() {\r\n            if (!Game.cache.structures[this.name]) {\r\n                Game.cache.structures[this.name] = _.groupBy(this.find(FIND_STRUCTURES), (s:Structure) => s.structureType);\r\n            }\r\n            return Game.cache.structures[this.name] || [];\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Returns array of structures, caching results on a per-tick basis\r\n     * @param structureType\r\n     * @returns {Structure[]}\r\n     */\r\n    Room.prototype.findStructures = function(structureType: string): Structure[] {\r\n        if (!Game.cache.structures[this.name]) {\r\n            Game.cache.structures[this.name] = _.groupBy(this.find(FIND_STRUCTURES), (s:Structure) => s.structureType);\r\n        }\r\n        return Game.cache.structures[this.name][structureType] || [];\r\n    };\r\n\r\n    /**\r\n     * Finds creeps and containers in missionRoom that will give up energy, primarily useful when a storage is not available\r\n     * Caches results on a per-tick basis. Useful before storage is available or in remote mining rooms.\r\n     * @param roomObject - When this optional argument is supplied, return closest source\r\n     * @returns {StructureContainer|Creep} - Returns source with highest amount of available energy, unless roomObject is\r\n     * supplied\r\n     */\r\n    Room.prototype.getAltBattery = function(roomObject?: RoomObject): StructureContainer | Creep {\r\n        if (!this.altBatteries) {\r\n            let possibilities = [];\r\n            let containers = this.findStructures(STRUCTURE_CONTAINER);\r\n            if (this.controller && this.controller.getBattery() instanceof StructureContainer) {\r\n                _.pull(containers, this.controller.getBattery());\r\n            }\r\n            for (let container of containers) {\r\n                if (container.store.energy >= 50) {\r\n                    possibilities.push(container);\r\n                }\r\n            }\r\n            let creeps = this.find(FIND_MY_CREEPS, {filter: (c: Creep) => c.memory.donatesEnergy});\r\n            for (let creep of creeps) {\r\n                if (creep.carry.energy >= 50) {\r\n                    possibilities.push(creep);\r\n                }\r\n            }\r\n            if (this.terminal && this.terminal.store.energy >= 50) {\r\n                possibilities.push(this.terminal);\r\n            }\r\n            this.altBatteries = _.sortBy(possibilities, (p: Creep | StructureContainer) => {\r\n                return Agent.normalizeStore((p)).store.energy;\r\n            });\r\n        }\r\n        if (roomObject) {\r\n            return roomObject.pos.findClosestByRange(this.altBatteries) as StructureContainer | Creep;\r\n        }\r\n        else {\r\n            return _.last(this.altBatteries) as StructureContainer | Creep;\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Returns missionRoom coordinates for a given missionRoom\r\n     * @returns {*}\r\n     */\r\n\r\n    Object.defineProperty(Room.prototype, \"coords\", {\r\n        get: function myProperty() {\r\n            if (!this.memory.coordinates) {\r\n                this.memory.coordinates = WorldMap.getRoomCoordinates(this.name);\r\n            }\r\n            return this.memory.coordinates;\r\n        }\r\n    });\r\n\r\n    Object.defineProperty(Room.prototype, \"defaultMatrix\", {\r\n        get: function myProperty() {\r\n            return empire.traveler.getStructureMatrix(this);\r\n        }\r\n    });\r\n\r\n    Object.defineProperty(Room.prototype, \"fleeObjects\", {\r\n        get: function myProperty() {\r\n            if (!Game.cache.fleeObjects[this.name]) {\r\n                let fleeObjects = _.filter(this.hostiles, (c: Creep): boolean => {\r\n                    if (c instanceof Creep) {\r\n                        return _.find(c.body, (part: BodyPartDefinition) => {\r\n                                return part.type === ATTACK || part.type === RANGED_ATTACK;\r\n                            }) !== null;\r\n                    }\r\n                    else {\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                if (this.roomType === ROOMTYPE_SOURCEKEEPER) {\r\n                    fleeObjects = fleeObjects.concat(this.lairThreats)\r\n                }\r\n\r\n                Game.cache.fleeObjects[this.name] = fleeObjects;\r\n            }\r\n\r\n            return Game.cache.fleeObjects[this.name];\r\n        }\r\n    });\r\n\r\n    Object.defineProperty(Room.prototype, \"lairThreats\", {\r\n        get: function myProperty() {\r\n            if (!Game.cache.lairThreats[this.name]) {\r\n                Game.cache.lairThreats[this.name] = _.filter(this.findStructures(STRUCTURE_KEEPER_LAIR),\r\n                    (lair: StructureKeeperLair) => { return !lair.ticksToSpawn || lair.ticksToSpawn < 10; });\r\n            }\r\n            return Game.cache.lairThreats[this.name];\r\n        }\r\n    });\r\n}\r\n","export function initRoomPositionPrototype() {\r\n    RoomPosition.prototype.isNearExit = function(range: number): boolean {\r\n        return this.x - range <= 0 || this.x + range >= 49 || this.y - range <= 0 || this.y + range >= 49;\r\n    };\r\n\r\n    RoomPosition.prototype.getFleeOptions = function (roomObject: RoomObject): RoomPosition[] {\r\n        let fleePositions = [];\r\n        let currentRange = this.getRangeTo(roomObject);\r\n\r\n        for (let i = 1; i <= 8; i++) {\r\n            let fleePosition = this.getPositionAtDirection(i);\r\n            if (fleePosition.x > 0 && fleePosition.x < 49 && fleePosition.y > 0 && fleePosition.y < 49) {\r\n                let rangeToHostile = fleePosition.getRangeTo(roomObject);\r\n                if (rangeToHostile > 0) {\r\n                    if (rangeToHostile < currentRange) {\r\n                        fleePosition[\"veryDangerous\"] = true;\r\n                    }\r\n                    else if (rangeToHostile === currentRange) {\r\n                        fleePosition[\"dangerous\"] = true;\r\n                    }\r\n                    fleePositions.push(fleePosition);\r\n                }\r\n            }\r\n        }\r\n\r\n        return fleePositions;\r\n    };\r\n\r\n    RoomPosition.prototype.bestFleePosition = function (hostile: Creep, ignoreRoads = false, swampRat = false): RoomPosition {\r\n        let options = [];\r\n\r\n        let fleeOptions = this.getFleeOptions(hostile);\r\n        for (let i = 0; i < fleeOptions.length; i++) {\r\n            let option = fleeOptions[i];\r\n            let terrain = option.lookFor(LOOK_TERRAIN)[0];\r\n            if (terrain !== \"wall\") {\r\n                let creepsInTheWay = option.lookFor(LOOK_CREEPS);\r\n                if (creepsInTheWay.length === 0) {\r\n                    let structures = option.lookFor(LOOK_STRUCTURES);\r\n                    let hasRoad = false;\r\n                    let impassible = false;\r\n                    for (let structure of structures) {\r\n                        if (_.includes(OBSTACLE_OBJECT_TYPES, structure.structureType)) {\r\n                            // can't go through it\r\n                            impassible = true;\r\n                            break;\r\n                        }\r\n                        if (structure.structureType === STRUCTURE_ROAD) {\r\n                            hasRoad = true;\r\n                        }\r\n                    }\r\n\r\n                    if (!impassible) {\r\n                        let preference = 0;\r\n\r\n                        if (option.dangerous) {\r\n                            preference += 10;\r\n                        }\r\n                        else if (option.veryDangerous) {\r\n                            preference += 20;\r\n                        }\r\n\r\n                        if (hasRoad) {\r\n                            if (ignoreRoads) {\r\n                                preference += 2;\r\n                            }\r\n                            else {\r\n                                preference += 1;\r\n                            }\r\n                        }\r\n                        else if (terrain === \"plain\") {\r\n                            preference += 2;\r\n                        }\r\n                        else if (terrain === \"swamp\") {\r\n                            if (swampRat) {\r\n                                preference += 1;\r\n                            }\r\n                            else {\r\n                                preference += 5;\r\n                            }\r\n                        }\r\n\r\n                        options.push({position: option, preference: preference});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (options.length > 0) {\r\n            options = _(options)\r\n                .shuffle()\r\n                .sortBy(\"preference\")\r\n                .value();\r\n\r\n            return options[0].position;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns all surrounding positions that are currently open\r\n     * @param ignoreCreeps - if true, will consider positions containing a creep to be open\r\n     * @returns {RoomPosition[]}\r\n     */\r\n    RoomPosition.prototype.openAdjacentSpots = function (ignoreCreeps?: boolean): RoomPosition[] {\r\n        let positions = [];\r\n        for (let i = 1; i <= 8; i++) {\r\n            let testPosition = this.getPositionAtDirection(i);\r\n\r\n            if (testPosition.isPassible(ignoreCreeps)) {\r\n                // passed all tests\r\n                positions.push(testPosition);\r\n            }\r\n        }\r\n        return positions;\r\n    };\r\n\r\n    /**\r\n     * returns position at direction relative to this position\r\n     * @param direction\r\n     * @param range - optional, can return position with linear distance > 1\r\n     * @returns {RoomPosition}\r\n     */\r\n    RoomPosition.prototype.getPositionAtDirection = function(direction: number, range?: number): RoomPosition {\r\n        if (!range) {\r\n            range = 1;\r\n        }\r\n        let x = this.x;\r\n        let y = this.y;\r\n        let room = this.roomName;\r\n\r\n        if (direction === 1) {\r\n            y -= range;\r\n        }\r\n        else if (direction === 2) {\r\n            y -= range;\r\n            x += range;\r\n        }\r\n        else if (direction === 3) {\r\n            x += range;\r\n        }\r\n        else if (direction === 4) {\r\n            x += range;\r\n            y += range;\r\n        }\r\n        else if (direction === 5) {\r\n            y += range;\r\n        }\r\n        else if (direction === 6) {\r\n            y += range;\r\n            x -= range;\r\n        }\r\n        else if (direction === 7) {\r\n            x -= range;\r\n        }\r\n        else if (direction === 8) {\r\n            x -= range;\r\n            y -= range;\r\n        }\r\n        return new RoomPosition(x, y, room);\r\n    };\r\n\r\n    /**\r\n     * Look if position is currently open/passible\r\n     * @param ignoreCreeps - if true, consider positions containing creeps to be open\r\n     * @returns {boolean}\r\n     */\r\n    RoomPosition.prototype.isPassible = function(ignoreCreeps?: boolean): boolean {\r\n        if (this.isNearExit(0)) return false;\r\n\r\n        // look for walls\r\n        if (_.head(this.lookFor(LOOK_TERRAIN)) !== \"wall\") {\r\n\r\n            // look for creeps\r\n            if (ignoreCreeps || this.lookFor(LOOK_CREEPS).length === 0) {\r\n\r\n                // look for impassible structions\r\n                if (_.filter(this.lookFor(LOOK_STRUCTURES), (struct: Structure) => {\r\n                        return struct.structureType !== STRUCTURE_ROAD\r\n                            && struct.structureType !== STRUCTURE_CONTAINER\r\n                            && struct.structureType !== STRUCTURE_RAMPART;\r\n                    }).length === 0 ) {\r\n\r\n                    // passed all tests\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * @param structureType\r\n     * @returns {Structure} structure of type structureType that resides at position (null if no structure of that type is present)\r\n     */\r\n    RoomPosition.prototype.lookForStructure = function(structureType: string): Structure {\r\n        let structures = this.lookFor(LOOK_STRUCTURES);\r\n        return _.find(structures, {structureType: structureType}) as Structure;\r\n    };\r\n}\r\n","import {helper} from \"../helpers/helper\";\r\nimport {initRoomPrototype} from \"./initRoomPrototype\";\r\nimport {initRoomPositionPrototype} from \"./initRoomPositionPrototype\";\r\nexport function initPrototypes() {\r\n\r\n    initRoomPrototype();\r\n    initRoomPositionPrototype();\r\n\r\n    // misc prototype modifications\r\n\r\n    /**\r\n     * Will remember an instance of structureType that it finds within range, good for storing mining containers, etc.\r\n     * There should only be one instance of that structureType within range, per object\r\n     * @param structureType\r\n     * @param range\r\n     * @param immediate\r\n     * @returns Structure[]\r\n     */\r\n    RoomObject.prototype.findMemoStructure = function<T>(structureType: string, range: number, immediate = false): T {\r\n        if (!this.room.memory[structureType]) this.room.memory[structureType] = {};\r\n        if (this.room.memory[structureType][this.id]) {\r\n            let structure = Game.getObjectById(this.room.memory[structureType][this.id]);\r\n            if (structure) {\r\n                return structure as T;\r\n            }\r\n            else {\r\n                this.room.memory[structureType][this.id] = undefined;\r\n                return this.findMemoStructure(structureType, range, immediate);\r\n            }\r\n        }\r\n        else if (Game.time % 10 === 7 || immediate) {\r\n            let structures = this.pos.findInRange(this.room.findStructures(structureType), range);\r\n            if (structures.length > 0) {\r\n               this.room.memory[structureType][this.id] = structures[0].id;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Looks for structure to be used as an energy holder for upgraders\r\n     * @returns { StructureLink | StructureStorage | StructureContainer }\r\n     */\r\n    StructureController.prototype.getBattery = function (structureType?: string): StructureLink | StructureStorage | StructureContainer {\r\n        if (this.room.memory.controllerBatteryId) {\r\n            let batt = Game.getObjectById(this.room.memory.controllerBatteryId) as StructureLink | StructureStorage | StructureContainer;\r\n            if (batt) {\r\n                return batt;\r\n            }\r\n            else {\r\n                this.room.memory.controllerBatteryId = undefined;\r\n                this.room.memory.upgraderPositions = undefined;\r\n            }\r\n        }\r\n        else {\r\n            let battery = _(this.pos.findInRange(FIND_STRUCTURES, 3))\r\n                .filter((structure: Structure) => {\r\n                if (structureType) {\r\n                    return structure.structureType === structureType;\r\n                }\r\n                else {\r\n                    if (structure.structureType === STRUCTURE_CONTAINER || structure.structureType === STRUCTURE_LINK) {\r\n                        let sourcesInRange = structure.pos.findInRange(FIND_SOURCES, 2);\r\n                        return sourcesInRange.length === 0;\r\n                    }\r\n                }\r\n                })\r\n                .head() as Terminal | Link | Container;\r\n            if (battery) {\r\n                this.room.memory.controllerBatteryId = battery.id;\r\n                return battery;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Positions on which it is viable for an upgrader to stand relative to battery/controller\r\n     * @returns {Array}\r\n     */\r\n    StructureController.prototype.getUpgraderPositions = function(): RoomPosition[] {\r\n        if (this.upgraderPositions) {\r\n            return this.upgraderPositions;\r\n        }\r\n        else {\r\n            if (this.room.memory.upgraderPositions) {\r\n                this.upgraderPositions = [];\r\n                for (let position of this.room.memory.upgraderPositions) {\r\n                    this.upgraderPositions.push(helper.deserializeRoomPosition(position));\r\n                }\r\n                return this.upgraderPositions;\r\n            }\r\n            else {\r\n                let controller = this;\r\n                let battery = this.getBattery();\r\n                if (!battery) { return; }\r\n\r\n                let positions = [];\r\n                for (let i = 1; i <= 8; i++) {\r\n                    let position = battery.pos.getPositionAtDirection(i);\r\n                    if (!position.isPassible(true) || !position.inRangeTo(controller, 3)\r\n                        || position.lookFor(LOOK_STRUCTURES).length > 0) continue;\r\n                    positions.push(position);\r\n                }\r\n                this.room.memory.upgraderPositions = positions;\r\n                return positions;\r\n            }\r\n        }\r\n    };\r\n\r\n    StructureObserver.prototype._observeRoom = StructureObserver.prototype.observeRoom;\r\n\r\n    StructureObserver.prototype.observeRoom = function(roomName: string, purpose = \"unknown\", override = false): number {\r\n\r\n        let makeObservation = (observation: Observation): number => {\r\n            this.observation; // load the current observation before overwriting\r\n            this.room.memory.observation = observation;\r\n            this.alreadyObserved = true;\r\n            return this._observeRoom(observation.roomName);\r\n        };\r\n\r\n        if (override) {\r\n            return makeObservation({roomName: roomName, purpose: purpose});\r\n        }\r\n        else {\r\n            if (!this.room.memory.obsQueue) this.room.memory.obsQueue = [];\r\n            let queue = this.room.memory.obsQueue as Observation[];\r\n            if (!_.find(queue, (item) => item.purpose === purpose)) {\r\n                queue.push({purpose: purpose, roomName: roomName});\r\n            }\r\n            if (!this.alreadyObserved) {\r\n                return makeObservation(queue.shift());\r\n            }\r\n            else {\r\n                return OK;\r\n            }\r\n        }\r\n    };\r\n\r\n    Object.defineProperty(StructureObserver.prototype, \"observation\", {\r\n        get: function() {\r\n            if (!this._observation) {\r\n                let observation = this.room.memory.observation as Observation;\r\n                if (observation) {\r\n                    let room = Game.rooms[observation.roomName];\r\n                    if (room) {\r\n                        observation.room = room;\r\n                        this._observation = observation;\r\n                    }\r\n                    else {\r\n                        // console.log(\"bad observation:\", JSON.stringify(observation));\r\n                    }\r\n                }\r\n            }\r\n            return this._observation;\r\n        }\r\n    });\r\n\r\n    StructureTerminal.prototype._send = StructureTerminal.prototype.send;\r\n\r\n    StructureTerminal.prototype.send = function(resourceType: string, amount: number, roomName: string, description?: string) {\r\n        if (this.alreadySent) {\r\n            return ERR_BUSY;\r\n        }\r\n        else {\r\n            this.alreadySent = true;\r\n            return this._send(resourceType, amount, roomName, description);\r\n        }\r\n    };\r\n\r\n    StructureTower.prototype._repair = StructureTower.prototype.repair;\r\n    StructureTower.prototype.repair = function (target: Structure | Spawn): number {\r\n        if (!this.alreadyFired) {\r\n            this.alreadyFired = true;\r\n            return this._repair(target);\r\n        }\r\n        else {\r\n            return ERR_BUSY;\r\n        }\r\n    };\r\n\r\n    Creep.prototype.partCount = function(partType: string): number {\r\n        let count = 0;\r\n        for (let part of this.body) {\r\n            if (part.type === partType) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    };\r\n\r\n    /**\r\n     * General-purpose cpu-efficient movement function that uses ignoreCreeps: true, a high reusePath value and stuck-detection\r\n     * @param destination\r\n     * @param ops - pathfinding ops, ignoreCreeps and reusePath will be overwritten\r\n     * @param dareDevil\r\n     * @returns {number} - Error code\r\n     */\r\n    Creep.prototype.blindMoveTo = function(destination: RoomPosition | {pos: RoomPosition}, ops?: any, dareDevil = false): number {\r\n\r\n        if (this.spawning) {\r\n            return 0;\r\n        }\r\n\r\n        if (this.fatigue > 0) {\r\n            return ERR_TIRED;\r\n        }\r\n\r\n        if (!this.memory.position) {\r\n            this.memory.position = this.pos;\r\n        }\r\n\r\n        if (!ops) {\r\n            ops = {};\r\n        }\r\n\r\n        // check if trying to move last tick\r\n        let movingLastTick = true;\r\n        if (!this.memory.lastTickMoving) this.memory.lastTickMoving = 0;\r\n        if (Game.time - this.memory.lastTickMoving > 1) {\r\n            movingLastTick = false;\r\n        }\r\n        this.memory.lastTickMoving = Game.time;\r\n\r\n        // check if stuck\r\n        let stuck = this.pos.inRangeTo(this.memory.position.x, this.memory.position.y, 0);\r\n        this.memory.position = this.pos;\r\n        if (stuck && movingLastTick) {\r\n            if (!this.memory.stuckCount) this.memory.stuckCount = 0;\r\n            this.memory.stuckCount++;\r\n            if (dareDevil && this.memory.stuckCount > 0) {\r\n                this.memory.detourTicks = 5;\r\n            }\r\n            else if (this.memory.stuckCount >= 2) {\r\n                this.memory.detourTicks = 5;\r\n                // this.say(\"excuse me\", true);\r\n            }\r\n            if (this.memory.stuckCount > 500 && !this.memory.stuckNoted) {\r\n                console.log(this.name, \"is stuck at\", this.pos, \"stuckCount:\", this.memory.stuckCount);\r\n                this.memory.stuckNoted = true;\r\n            }\r\n        }\r\n        else {\r\n            this.memory.stuckCount = 0;\r\n        }\r\n\r\n        if (this.memory.detourTicks > 0) {\r\n            this.memory.detourTicks--;\r\n            if (dareDevil) {\r\n                ops.reusePath = 0;\r\n            }\r\n            else {\r\n                ops.reusePath = 5;\r\n            }\r\n            return this.moveTo(destination, ops);\r\n        }\r\n        else {\r\n            ops.reusePath = 50;\r\n            ops.ignoreCreeps = true;\r\n            return this.moveTo(destination, ops);\r\n        }\r\n    };\r\n}\r\n","import {loopHelper, empire} from \"./helpers/loopHelper\";\nimport {initPrototypes} from \"./prototypes/initPrototypes\";\nimport {Profiler} from \"./Profiler\";\nimport {TimeoutTracker} from \"./TimeoutTracker\";\n\nloopHelper.initMemory();\ninitPrototypes();\n\nmodule.exports.loop = function () {\n    Game.cache = { structures: {}, hostiles: {}, hostilesAndLairs: {}, mineralCount: {}, labProcesses: {},\n        activeLabCount: 0, placedRoad: false, fleeObjects: {}, lairThreats: {}};\n\n    // TimeoutTracker - Diagnoses CPU timeouts\n    try { TimeoutTracker.init(); } catch (e) { console.log(\"error initializing TimeoutTracker:\\n\", e.stack); }\n\n    // Init phase - Information is gathered about the game state and game objects instantiated\n    Profiler.start(\"init\");\n    loopHelper.initEmpire();\n    let operations = loopHelper.getOperations(empire);\n    for (let operation of operations) operation.init();\n    Profiler.end(\"init\");\n\n    // RoleCall phase - Find creeps belonging to missions and spawn any additional needed.\n    Profiler.start(\"roleCall\");\n    for (let operation of operations) operation.roleCall();\n    Profiler.end(\"roleCall\");\n\n    // Actions phase - Actions that change the game state are executed in this phase.\n    Profiler.start(\"actions\");\n    for (let operation of operations) operation.actions();\n    Profiler.end(\"actions\");\n\n    // Finalize phase - Code that needs to run post-actions phase\n    for (let operation of operations) operation.invalidateCache();\n    Profiler.start(\"finalize\");\n    for (let operation of operations) operation.finalize();\n    Profiler.end(\"finalize\");\n\n    // post-operation actions and utilities\n    Profiler.start(\"postOperations\");\n    try { empire.actions(); } catch (e) { console.log(\"error with empire actions\\n\", e.stack); }\n    try { loopHelper.scavangeResources(); } catch (e) { console.log(\"error scavanging:\\n\", e.stack); }\n    try { loopHelper.initConsoleCommands(); } catch (e) { console.log(\"error loading console commands:\\n\", e.stack); }\n    try { loopHelper.garbageCollection(); } catch (e) { console.log(\"error during garbage collection:\\n\", e.stack ); }\n    Profiler.end(\"postOperations\");\n    try { Profiler.finalize(); } catch (e) { console.log(\"error checking Profiler:\\n\", e.stack); }\n    try { TimeoutTracker.finalize(); } catch (e) { console.log(\"error finalizing TimeoutTracker:\\n\", e.stack); }\n};\n\n"],"names":[],"mappings":"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AAC,EAAC;gBACxE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;gBAC3E,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;gBAC1E,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;gBACpE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;gBACxE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,C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E,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;gBACzE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;;gBAG1B,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;gBAC3C,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;gBAC3E,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;gBAC7E,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;gBACzE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;gBACpE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;;gBAGZ,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;gBAC1D,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;gBAC1E,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;gBAC9E,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;gBAC3E,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;gBACzE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;gBACpE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;aAC1D;YACD,CAAC,iBAAiB,GAAG;;gBAEjB,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;gBAC9E,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;gBACzE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;;gBAG5B,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;gBACzE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;gBACpE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;;gBAG1B,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;gBACpE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;gBACxE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;;gBAG5B,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC;gBACzE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAC;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"};